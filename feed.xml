<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://tech.bedrockstreaming.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://tech.bedrockstreaming.com/" rel="alternate" type="text/html" /><updated>2025-02-26T12:59:45+00:00</updated><id>https://tech.bedrockstreaming.com/feed.xml</id><title type="html">Bedrock Tech Blog</title><subtitle>Blog technique de Bedrock</subtitle><entry><title type="html">How we made our apps more accessible on SmartTVs üì∫</title><link href="https://tech.bedrockstreaming.com/2025/02/26/tvjs-accessibility.html" rel="alternate" type="text/html" title="How we made our apps more accessible on SmartTVs üì∫" /><published>2025-02-26T00:00:00+00:00</published><updated>2025-02-26T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2025/02/26/tvjs-accessibility</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2025/02/26/tvjs-accessibility.html">&lt;p&gt;Accessibility is at the heart of our concerns, at Bedrock Streaming we work hard to make our applications accessible to everyone.
In this article, I‚Äôm going to share with you how my team and I improved our accessibility score of our SmartTV apps by 18% in just a few months!
This improvement is even more impressive because on smartTV we have to manage several constraints, including taking into account the specificities of each device (Tizen, WebOS, Hisense, Panasonic, etc.).&lt;/p&gt;

&lt;p&gt;I tried to make this article accessible to everyone, whether you‚Äôre a developer or not. I have to admit that for the code samples, you need to know a bit of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CSS&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt;, but I tried to explain it as simply as possible.&lt;/p&gt;

&lt;p&gt;Hi there! üëã I‚Äôm Julie Nginn, I‚Äôm a front-end developer and the accessibility technical referent at the &lt;em&gt;TVJS&lt;/em&gt; service. We called this service ‚ÄúTVJS‚Äù because we develop the apps for the smartTVs, like Samsung, LG, Sony etc. using JavaScript.
First of all, you need to know that I‚Äôm very passionate and engaged in accessibility. My main motivation is to make the streaming better for everyone, including people with disabilities. üí™&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‚ÑπÔ∏è What is the web accessibility?&lt;/p&gt;

  &lt;p&gt;Web accessibility is the practice of designing and developing websites so that they can be used by as many people as possible, including those with disabilities. It‚Äôs about removing barriers that prevent people from accessing or interacting with web content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;h3 id=&quot;october-2022&quot;&gt;October 2022&lt;/h3&gt;
&lt;p&gt;During the R&amp;amp;D (Research and Development) day at Bedrock, we decided to investigate and see if it is possible to implement audio guidance on our TVJS apps. Audio guidance is a basic feature on the smartTVs that can be found in the accessibility settings which allows the user to hear the text on the screen.&lt;/p&gt;

&lt;p&gt;I took the lead on this project and I started to implement it for the platform WebOS first, because it‚Äôs the device I had at home, and it‚Äôs pretty easy to test on this device.
At that time, the only documentation I found to implement the feature on WebOS was using the &lt;a href=&quot;https://webostv.developer.lge.com/develop/references/luna-service-introduction&quot;&gt;Luna Service API&lt;/a&gt; to enable the audio guidance feature. By calling the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;voicereadout.readAlert()&lt;/code&gt; returned by the API and passing it the text we want to read.
For the demonstration, I implemented it in the pairing page. When any button in this page is focused, we can hear the text of the button.&lt;/p&gt;

&lt;p&gt;Here is the result of this first POC (it‚Äôs in French):&lt;/p&gt;
&lt;video src=&quot;/images/posts/tvjs/tvjs_tts_webos.mp4&quot; width=&quot;560&quot; height=&quot;315&quot; controls=&quot;&quot;&gt;
&lt;/video&gt;

&lt;p&gt;The implementation was pretty simple (but spoiler alert: it will be even easier later). Here is the code, we need to add to enable the audio guidance feature on WebOS:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;audioGuidanceConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;urlLuna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;luna://com.webos.settingsservice&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;getSystemSettings&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;audioGuidance&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;requestType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;audio guidance&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activateTTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrappers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;serviceRequestWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;audioGuidance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;audioGuidance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;audioGuidance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;voicereadout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrappers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getWebOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;voicereadout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;readAlert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Fail silently&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, in order to use it in our app, we just have to call the function where we want to read the text. At this time, my first idea was to find a way to trigger the focus to be able to pass the text to read to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;activateTTS&lt;/code&gt;.
But it was not very simple because, the navigation on our apps was managed by a custom navigation system, and the focus was not managed by the browser. So, I  created a HOC (Higher Order Component) to manage the focus and the text to read.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;withTTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TTSComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nf&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;activateTTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TTSComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To manage the navigation and the focus in our components, we used a HOC called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;withNavigator&lt;/code&gt;. Thanks to this, the wrapped component become focusable and navigable with the remote control (and the keyboard directional arrows). I won‚Äôt talk more about our navigation system today because it should have its own article.
By using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;withTTS&lt;/code&gt; inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;withNavigator&lt;/code&gt; to wrap the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button&lt;/code&gt; component, we can retrieve the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;focus&lt;/code&gt; status from the props. So, we can call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;activateTTS&lt;/code&gt; function when the button is focused.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NavigationButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withNavigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;withTTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can clearly improve this code, moreover, with hindsight, I realize that it was quite cumbersome to have to add this HOC to all the components we wanted to read. But at this time, I was proud to have been able to prove that it was possible to implement the audio guidance on our smart TV apps. üéâ
After this POC, unfortunately no initiative was taken because the accessibility was not our first priority at that time, so this feature had been abandoned‚Ä¶ üò≠&lt;/p&gt;

&lt;h3 id=&quot;february-2024&quot;&gt;February 2024&lt;/h3&gt;
&lt;p&gt;A few months later, I decided to spend another R&amp;amp;D day to develop another feature to improve the accessibility of our apps. This time, I wanted to do something especially for the dyslexic people, because I‚Äôm dyslexic myself, and I‚Äôm a big user of streaming platforms.&lt;/p&gt;

&lt;p&gt;In accessibility, we can often see features for the blind or the deaf people, but it‚Äôs rare to see something for the dyslexic ones and even more on streaming platforms.
So, I started with a benchmark to see what is already done in the industry and at that time none of our competitors has implemented a feature for the dyslexic people, except Canal+ (for video subtitles only).&lt;/p&gt;

&lt;p&gt;After that, I put myself in the shoes of a user and imagined what could be useful for me to enjoy my experience on our apps. The project ‚ÄúDyslexic mode‚Äù on TVJS was born! üéâ&lt;/p&gt;

&lt;p&gt;First, I added a new entry called ‚ÄúAccessibility‚Äù in the user settings, where the user can activate the ‚ÄúDyslexic mode‚Äù and personalize the font and the size of the text etc.
And then, the personalization will be applied on the whole application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/tvjs/tvjs_dys_settings.png&quot; alt=&quot;tvjs_dys_entry&quot; height=&quot;340px&quot; /&gt;
&lt;img src=&quot;/images/posts/tvjs/tvjs_dys_entry.png&quot; alt=&quot;tvjs_dys_entry&quot; height=&quot;340px&quot; /&gt;
&lt;img src=&quot;/images/posts/tvjs/tvjs_dys_program.png&quot; alt=&quot;tvjs_dys_entry&quot; height=&quot;340px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To do that, we updated the global style, using CSS and JavaScript, to switch between the dyslexic and the default modes.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dyslexicMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;letterSpacing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;3px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wordSpacing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fontFamily&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;Open Dyslexic&quot;, Arial, sans-serif&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;letterSpacing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wordSpacing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fontFamily&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Arial, sans-serif&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see it‚Äôs very easy to personalize the font, and since we can use only CSS to do that, the performance is not impacted. This feature requires very few resources and effort but brings considerable improvement for users.&lt;/p&gt;

&lt;p&gt;Why is it interesting for the user to have this feature? Because it can help reduce reading time, fatigue and errors. It can also help to improve comprehension and focus. The user experience is clearly better.
And what is the benefit for Bedrock Streaming? It‚Äôs a competitive advantage, it‚Äôs a way to show that we care about our users, and we want to make the streaming better for everyone.&lt;/p&gt;

&lt;p&gt;As a user, this kind of feature is very important, especially on smartTV apps, because when we watch a movie or a series, we‚Äôre on our sofa, which is often a long way from the TV, and we don‚Äôt all have plasma screens. So, the text should be readable to keep the user on our platform.&lt;/p&gt;

&lt;p&gt;I presented this project to Mathieu Bouillot (our Product Manager, expert in accessibility) and some of our designers, and they were very enthusiastic about it. We worked together with Mathieu, and some months later the initiative ‚ÄúStyle Switcher‚Äù was created. ü•π
The project deserves a dedicated article, so I will not go into details here. But the main idea of this project is to allow the user to personalize the font, the size, the spacing, the colors etc. of the text on the whole application, so the user can adapt the app to his needs.&lt;/p&gt;

&lt;h2 id=&quot;2024-march-the-first-accessibility-audit&quot;&gt;2024 March: the first accessibility audit&lt;/h2&gt;
&lt;p&gt;First of all, I‚Äôm going to explain what is an accessibility audit.&lt;/p&gt;

&lt;p&gt;An accessibility audit is a process to evaluate the accessibility of a website or an application. The goal is to find the issues and the barriers that prevent the users with disabilities to use the website or the application.
The audit is based on the WCAG (Web Content Accessibility Guidelines) which is a set of rules to follow to make the web accessible to everyone:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Perceivable:&lt;/strong&gt;  Users must be able to perceive the information being presented. This means it must be presentable to the senses (e.g., sight, hearing, touch) in ways users can understand&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Operable:&lt;/strong&gt; Users must be able to operate the interface. This means users must be able to interact with the controls and content (e.g., using a keyboard, mouse, or assistive technology)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Understandable:&lt;/strong&gt; Users must be able to understand the content and the interface. This means the content and interface must be clear, consistent, and easy to understand&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Robust:&lt;/strong&gt; The content must be robust enough that it can be interpreted reliably by a wide variety of user agents, including assistive technology&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The audit is based on the conformity rate of the WCAG, and the score is between 0% and 100%.
In France, we use the RGAA (R√©f√©rentiel G√©n√©ral d‚ÄôAm√©lioration de l‚ÄôAccessibilit√©) which is based on the WCAG, but with some specificities for the French administration.
There are three levels of conformance:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;non-compliant&lt;/strong&gt; (0% to 49%)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;partially compliant&lt;/strong&gt; (50% to 99%)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;totally compliant&lt;/strong&gt; (100%)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Obviously, the audit alone cannot evaluate whether a site or application is completely accessible, as there are many factors to consider, and it remains theoretical because we cannot know if users will actually find it accessible.
But as developers, we need to follow the accessibility rules at least and keep our code with a correct semantic.&lt;/p&gt;

&lt;p&gt;So, in March 2024, we received the first audit of the TVJS apps from Mathieu. The score was 43% üò± The score is not catastrophic, but we noticed that our app is non-compliant. We could do better, and we decided to do so!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/tvjs/tvjs_accessibility_first_audit.png&quot; alt=&quot;The score for TVJS with the first audit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We first decided to ‚Äúprepare the ground‚Äù and fix some minor issues. Then, to have the same knowledge and understanding of the accessibility, we organized a workshop with Mathieu and the TVJS core developers to explain the basics of the accessibility, the WCAG, the ARIA (Accessible Rich Internet Applications), the tools etc. 
We can perceive the accessibility as an annoying constraint to do when we develop an app, because we need to follow some specific rules. But, when we know the context and the importance of accessibility for users, our engagement is different. And that‚Äôs what happened during this workshop. The developers were very interested and motivated to improve the accessibility of our apps.&lt;/p&gt;

&lt;p&gt;During this workshop, we also explained to Mathieu the constraints and the specificities of the smartTV apps, because those are not the same as web apps. For example, focus management is different, navigation is different &lt;em&gt;(remote control and no keyboard)&lt;/em&gt;, screen reader is different etc. With his help, we did a mob programming to find some solutions to implement screen reader on our apps.
And now, the POC I did 2 years ago becomes a reality. ü§© However, it was not easy, because on the TVJS apps, we use a custom navigation system to be able to navigate with the remote control. This system is not compatible with the screen reader because we need to use the native focus management of the browser and to use the correct HTML tags and attributes.&lt;/p&gt;

&lt;h2 id=&quot;the-refactoring&quot;&gt;The refactoring&lt;/h2&gt;
&lt;h3 id=&quot;our-contraints&quot;&gt;Our contraints&lt;/h3&gt;
&lt;p&gt;This refactoring was not easy, we had to manage several constraints because of the platform we worked on. Even if we use a web app on the smartTV, we need to take into account the specificities of each device and also their versions. Some of them use an old version of the browser, so some of the HTML tags and attributes are not supported.&lt;/p&gt;

&lt;p&gt;For example, if we don‚Äôt produce a list using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ul&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;li&lt;/code&gt;, the screen reader is not able to identify the list. To have a good semantic we have to update our lists from nested &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;div&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ul&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;li&lt;/code&gt; HTML tags.
But even if we use the correct HTML tags, the screen reader is not able to read the list correctly because the browser doesn‚Äôt manage the lists natively, because of the old OS version of the browser.
So to work around this problem, we decided to manage the lists manually by using the number of elements and their position in the list to announce to the user that they are in a list. We also need to handle the texts and translations by ourselves, which we wouldn‚Äôt need to do on the web because the screen reader does it natively.&lt;/p&gt;

&lt;p&gt;Also, each device works differently and needs a specific configuration. At TVJS, we manage a dozen of different platforms. We had to test and document each device to see if the audio guide feature is present and ensure our implementation works correctly on them. 
Sometimes the results were different between devices, so we need to be attentive during development and testing.
And for the unsupported devices/versions, we must avoid negatively impacting them with our changes.&lt;/p&gt;

&lt;h3 id=&quot;updating-the-html-structure&quot;&gt;Updating the HTML structure&lt;/h3&gt;
&lt;p&gt;We made many pull requests to refactor our components to use the correct HTML tags and attributes. For example, we replaced the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;div&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;button&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;span&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h3&lt;/code&gt; etc. to have a good semantic for accessibility. We also added the ARIA attributes to improve the accessibility of our components.
Thanks to Mathieu, we learned the good practices and how to use the ARIA attributes as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aria-label&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aria-hidden&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aria-describedBy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is a typical example of what we did:&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sidenav&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sidenav&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sidenav__item&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sidenav&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nav&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;navigation&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sidenav&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sidenav__item&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/nav&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;‚ÑπÔ∏è We replaced the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;div&lt;/code&gt; by the more appropriate tag as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nav&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ul&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;li&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;using-the-native-focus-management&quot;&gt;Using the native focus management&lt;/h3&gt;
&lt;p&gt;As I mentioned before, to navigate through our apps, we developed our own navigation system with a custom focus management. But the screen reader doesn‚Äôt work with this system because it needs to use the native focus.
So, we refactored our system to fix this issue by synchronizing the focus of the browser with our navigation system. We added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTMLElement.focus()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tabindex&lt;/code&gt; attribute to make some elements focusable.&lt;/p&gt;

&lt;h3 id=&quot;implementing-audio-guidance-on-smarttv&quot;&gt;Implementing audio guidance on SmartTV&lt;/h3&gt;
&lt;p&gt;To implement the audio guidance feature to WebOS, we need to enable the feature in the WebOS config (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;appinfo.json&lt;/code&gt; file) as following:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;accessibility&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;supportsAudioGuidance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Compared to what I did in my first POC in 2022, the implementation is much simpler and more efficient.&lt;/p&gt;

&lt;p&gt;Even simpler, on Tizen and Hisense, we didn‚Äôt need to do anything, since we already refactored our code by using the correct HTML structure and the native focus, audio guidance is already enabled by default on these platform. But of course, it depends if the device version is compatible with the feature.
To date, the work is still in progress to list all the supported devices.&lt;/p&gt;

&lt;h2 id=&quot;2024-october-the-second-audit&quot;&gt;2024 October: the second audit&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/tvjs/tvjs_accessibility_scores.png&quot; alt=&quot;The score for TVJS with the first audit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some months later, we received the second audit of the TVJS apps from Mathieu and the score has increased to 61%. üöÄ I am very proud of my team and myself, because we did a great job! We improved the accessibility of our apps by 18% in just a few months. It‚Äôs a great achievement, and it‚Äôs just the beginning. We are motivated to reach the 100% of the accessibility score. üí™
Of course, this performance is also due to the work of Mathieu (our PM) and Sha√Ønez (our PO) who have been very helpful and supportive during this refactoring.
I think the communication between the product line and the technical line is primordial to be sure to go in the right direction. And obviously, the communication between the developers is also important, it‚Äôs thanks to our many brainstorming sessions that we found the best solutions.&lt;/p&gt;

&lt;p&gt;If I have some advice to give to the developers who want to improve the accessibility of their apps, it would be:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Before developing, to think about the accessibility and use the good practices (like the semantic HTML, the ARIA, the focus management etc.)&lt;/li&gt;
  &lt;li&gt;Take the time to understand the accessibility, the constraints and the specificities of the platform (by attending a workshop for example)&lt;/li&gt;
  &lt;li&gt;If possible, to have an accessibility referent in the team to stay aware of this topic and communicate with the product line and the designers&lt;/li&gt;
  &lt;li&gt;To test with the existing tools (like &lt;a href=&quot;https://www.deque.com/axe/&quot;&gt;Axe&lt;/a&gt;, &lt;a href=&quot;https://wave.webaim.org/&quot;&gt;Wave&lt;/a&gt;, the screen reader and the browser accessibility panel)&lt;/li&gt;
  &lt;li&gt;To test directly on the device and if possible with the users&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To conclude this article, I would like to note accessibility is not a constraint, it‚Äôs a strength, and a competitive advantage for our apps. If our platform is accessible, the users will be happy and will prefer to use our apps rather than the other ones. 
The accessibility is not only for the people with disabilities, it‚Äôs for everyone. And in the TVJS team, we understand that well! üì∫&lt;/p&gt;

&lt;h2 id=&quot;-sources&quot;&gt;üìö Sources&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;WCAG Guidelines: &lt;a href=&quot;https://www.w3.org/TR/WCAG21/&quot;&gt;https://www.w3.org/TR/WCAG21/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;RGAA: &lt;a href=&quot;https://accessibilite.numerique.gouv.fr&quot;&gt;https://accessibilite.numerique.gouv.fr&lt;/a&gt;/&lt;/li&gt;
  &lt;li&gt;Accessibility Tools: &lt;a href=&quot;https://wave.webaim.org/&quot;&gt;Wave&lt;/a&gt; - &lt;a href=&quot;https://www.deque.com/axe/&quot;&gt;Axe&lt;/a&gt; - &lt;a href=&quot;https://www.nvaccess.org/&quot;&gt;Screen reader&lt;/a&gt; - &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector&quot;&gt;Browser accessibility panel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;HTMLElement.focus(): &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;WebOS audio guidance: &lt;a href=&quot;https://webostv.developer.lge.com/develop/references/luna-service-introduction&quot;&gt;https://webostv.developer.lge.com/develop/references/luna-service-introduction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>[&quot;j_nginn&quot;]</name></author><category term="TVJS" /><category term="smartTV" /><category term="javascript" /><category term="react" /><category term="web" /><category term="frontend" /><category term="accessibility" /><category term="a11y" /><summary type="html">Accessibility is at the heart of our concerns, at Bedrock Streaming we work hard to make our applications accessible to everyone. In this article, I‚Äôm going to share with you how my team and I improved our accessibility score of our SmartTV apps by 18% in just a few months! This improvement is even more impressive because on smartTV we have to manage several constraints, including taking into account the specificities of each device (Tizen, WebOS, Hisense, Panasonic, etc.).</summary></entry><entry><title type="html">How we improved scroll performance on Smart TV apps</title><link href="https://tech.bedrockstreaming.com/2024/11/22/tvjs-scroll-performance-enhancement.html" rel="alternate" type="text/html" title="How we improved scroll performance on Smart TV apps" /><published>2024-11-22T00:00:00+00:00</published><updated>2024-11-22T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2024/11/22/tvjs-scroll-performance-enhancement</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2024/11/22/tvjs-scroll-performance-enhancement.html">&lt;p&gt;One of the core experiences of a Bedrock app for the end user is browsing the catalog. Scrolling vertically through blocks of content, and scrolling horizontally through lists of items. However, TVs do not offer high performance and provide poor user experience during heavy resource actions. We especially noticed that scrolling horizontally in a list was laggy and unpleasant. This article focuses on performance optimization to enhance the horizontal scroll experience on Smart TVs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-11-22-tvjs-scroll-performance-enhancement/old-scroll.gif&quot; alt=&quot;Laggy scroll video&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note : The GIF above shows a laggy scroll experience on TV. During the videos featured in this article, a x20 CPU throttle has been enforced on the browser, to mimic a low-performance TV device&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;context&quot;&gt;&lt;a href=&quot;#context&quot;&gt;Context&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;On TV, we scroll horizontally by focusing each item sequentially when the user presses the left or right arrow button on their remote.&lt;/p&gt;

&lt;p&gt;Scrollable lists can be of various sizes and even include paginated content. In cases of paginated content, the next page is fetched preemptively during scroll, when the focus reaches a certain threshold.&lt;/p&gt;

&lt;p&gt;Our old scroll component worked as follows: we would render a whole list of items, in a parent component handling scroll. When scrolling horizontally, the focus would switch to the next item. This would notify the parent component in charge of scroll, that would move the whole list laterally. The movement was computed from the measurements of the focused item, the size of the list, and the size of the container.&lt;/p&gt;

&lt;p&gt;There are multiple chances for improvement in this implementation:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Since every item was rendered in the DOM, moving the whole list was very heavy. Subsequently, a whole page of lists was itself pretty heavy to render.&lt;/li&gt;
  &lt;li&gt;Because the whole list is rendered, fetching a new page means that the new items are immediately all rendered to the DOM, imposing a heavy load by displaying content that is not even on the screen.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;virtualization&quot;&gt;&lt;a href=&quot;#virtualization&quot;&gt;Virtualization&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;To address the first shortcoming of the initial approach, we introduced virtualization. Virtualization is a technique to render only the items that are visible on the screen.&lt;/p&gt;

&lt;p&gt;For context, the content we display on each list is normalized and stored in a redux store. All the items are available in an array and can be selected by their respective index.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ItemComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;useSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;selectItemByIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The virtualized scroll renders items based on a static array, each cell of the array being a slot for the item it‚Äôs going to display.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ScrollComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SCROLLER_BASE_ARRAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nbItemsToDisplay&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SCROLLER_BASE_ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;focusOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setFocusOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// focusOffset is a state updated upon user input: &lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// + 1 when the right arrow is clicked, -1 when the left arrow is clicked&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;focusOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


        &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ItemComponent&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-11-22-tvjs-scroll-performance-enhancement/empty-slots.png&quot; alt=&quot;Schema representing 4 empty slots&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each cell is connected to the store and uses its own index as selection parameter to get the corresponding item in the store (cell of index 0 gets the first item, cell of index 1 gets the second, etc.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-11-22-tvjs-scroll-performance-enhancement/filled-slots.png&quot; alt=&quot;Schema representing 4 slots with rendered items inside&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, only a subset of the list is rendered, as many items as the static array has cells.&lt;/p&gt;

&lt;p&gt;Horizontal scroll is managed by incrementing the selection index upon user input (e.g., pressing the right arrow key). Using the same array, each cell now selects from the store the item for its index plus an ‚Äúoffset‚Äù that describes how much the list is scrolled.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-11-22-tvjs-scroll-performance-enhancement/filled-slots-with-offset.png&quot; alt=&quot;Schema representing 4 slots with rendered items inside&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By offsetting the items at every user input (negative offset to move the items to the right and positive offset to move the items to the left), we achieve a visual scroll, with only a subsection of the list displayed on screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-11-22-tvjs-scroll-performance-enhancement/scrolling.gif&quot; alt=&quot;Animation showing a scrolling list.gif&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;optimised-rendering-with-react-keys&quot;&gt;&lt;a href=&quot;#optimised-rendering-with-react-keys&quot;&gt;Optimised Rendering with React Keys&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;The heart of the implementation is to fill each cell with a new item at each scroll. From the point of view of a single cell, when we scroll, the item it displays is new. But we know that the item already existed in the DOM, just one cell over.&lt;/p&gt;

&lt;p&gt;This is where we can leverage &lt;a href=&quot;https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key&quot;&gt;React‚Äôs keys mechanism&lt;/a&gt;. Items rendered use a key that combines the original cell index with the current scroll offset. These keys help React reconcile the item in cell 1 before render as the item in cell 2 after render as the same item, thus reusing the same DOM node. As a result, we get zero re-renders for the items that are shifting places, significantly reducing the performance impact of a scroll.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/images/posts/2024-11-22-tvjs-scroll-performance-enhancement/profiling.png&quot; alt=&quot;Profiling flame graph&quot; /&gt;
  &lt;figcaption&gt;‚òùÔ∏èProfiling during a single scroll right. The only items rendering are the ones with focus change (item losing focus and item gaining focus) and the new item that wasn‚Äôt on the screen. Every other item is unaffected by a horizontal scroll&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;hr /&gt;

&lt;h1 id=&quot;optimised-pagination&quot;&gt;&lt;a href=&quot;#optimised-pagination&quot;&gt;Optimised pagination&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;A nice win from virtualization is the impact on pagination. Only a subset of items is rendered on the screen. Also, the list itself only needs to know about that subset of items since it uses a constant array to display its items. This means that a new page fetched has 0 impact on renders: the new items are added to the store, but the React component itself has no knowledge of that operation and triggers no re-renders.&lt;/p&gt;

&lt;h1 id=&quot;results&quot;&gt;&lt;a href=&quot;#results&quot;&gt;Results&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Note: measurements presented here are taken with the Chrome DevTools performance tab, with x6 CPU throttle and network connection limited to fast 4G to mimic a low-performance TV device and keep a steady test environment. Times are scripting and rendering times added.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can compare a few benchmarks to exhibit the gains from the new scroller.&lt;/p&gt;

&lt;p&gt;Scrolling right is obviously less expensive now. Here, measurements were taken from a single scroll right, in a 72 items list.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Before&lt;/th&gt;
      &lt;th&gt;After, with new scroll&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;462ms&lt;/td&gt;
      &lt;td&gt;41ms (-91%)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;But more closely to the app‚Äôs actual use, here is a scenario measuring the cost of scrolling right through a list of 72 items, with 8 pages fetched during scroll.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Before&lt;/th&gt;
      &lt;th&gt;After&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;11615ms&lt;/td&gt;
      &lt;td&gt;8631ms (-26%)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Here, we include everything else a list does when scrolling (fetching new pages, additional handlers‚Ä¶), so the gain is less, but still significant.&lt;/p&gt;

&lt;p&gt;Scrolling down in a page with lighter lists is also more efficient. Here, measurements were taken during a scroll down 25 lists.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Before&lt;/th&gt;
      &lt;th&gt;After&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1308ms&lt;/td&gt;
      &lt;td&gt;1038ms (-21%)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Beyond benchmarks, on-device tests were also conclusive: the scroll is smoother, we almost eliminated the lag caused by a pagination fetch. Overall, it feels better to scroll through a list.&lt;/p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-11-22-tvjs-scroll-performance-enhancement/new-scroll.gif&quot; alt=&quot;New and more fluid scroll&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This frontend R&amp;amp;D project successfully addressed the scrolling performance issues on TV. The new scrolling solution dramatically improved performance by limiting re-renders. This optimization ensured a smoother scrolling experience, enhancing usability on TV devices. From this experience, we also moved on to implementing the same virtualization on the horizontal scroll of the catalog, which presented its own challenges but was also a success.&lt;/p&gt;</content><author><name>[&quot;m_bernier&quot;]</name></author><category term="TV" /><category term="performance" /><category term="javascript" /><category term="react" /><category term="web" /><category term="frontend" /><summary type="html">One of the core experiences of a Bedrock app for the end user is browsing the catalog. Scrolling vertically through blocks of content, and scrolling horizontally through lists of items. However, TVs do not offer high performance and provide poor user experience during heavy resource actions. We especially noticed that scrolling horizontally in a list was laggy and unpleasant. This article focuses on performance optimization to enhance the horizontal scroll experience on Smart TVs.</summary></entry><entry><title type="html">Insights from Golab Conference 2024, Florence</title><link href="https://tech.bedrockstreaming.com/2024/11/12/golab-florence.html" rel="alternate" type="text/html" title="Insights from Golab Conference 2024, Florence" /><published>2024-11-12T00:00:00+00:00</published><updated>2024-11-12T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2024/11/12/golab-florence</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2024/11/12/golab-florence.html">&lt;p&gt;Attending the &lt;a href=&quot;https://golab.io/&quot;&gt;Golab conference&lt;/a&gt; in Florence has been a thrilling experience for us as developers. Immersing ourselves in talks by some of the most brilliant minds in the Go community gave us a deeper understanding of advanced concepts, practical libraries, and the future of Go. We‚Äôve summarized the key takeaways from the talks we attended to share some of the valuable lessons and fresh perspectives we gained.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;keynote-go-telemetry-wins&quot;&gt;Keynote: Go Telemetry Wins&lt;/h2&gt;

&lt;p&gt;The opening keynote, delivered by Russ Cox, focused on the importance of telemetry in the Go ecosystem itself. Russ explained how telemetry data helps the Go team make informed decisions to improve the language and its ecosystem, emphasizing the strict measures taken to ensure user privacy. We learned how telemetry is carefully designed to protect sensitive information while still providing valuable insights.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-11-12-golab-firenze/go_telemetry_keynote.jpg&quot; alt=&quot;Go telemetry wins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The session concluded with a call to action, encouraging everyone to enable telemetry (by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go telemetry on&lt;/code&gt;) on their Go installations to support ongoing enhancements and community-driven improvements.&lt;/p&gt;

&lt;p&gt;All data collected are public and could be found &lt;a href=&quot;https://telemetry.go.dev/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;instrumenting-go-apps-with-opentelemetry&quot;&gt;Instrumenting Go Apps With OpenTelemetry&lt;/h2&gt;

&lt;p&gt;This talk introduced us to OpenTelemetry, an open source solution for instrumenting applications. The speaker introduced the topic with a specific situation, you have instrumenting with datadog and want to switch to another tool (for any reason such as better pricing, UX‚Ä¶).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-11-12-golab-firenze/instrumenting_with_datadog.jpg&quot; alt=&quot;Instrumenting with datadog&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-11-12-golab-firenze/changing_agent.jpg&quot; alt=&quot;Changing tool due to cost&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then he demonstrated how OpenTelemetry can be used to collect and analyze performance data (ie. through Grafana), and its benefits compared to an agent :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;No need to install an agent on the host&lt;/li&gt;
  &lt;li&gt;No cost of install when changing agent&lt;/li&gt;
  &lt;li&gt;Open source so it‚Äôs tool agnostic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-11-12-golab-firenze/opentelemtry_schema.avif&quot; alt=&quot;Opentelemetry simple schema&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At Bedrock, we mainly use &lt;a href=&quot;https://tech.bedrockstreaming.com/2024/10/03/enhancing-production-monitoring-with-newrelic.html&quot;&gt;NewRelic for our monitoring&lt;/a&gt;, but we are free either to use the NewRelic agent or to use OpenTelemetry to collect traces, metrics and logs.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;watermill-the-missing-standard-library-for-event-driven-applications&quot;&gt;Watermill: The Missing Standard Library for Event-Driven Applications&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://watermill.io/&quot;&gt;Watermill library&lt;/a&gt; was highlighted as a game-changer for event-driven architecture in Go. Initially born out of a need to simplify the complexity of building event-driven systems, Watermill has evolved into a mature and widely adopted library. The talk inspired us by demonstrating how adopting Watermill can transform projects needing scalability and resilience, and it has now become a key consideration for us in future architectural designs.
The design of this very complete library is thought out in three blocks that can be used independently or not:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/ce78b1ab-6259-4fe1-91ec-fb421c3fdfdf&quot; alt=&quot;pyramid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first, on which the rest is based, is a simple &lt;a href=&quot;https://watermill.io/docs/pub-sub/&quot;&gt;Publisher/Subscriber brick&lt;/a&gt; with several implementations (go channel,kafka,RabbitMQ etc‚Ä¶).&lt;/p&gt;

&lt;p&gt;The second is a &lt;a href=&quot;https://watermill.io/docs/messages-router/&quot;&gt;Router layer&lt;/a&gt; which manages advanced event dispatch processing and adds the possibility of using middleware such as metrics, poison queue, retrying, throttling, etc. .&lt;/p&gt;

&lt;p&gt;The last block is the &lt;a href=&quot;https://watermill.io/docs/cqrs/&quot;&gt;CQRS management block&lt;/a&gt;.
The project documentation is well supplied and full of examples that make bootstrapping in existing projects much easier.
You will find its presentation materials &lt;a href=&quot;https://threedots.tech/presentations/2024/golab/&quot;&gt;here&lt;/a&gt;.
‚Äî&lt;/p&gt;

&lt;h2 id=&quot;lets-go-asynchronous&quot;&gt;Let‚Äôs Go Asynchronous&lt;/h2&gt;

&lt;p&gt;Tom√°≈° Sedl√°ƒçek tackled the common dilemma between synchronous and asynchronous communication.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kedlas/presentations/tree/main/2024-golab-florence_lets_go_async/sync/http&quot;&gt;Real-world examples&lt;/a&gt; illustrated how synchronous patterns can lead to bottlenecks, while asynchronous designs promote efficiency. Techniques like load balancing, rate limiting, and implementing retries were demonstrated, showcasing Go‚Äôs flexibility with tools like RabbitMQ and PGQ. It‚Äôs a solid reminder to evaluate communication patterns carefully and how going asynchronous isn‚Äôt as daunting as it sounds.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;how-to-write-a-programming-language-and-shell-in-go-with-92-test-coverage&quot;&gt;How to Write a Programming Language and Shell in Go with 92% Test Coverage&lt;/h2&gt;

&lt;p&gt;A fascinating exploration of &lt;a href=&quot;https://elv.sh/&quot;&gt;Elvish&lt;/a&gt;, a shell written in Go, broke down how to create a programming language.&lt;/p&gt;

&lt;p&gt;Beyond the technical implementation, Qi Xiao provided insights into achieving impressive test coverage and setting up instant CI/CD pipelines. The talk underscored the power of Go in developing robust systems, even for complex challenges like creating a shell.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;from-bland-to-spiky-how-generics-made-my-service-super-robust&quot;&gt;From Bland to Spiky: How Generics Made My Service Super Robust&lt;/h2&gt;

&lt;p&gt;This lively talk explored how generics have brought versatility to Go.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://linktr.ee/teea_golab24&quot;&gt;Teea Alarto&lt;/a&gt; used vivid examples, transforming generic code to create robust, maintainable services. The presentation not only demystified generics but also highlighted their practical benefits, such as eliminating repetition and enhancing code maintainability.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;tinygo-for-pet-automation&quot;&gt;TinyGo for Pet Automation&lt;/h2&gt;

&lt;p&gt;This session was both fun and practical, demonstrating how TinyGo can be leveraged for pet automation using Arduino.&lt;/p&gt;

&lt;p&gt;Josephine Winter presented a compelling case for TinyGo as an accessible platform for embedded programming, opening possibilities beyond traditional web development. Automation projects, whether for pets or other use cases, seem more achievable and engaging with TinyGo.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;gophers-gone-domain-driven-a-tale-of-go-and-ddd&quot;&gt;Gophers Gone Domain-Driven: A Tale of Go and DDD&lt;/h2&gt;

&lt;p&gt;Domain-Driven Design (DDD) often intimidates developers, but this talk simplified the fundamentals for Go practitioners.&lt;/p&gt;

&lt;p&gt;By exploring domain modeling, bounded contexts, and ubiquitous language, we gained insights into creating a codebase that aligns with business logic.&lt;/p&gt;

&lt;p&gt;Davide Imola also discussed using hexagonal architecture to make Go applications scalable and maintainable, providing a practical roadmap for implementing DDD concepts.
He provides a simple example of a structured &lt;a href=&quot;https://github.com/davideimola/ddd-onion-go&quot;&gt;Go project&lt;/a&gt; using the DDD and Onion Architecture concepts.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;to-cgo-or-not-cross-compiling-a-sqlite-driver&quot;&gt;To CGo or Not: Cross Compiling a SQLite Driver&lt;/h2&gt;

&lt;p&gt;The challenge of cross-compiling without relying on CGo was explored in this technical deep dive.&lt;/p&gt;

&lt;p&gt;Jan Mercl introduced a &lt;a href=&quot;https://modernc.org/sqlite&quot;&gt;CGo-free driver&lt;/a&gt;, explaining how transpilers and C runtime emulation make it feasible.&lt;/p&gt;

&lt;p&gt;This was particularly eye-opening for those of us working on projects that need efficient and lightweight database solutions.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;graphs-and-games-can-go-take-a-ticket-to-ride&quot;&gt;Graphs and Games: Can Go Take a Ticket to Ride?&lt;/h2&gt;

&lt;p&gt;Blending board games and Go programming, Michele Caci took us on a journey through graph algorithms inspired by ‚ÄúTicket to Ride.‚Äù&lt;/p&gt;

&lt;p&gt;He demonstrated how they implemented a &lt;a href=&quot;https://github.com/mcaci/go-ticket-to-ride&quot;&gt;Go-based version of the game&lt;/a&gt; and applied algorithms to improve gameplay.&lt;/p&gt;

&lt;p&gt;It was a fun reminder of how computer science concepts can intersect with entertainment, sparking ideas for gamifying our projects.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;deep-dive-into-a-go-binary&quot;&gt;Deep Dive into a Go Binary&lt;/h2&gt;

&lt;p&gt;Jes√∫s Espino, Software developer at Mattermost and who loves to deep dive into technical details and previously talked about &lt;a href=&quot;https://www.youtube.com/watch?v=arH3jp_x8yQ&quot;&gt;Go Runtime&lt;/a&gt;, answered this question:&lt;/p&gt;

&lt;p&gt;What lies inside a Go binary?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-11-12-golab-firenze/deep_dive_go_binary.jpg&quot; alt=&quot;Deep dive in go binary&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jes√∫s unveiled the secrets of compiled Go programs while mirroring The Lord of the Rings making it very pedagogical, starting with ELF format composed of a set of headers, list of sections and segments to the internal mechanisms that make a binary tick.&lt;/p&gt;

&lt;p&gt;Understanding the anatomy of a Go binary enhanced our appreciation for the Go compiler and the efficient executables it generates.
You can view his presentation slides &lt;a href=&quot;https://speakerdeck.com/jespino/deep-dive-into-a-go-binary&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here some of his references:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/nC1U1LJQL80?si=0-X8EnOUVgbmCkPp&quot;&gt;In-depth ELF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mandiant/GoReSym&quot;&gt;GoReSym&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/burrowers/garble&quot;&gt;Garble&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The go source code (specifically the linker code)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;how-to-punch-holes-in-network-infrastructure-using-go&quot;&gt;How to Punch Holes in Network Infrastructure Using Go&lt;/h2&gt;

&lt;p&gt;Finally, we delved into the intricacies of peer-to-peer networking. Using the &lt;a href=&quot;https://github.com/libp2p/go-libp2p&quot;&gt;go-libp2p&lt;/a&gt; module, the speaker showed how to establish decentralized connections by bypassing traditional network barriers.&lt;/p&gt;

&lt;p&gt;This talk was both technical and visionary, providing us with ideas on how to optimize network performance using Go‚Äôs robust features.&lt;/p&gt;

&lt;p&gt;You will be able to find his presentation materials &lt;a href=&quot;https://github.com/watjurk/talk-golab-2024-peer-to-peer-hole-punching?tab=readme-ov-file&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;closing-keynote-go-back-to-the-future&quot;&gt;Closing Keynote: Go Back to the Future&lt;/h2&gt;

&lt;p&gt;The closing keynote was a captivating journey through Go‚Äôs past, present, and future, filled with live demos and unexpected surprises.&lt;/p&gt;

&lt;p&gt;The speaker showcased the evolution of Go while exploring how the language might shape the future of programming. One of the highlights was a live demonstration where the presenter made a drone fly over the audience, all powered and controlled by Go. This thrilling spectacle illustrated the language‚Äôs potential in robotics and automation, leaving everyone inspired and in awe of what Go can achieve.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;The Golab conference in Florence provided a rich tapestry of knowledge, sparking inspiration and reaffirming our love for Go. From new architectural insights to innovative uses of Go in domains like automation and networking, we walked away with a toolkit full of ideas to bring back to our development practices. We‚Äôre eager to implement some of these learnings and contribute further to the vibrant Go community!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-11-12-golab-firenze/golab_group.jpg&quot; alt=&quot;Bedrock devs&quot; /&gt;&lt;/p&gt;</content><author><name>[&quot;t_geindre&quot;, &quot;k_phan&quot;, &quot;j_hardeman&quot;]</name></author><category term="golang" /><category term="opensource" /><category term="community" /><category term="conference" /><category term="2024" /><summary type="html">Attending the Golab conference in Florence has been a thrilling experience for us as developers. Immersing ourselves in talks by some of the most brilliant minds in the Go community gave us a deeper understanding of advanced concepts, practical libraries, and the future of Go. We‚Äôve summarized the key takeaways from the talks we attended to share some of the valuable lessons and fresh perspectives we gained.</summary></entry><entry><title type="html">Using Fastly‚Äôs Compute at-edge to personalize static pre-generated pages</title><link href="https://tech.bedrockstreaming.com/2024/11/07/compute-at-edge-personalize-static-pages.html" rel="alternate" type="text/html" title="Using Fastly‚Äôs Compute at-edge to personalize static pre-generated pages" /><published>2024-11-07T00:00:00+00:00</published><updated>2024-11-07T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2024/11/07/compute-at-edge-personalize-static-pages</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2024/11/07/compute-at-edge-personalize-static-pages.html">&lt;p&gt;During the &lt;a href=&quot;https://www.uefa.com/euro2024/&quot;&gt;UEFA Euro&lt;/a&gt; football cup in June and July 2024, M6 broadcasted several matches. Of course, this competition was available, live, on &lt;a href=&quot;https://www.6play.fr/&quot;&gt;M6+&lt;/a&gt;. For every user joining right from the first second and or for all users hearing their neighbors shouting and wanting to re-watch the action, starting a live video stream had to work!&lt;/p&gt;

&lt;p&gt;When you use one of the platforms we manage, your goal is to start a video stream. You land on the homepage of a platform like M6+ or &lt;a href=&quot;https://www.videoland.com/&quot;&gt;Videoland&lt;/a&gt;, browse the catalog, register or login and, ultimately, you‚Äôll start a video. It‚Äôs the one thing that causes the most frustration if it fails. And we don‚Äôt want that. We want users to enjoy their experience.&lt;/p&gt;

&lt;p&gt;For Euro, we first worked on shortening the browsing part, to both provide a great experience for users arriving to watch a match, and to lower the load on our platform. We talked about this in &lt;a href=&quot;/2024/08/07/euro-resiliency-special-event-page.html&quot;&gt;How Special Event Page allowed us to handle more than 1 million of users&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We also worked on reducing load on our backend applications, allowing our platform to handle far more users and load than it‚Äôs used to. This post is the story of how we used compute-at-edge for the first time!&lt;/p&gt;

&lt;h1 id=&quot;our-backend-platform&quot;&gt;&lt;a href=&quot;#our-backend-platform&quot;&gt;Our backend platform&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;All our frontend (web/mobile/TV) applications communicate with our backend components through what we call &lt;a href=&quot;/2022/10/13/bff-notre-best-friend-forever-pour-faire-plein-d-applications-frontend.html&quot;&gt;BFF&lt;/a&gt;. This BFF then calls many other backend APIs and returns a &lt;em&gt;layout&lt;/em&gt; that contains everything an app needs. This layout will contain lists of rows and blocks when you are browsing the catalog, or most information required to start a stream when you are trying to do so.&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
flowchart LR
    user1[User 1]
    user2[User 2]
    user3[User 3]

    user1 --&amp;gt; bff
    user2 --&amp;gt; bff
    user3 --&amp;gt; bff

    bff((BFF))

    bff --&amp;gt; api1
    bff --&amp;gt; api2
    bff --&amp;gt; api3
    bff --&amp;gt; api4
    bff --&amp;gt; api5

    api1[API-1]
    api2[API-2]
    api3[API-3]
    api4[API-4]
    api5[API-5]
&lt;/div&gt;

&lt;center&gt;&lt;ins&gt;&lt;strong&gt;Schema 1: one BFF between frontend apps and backend APIs.&lt;/strong&gt;&lt;/ins&gt;&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;With this architecture, BFF receives a lot of requests, and each of these causes up to dozens of requests to other services. This is greatly amplified by the fact that all BFF responses are personalized, which means we cannot cache entire responses.&lt;/p&gt;

&lt;p&gt;As most of our APIs are running in a Kubernetes cluster, you might say &lt;em&gt;‚Äúuse auto-scaling!‚Äù&lt;/em&gt;, and you‚Äôd be kind of right. We are using auto-scaling. But reactive auto-scaling, based on traffic or load metrics, is not fast enough to handle huge spikes in traffic ‚Äì like big football matches can cause. For this, we have developed a &lt;a href=&quot;/2022/02/03/prescaling.html&quot;&gt;pre-scaling mechanism&lt;/a&gt;, and even &lt;a href=&quot;/2022/09/01/kubernetes-prescaling-we-open-source-our-solution.html&quot;&gt;open-sourced it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But we didn‚Äôt want to take any chances‚Ä¶&lt;/p&gt;

&lt;h1 id=&quot;disabling-all-personalization&quot;&gt;&lt;a href=&quot;#disabling-all-personalization&quot;&gt;Disabling all personalization?&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;First, a word about an idea we used three years ago: disabling all personalization. It‚Äôs quite easy to implement: ensure BFF doesn‚Äôt do any personalization work, and return a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cache-control&lt;/code&gt; HTTP header so the CDN in front of the BFF backend application caches layouts and returns them to all users.&lt;/p&gt;

&lt;p&gt;With BFF only generating a few dozen responses every minute, we solved all possible problems with load or scaling and traffic spikes. But this also means cutting many features for end-users, and not displaying personalized ads.&lt;/p&gt;

&lt;p&gt;Our customers want to display personalized contents and ads, and users want to get all features from the platform. So, we decided not to enable this mechanism this year.&lt;/p&gt;

&lt;h1 id=&quot;doing-more-work-in-front-of-the-backend-app&quot;&gt;&lt;a href=&quot;#doing-more-work-in-front-of-the-backend-app&quot;&gt;Doing more work‚Ä¶ in front of the backend app!&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Several months before the Euro competition, one of our Principal Engineers had done a few prototypes with &lt;a href=&quot;https://www.fastly.com/products/edge-compute&quot;&gt;Fastly‚Äôs compute and datastores at-edge&lt;/a&gt;, convinced being able to do more things &lt;em&gt;before the apps&lt;/em&gt; would one day prove useful. Well‚Ä¶ We brought back this idea to focus. And our BFF application was already using Fastly as its CDN, what a coincidence ;-)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fastly allows one to run &lt;em&gt;compute&lt;/em&gt; at-edge, on the CDN points-of-presence. Basically, you write code in Go/Rust/Javascript and compile it to WASM.&lt;/li&gt;
  &lt;li&gt;It provides several datastores. The one we used here is called &lt;em&gt;KVStore&lt;/em&gt; ‚Äì a basic key-value store.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We reworked our architecture this way:&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
flowchart LR
    user1[User 1]
    user2[User 2]
    user3[User 3]

    subgraph In Front Of BFF
        new(NEW)
        datastore[(Datastore)]
        
        new -.-&amp;gt; datastore
    end

    user1 --&amp;gt; new
    user2 --&amp;gt; new
    user3 --&amp;gt; new

    new -- cache --&amp;gt; bff

    bff((BFF))

    bff --&amp;gt; api1
    bff --&amp;gt; api2
    bff --&amp;gt; api3
    bff --&amp;gt; api4
    bff --&amp;gt; api5

    api1[API-1]
    api2[API-2]
    api3[API-3]
    api4[API-4]
    api5[API-5]
&lt;/div&gt;

&lt;center&gt;&lt;ins&gt;&lt;strong&gt;Schema 2: doing work in front of the BFF.&lt;/strong&gt;&lt;/ins&gt;&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Our goal was to implement a lightweight personalization layer in front of our backend BFF application. The backend application would then only need to return non-personalized layouts ‚Äì and those would be cacheable.&lt;/p&gt;

&lt;p&gt;Note: as we have many frontend applications and did not want (and did not have enough time) to update all of them, we searched for a solution that would only require changes somewhere on the backend side.&lt;/p&gt;

&lt;p&gt;This personalization layer would read some basic data &lt;em&gt;(does the current user have a subscription? Did they consent to tracking and analytics?)&lt;/em&gt; from a datastore-at-edge and use them to inject identifiers in the cached-non-personalized layout before returning it.&lt;/p&gt;

&lt;p&gt;As BFF was already using a Fastly VCL service as its CDN and a VCL service cannot also do compute, we decided to insert a compute service between the VCL one and the backend, only for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/live/&lt;/code&gt; route. As time was limited and we wanted to confirm how this would work with real users, we chose to implement this approach only for one route and one layout, the one that would be called the most: the layout used to start a live stream.&lt;/p&gt;

&lt;p&gt;This means our CDN architecture was looking like this:&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
flowchart LR
    users[Users]
    users --&amp;gt; fastlyVCL

    subgraph Fastly CDN
        fastlyVCL[Fastly&lt;br /&gt;VCL]

        fastlyVCL -- /live --&amp;gt; fastlyCompute
        fastlyCompute[Fastly&lt;br /&gt;Compute]

        datastore[(Datastore)]
        fastlyCompute -.-&amp;gt; datastore
    end

    fastlyVCL -- /* --&amp;gt; bff
    fastlyCompute -- &quot;read&lt;br /&gt;(with cache)&quot; --&amp;gt; bff

    bff((BFF))
&lt;/div&gt;

&lt;center&gt;&lt;ins&gt;&lt;strong&gt;Schema 3: chaining a VCL and a compute service.&lt;/strong&gt;&lt;/ins&gt;&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Before starting to actually implement this, we talked with our contacts at Fastly, to confirm this approach made sense to them and their systems would be able to handle the load and traffic spikes we were expecting. They validated the concept, and noted we should shard our data over several KVStores, as each KVStore is limited to 1000 writes/second and 5000 reads/second ‚Äì good catch!&lt;/p&gt;

&lt;p&gt;We then started implementing this approach, first with our compute-at-edge code doing static replacements, then with loading random data from the KVStores, and finally with loading the real data. Between each step, we ran synthetic load-tests, to ensure everything was running smoothly.&lt;/p&gt;

&lt;p&gt;Also, we ensured from day-1 we would not have to throw all this &lt;em&gt;‚Äúdo more work in front of BFF‚Äù&lt;/em&gt; approach away, if Fastly was not able to handle our needs. We had a fallback in mind: deploying this inside our Kubernetes cluster as a Go application and storing data in DynamoDB. Most of the code would still have worked.&lt;/p&gt;

&lt;h1 id=&quot;getting-the-data-to-the-datastore-at-edge&quot;&gt;&lt;a href=&quot;#getting-the-data-to-the-datastore-at-edge&quot;&gt;Getting the data to the datastore-at-edge&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Reading data from KVStores and using it to personalize the live layout being out of the way, it was time to think about how to get data into those KVStores.&lt;/p&gt;

&lt;p&gt;We had to synchronize pieces of data from two different backend APIs to the at-edge KVStores. First is our ‚Äúusers‚Äù API, for GDPR consents. And the second is our ‚Äúsubscription‚Äù API. Both store their data in DynamoDB.&lt;/p&gt;

&lt;p&gt;Several months before, one of our Principal Engineers had done a few demos and prototypes showing how to use DynamoDB Streams and Lambda &lt;em&gt;the right way&lt;/em&gt; and proving asynchronous is not necessarily &lt;em&gt;slow&lt;/em&gt;. This helped not start from scratch here, having confidence working with DDB Streams and Lambda would be OK, and providing some code foundations.&lt;/p&gt;

&lt;p&gt;So, in both ‚Äúusers‚Äù and ‚Äúsubscriptions‚Äù projects, we added a DynamoDB Stream on the tables used to store the relevant data. Those streams are read from a couple of Lambda functions &lt;em&gt;(with retries, batches bisect, dead-letters queues‚Ä¶ all natively handled by AWS)&lt;/em&gt;. And those functions call Fastly‚Äôs KVStore API to insert/update/delete data there. We did not forget to deal with the 1000 RPS per KVStore limit.&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
flowchart LR
    subgraph &quot;API-2 (AWS)&quot;
        api2[API-2]
        ddb2[(DynamoDB)]
        api2 --&amp;gt; ddb2
        ddb2 -- DDB&lt;br /&gt;Stream --&amp;gt; lambda2
        lambda2(Lambda)
    end

    subgraph &quot;API-4 (AWS)&quot;
        api4[API-4]
        ddb4[(DynamoDB)]
        api4 --&amp;gt; ddb4
        ddb4 -- DDB&lt;br /&gt;Stream --&amp;gt; lambda4
        lambda4(Lambda)
    end

    lambda2 --&amp;gt; datastore
    lambda4 --&amp;gt; datastore

    subgraph &quot;Fastly CDN&quot;
        datastore[(Datastore)]
    end
&lt;/div&gt;

&lt;center&gt;&lt;ins&gt;&lt;strong&gt;Schema 4: pushing data asynchronously to Fastly‚Äôs KVStores.&lt;/strong&gt;&lt;/ins&gt;&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;With this mechanism, data in the KVstores is updated after 1 or 2 seconds &lt;em&gt;(we could speed things up a little by not using batching when reading from DynamoDB Streams)&lt;/em&gt;, which is fine for this use-case.&lt;/p&gt;

&lt;p&gt;In addition to this synchronization mechanism, we also implemented a full import process, used to initialize data for all users and subscriptions ‚Äì and to fix a few edge-cases with odd data we didn‚Äôt anticipate.&lt;/p&gt;

&lt;h1 id=&quot;better-resiliency&quot;&gt;&lt;a href=&quot;#better-resiliency&quot;&gt;Better resiliency&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Looking at the architecture schema shared before, one of our Principal Engineers noticed if the BFF backend component is down &lt;em&gt;(possibly because of an overload caused by too many users browsing the catalog)&lt;/em&gt;, it will not return non-personalized layouts. And Compute, at-edge, will not be able to do its personalization work.&lt;/p&gt;

&lt;p&gt;So, we chose to asynchronously pre-generate the non-personalized layouts, and store them on Amazon S3. S3 would then be used as origin by Fastly Compute.&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
flowchart LR
    users[Users]
    users --&amp;gt; fastlyVCL

    subgraph Fastly CDN
        fastlyVCL[Fastly&lt;br /&gt;VCL]

        fastlyVCL -- /live --&amp;gt; fastlyCompute
        fastlyCompute[Fastly&lt;br /&gt;Compute]

        datastore[(Datastore)]
        fastlyCompute -.-&amp;gt; datastore
    end

    fastlyCompute -- &quot;read&lt;br /&gt;(with cache)&quot; --&amp;gt; s3
    s3[(S3 Bucket)]

    fastlyVCL -- /* --&amp;gt; bff
    
    bff((BFF))
    bff -- &quot;Generate static&lt;br /&gt;files every X minutes&quot; --&amp;gt; s3
&lt;/div&gt;

&lt;center&gt;&lt;ins&gt;&lt;strong&gt;Schema 5: storing non-personalized layouts on Amazon S3.&lt;/strong&gt;&lt;/ins&gt;&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Of course, doing this requires a bit more development work. We‚Äôve had to setup a background cronjob to generate static layouts and store them on S3. But, keeping in mind our &lt;em&gt;‚Äúusers must be able to start a stream‚Äù&lt;/em&gt; goal, we estimated the potential gain on resiliency was worth it. Also, we already had a process to generate static layouts and push them to S3, so it wasn‚Äôt &lt;em&gt;that much&lt;/em&gt; additional work.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/2024/08/07/euro-resiliency-special-event-page.html&quot;&gt;Special Event Page&lt;/a&gt; helped ensure users would not have to actually call most our backend APIs at all between the homepage and starting a live stream.&lt;/p&gt;

&lt;h1 id=&quot;load-testing-and-real-life&quot;&gt;&lt;a href=&quot;#load-testing-and-real-life&quot;&gt;Load-testing and real life&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;We carefully load-tested this solution, every step of the way while implementing it. Once fully implemented, we load-tested it again and again, to ensure it would handle as much traffic as we were expecting to get during high-stakes matches.&lt;/p&gt;

&lt;p&gt;Doing those load-tests and analyzing their results with our contacts at Fastly helped us identify three points we quickly fixed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;At first, our KVStores‚Äô primary location was in the US. Fastly reconfigured our account to have them primarily located in the EU, gaining several dozen milliseconds of latency each time new users would do their first read.&lt;/li&gt;
  &lt;li&gt;We compiled our Golang code to WASM with both Tinygo and Biggo. One produces WASM that used more CPU, and the other produces WASM that used more RAM. In the end, we followed Fastly‚Äôs recommendations, considering they know better than us what resource could be a bottleneck for their platform.&lt;/li&gt;
  &lt;li&gt;The first time we ran tests in our production environment, results were not great. Far worse than in our staging environment, in fact. Well, we had not paid for the Compute option in our Fastly‚Äôs production account yet, and it was configured with lower rate-limits than in staging üòÉ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During these load-tests as well as during real events later, we monitored a few basic metrics: number of calls per second, CPU and RAM usage, latency and error-rate.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-11-compute-at-edge/compute-at-edge-monitoring-fastly-censored.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;center&gt;&lt;ins&gt;&lt;strong&gt;Schema 6: monitoring Fastly‚Äôs Compute during a load-test.&lt;/strong&gt;&lt;/ins&gt;&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The high number of requests-per second we reached during our load-tests proved Fastly Compute is a viable approach for this workload, and for some others we are already thinking about migrating.&lt;/p&gt;

&lt;p&gt;On our backend‚Äôs application side, we also checked the number of calls per second was going down while it was going up on Compute at-edge. In practice, it went down to 0 for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/live/&lt;/code&gt; route, and remained stable or even went up for other routes, as there were more users browsing the catalog.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-11-compute-at-edge/compute-at-edge-monitoring-backends-censored.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;center&gt;&lt;ins&gt;&lt;strong&gt;Schema 7: Backend (Kubernetes) and Fastly Compute for /live/, before and during a match.&lt;/strong&gt;&lt;/ins&gt;&lt;/center&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;With this approach to generating personalized layouts at-edge for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/live/&lt;/code&gt; route, users of our platform have been able to enjoy the competition without any hiccup!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We personalized millions of live layout on the CDN at-edge, using Fastly Compute, enabling both users and customers to experience pretty much all features of the platform.&lt;/li&gt;
  &lt;li&gt;Our backend BFF and other APIs have not been overloaded. They have been fully operational to serve requests for users browsing the catalog or starting videos on demand.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And this proved edge computing is a viable option to implement some features of our platform. More than this, though, it proved we can separate our BFF software into several smaller parts, which is one of the major ideas we will implement next year while re-architecturing it.&lt;/p&gt;

&lt;p&gt;What are the next steps, then?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, use Compute at-edge to serve a couple other highly-solicited routes.&lt;/li&gt;
  &lt;li&gt;And, for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/live/&lt;/code&gt; route, implement a few use-cases that were not required for this competition, in order to use Fastly Compute for this route all the time!&lt;/li&gt;
&lt;/ul&gt;</content><author><name>[&quot;p_martin&quot;]</name></author><category term="edge" /><category term="fastly" /><category term="cloud" /><category term="devops" /><category term="2024" /><summary type="html">During the UEFA Euro football cup in June and July 2024, M6 broadcasted several matches. Of course, this competition was available, live, on M6+. For every user joining right from the first second and or for all users hearing their neighbors shouting and wanting to re-watch the action, starting a live video stream had to work!</summary></entry><entry><title type="html">We love speed 2024 ‚ù§Ô∏è</title><link href="https://tech.bedrockstreaming.com/2024/10/29/we-love-speed-2024.html" rel="alternate" type="text/html" title="We love speed 2024 ‚ù§Ô∏è" /><published>2024-10-29T00:00:00+00:00</published><updated>2024-10-29T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2024/10/29/we-love-speed-2024</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2024/10/29/we-love-speed-2024.html">&lt;p&gt;Nous avons eu la chance de participer √† la conf√©rence We love speed, une conf√©rence annuelle ax√©e sur la
performance du web. C‚Äôest un domaine qui nous passionne et nous sommes tr√®s content d‚Äôavoir pu y assister.
Le th√®me de cette √©dition, c‚Äôest l‚ÄôINP. En effet, cette m√©trique de performance a √©t√© ajout√©e aux core web vitals par
&lt;a href=&quot;https://developers.google.com/search/blog/2023/05/introducing-inp?hl=fr&quot;&gt;Google &lt;em&gt;r√©cemment&lt;/em&gt;&lt;/a&gt;.
L‚Äôobjectif de cette m√©trique est de refl√©ter l‚Äôexp√©rience utilisateur en mesurant la r√©activit√© d‚Äôune application.
Elle observe le temps entre une action utilisateur et une r√©ponse visuelle de notre interface.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-10-29-we-love-speed-2024/team_picture.jpeg&quot; alt=&quot;L&apos;√©quipe frontend √† la we love speed&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;htmx-le-nouvel-atout-pour-vos-projets-ssr---ewen-quimerch&quot;&gt;HTMX, le nouvel atout pour vos projets SSR - &lt;a href=&quot;https://ewen.quimerch.com/&quot;&gt;Ewen Quimerc‚Äòh&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Lors de ce talk, nous avons d√©couvert un outil tr√®s int√©ressant. Il s‚Äôagit de HTMX¬†: une biblioth√®que Javascript qui
permet d‚Äôajouter des fonctionnalit√©s de type SPA (Single Page Application) √† une application web classique et de fa√ßon
non intrusive. Par exemple, on peut surcharger les liens &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; pour qu‚Äôils chargent une nouvelle page en AJAX gr√¢ce √† un
attribut ajout√© au HTML. Ce mode de fonctionnement est tr√®s int√©ressant, car il permet de garder une application web
classique avec tous ses comportements le temps que HTMX se charge. C‚Äôest-a-dire que si HTMX venait √† ne pas d√©marrer,
votre application web se comporterait de la m√™me mani√®re, mais sans les am√©liorations de temps d‚Äôinteraction.&lt;/p&gt;

&lt;p&gt;HTMX surcharge la mani√®re dont vos liens et images vont √™tre charg√©s par le navigateur.
Ainsi, lors de la prochaine interaction, ce dernier sera d√©j√† pr√™t √† servir les ressources.
Le principe de HTMX consiste √† ajouter des balises HTML sp√©cifiques dans le DOM qu‚Äôil va lire et en d√©duire les
comportements √† son chargement.
Cette manipulation est appel√©e le ‚ÄúDOM morphing‚Äù. Gr√¢ce √† ce processus le temps de chargement est r√©duit et on √©vite
l‚Äôeffet ‚Äúblink‚Äù (page blanche lors du chargement de la page).
Il est √† noter que ces comportements ne sont qu‚Äôun embellissement propos√© par HTMX, il est tout √† fait possible
d‚Äôajouter par exemple l‚Äôattribut &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;preload&lt;/code&gt; sur une balise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; pour demander le chargement en avance du lien par le
navigateur.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div style=&quot;display: flex&quot;&gt;
&lt;img src=&quot;/images/avatar/j_nginn.jpeg&quot; alt=&quot;Julie&quot; style=&quot;padding: 0;border-radius: 50%; height: 70px; margin: 10px&quot; /&gt;
Comme nous utilisons React pour notre application, l&apos;utilisation de HTMX n&apos;est pas vraiment utile.
Il est d√©j√† possible avec React de pr√©charger les ressources en avance. Mais √ßa reste un outil int√©ressant...
&lt;/div&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;div style=&quot;display: flex&quot;&gt;
...effectivement, HTMX semble √™tre int√©ressant, mais on se retrouve √† ajouter
beaucoup d&apos;attributs dans le HTML. √áa peut le rendre le markup moins lisible. Et en plus, √ßa donne l&apos;impression de recoder les comportements du navigateur.
&lt;img src=&quot;/images/avatar/j_poissonnet.jpg&quot; alt=&quot;Jules&quot; style=&quot;padding: 0;border-radius: 50%; height: 70px; margin: 10px&quot; /&gt;
&lt;/div&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;react--next-vs-inp---jean-pierre-vincent&quot;&gt;React / Next vs INP - &lt;a href=&quot;https://www.linkedin.com/in/jeanpierrevincent/&quot;&gt;Jean-Pierre Vincent&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Le deuxi√®me talk a une place particuli√®re dans notre c≈ìur ‚ù§Ô∏è puisqu‚Äôil a √©t√© donn√© par notre cher Jean-Pierre Vincent,
qui a audit√© les performances du web de Bedrock, il y a deux ans.
Lors de ce talk, Jean-Pierre nous a donn√© la feuille de route pour √©viter au mieux la d√©ferlante de Javascript que vos
utilisateurs re√ßoivent au chargement de votre site.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-10-29-we-love-speed-2024/js_tsunami.jpeg&quot; alt=&quot;JS Tsunami storming your users&quot; /&gt;&lt;/p&gt;

&lt;p&gt;L‚ÄôINP (Interaction to Next Paint) est une m√©trique qui mesure le temps entre une interaction utilisateur et le prochain
rendu du navigateur. L‚Äôid√©e g√©n√©rale est de pouvoir mesurer l‚Äôincapacit√© du navigateur √† r√©agir. Apr√®s avoir r√©cup√©r√©
des mesures, il est bon de se rappeler qu‚Äôil y a un biais de selection pour les donn√©es de Crux. Pour rappel, Crux est
une base de donn√©es qui contient des m√©triques de performance de sites web collect√©es par Google.
En effet, il n‚Äôest calcul√© que sur les appareils Google (c‚Äôest le principe). Une fois qu‚Äôon a r√©colt√© des m√©triques de
performance de nos utilisateurs, si on veut travailler sur notre site web et avoir une bonne id√©e du ressenti de nos
utilisateurs, l‚Äôid√©al est de tester avec un v√©ritable Samsung S8 par exemple. Le S8 est un appareil sur lequel on a
beaucoup de donn√©es et qui repr√©sente √† l‚Äôheure actuelle une bonne repr√©sentation des capacit√©s de l‚Äôutilisateur moyen.
L‚ÄôINP est une m√©trique qui peut √™tre influenc√©e par des interactions qui ne sont pas pr√©vues par les devs. Par exemple,
on a √©t√© √©tonn√©s de constater que lorsque les temps de chargement sont un poil trop longs √† leur go√ªt, les utilisateurs
se mettent √† cliquer partout ü§∑ C‚Äôest pourquoi il est important de se baser sur des donn√©es r√©elles.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-10-29-we-love-speed-2024/inp_charge.jpeg&quot; alt=&quot;INP est bouscul√© par la charge de js!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Parmi les bonnes pratiques qu‚Äôon peut appliquer d√®s maintenant, et qui je dois le dire m‚Äôa paru un peu contre-intuitif :
faire passer Babel sur les node_modules.
En fait, du point de vue d‚Äôun d√©veloppeur, on peut se dire que cela va augmenter les temps de build drastiquement, et on
aurait s√ªrement raison. Mais en fait, il faut voir le b√©n√©fice qu‚Äôil y a derri√®re. Si on personnalise les r√®gles Babel
afin qu‚Äôelles correspondent aux navigateurs de nos utilisateurs, on √©vite des transformations inutiles qui
augmenteraient le poids de nos fichiers Javascript.&lt;/p&gt;

&lt;p&gt;Une nouvelle fonctionnalit√© de React appel√©e RSC (React Server Components) permet de combiner le rendu c√¥t√© serveur avec
l‚Äôinteractivit√© c√¥t√© client.
Les RSC aident √† r√©duire la taille du Javascript dans le navigateur ce qui permet d‚Äôam√©liorer le temps d‚Äôinteraction et
donc l‚Äôexp√©rience utilisateur. Vous l‚Äôaurez compris, c‚Äôest l‚Äôennemi n¬∞1 de Jean-Pierre (et de vos navigateurs) !
Le principe est de rendre les composants c√¥t√© serveur et de faire en sorte que ces derniers ne rendent que du HTML, qui
ne sera pas hydrat√© c√¥t√© client.
L‚Äô√©tape de r√©hydratation est une √©tape importante et trop souvent sous-estim√©e. Il s‚Äôagit d‚Äôune nouveaut√© de React qui
est prometteuse et qui est d√©j√† pr√©sente dans Next.js.&lt;/p&gt;

&lt;p&gt;Pour nous montrer un exemple concret d‚Äôabus de JavaScript : il a montr√© du code Bedrock üòÖ.
Il s‚Äôagit d‚Äôun FlameGraph du rendu de notre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;Footer /&amp;gt;&lt;/code&gt; c√¥t√© app web. Il y a une quantit√© cons√©quente de JS car nous
faisions ce qu‚Äôon appelle du CSS-in-JS.
Vous l‚Äôavez devin√©, c‚Äôest la partie ‚Äúin-JS‚Äù qui pose un probl√®me. Cela signifie que pour appliquer du style sur notre
site, c‚Äôest le Javascript qui s‚Äôen charge. Or dans un composant, comme le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;Footer /&amp;gt;&lt;/code&gt;, il y a beaucoup d‚Äô√©l√©ments et
chacun va avoir besoin de son propre style. Si l‚Äôid√©e de colocaliser le CSS dans le JS n‚Äôest pas nocive en soi, le plus
gros probl√®me √©tait l‚Äôutilisation de &lt;a href=&quot;https://styled-components.com/&quot;&gt;Styled-Components&lt;/a&gt; qui calcule le style au moment
du rendu, le rendant donc plus long. FYI¬†: Entre temps, nous avons chez Bedrock entam√© une migration pour quitter
Styled-Components au profit de &lt;a href=&quot;https://linaria.dev/&quot;&gt;Linaria&lt;/a&gt; pour le projet web
et &lt;a href=&quot;https://vanilla-extract.style/&quot;&gt;Vanilla Extract&lt;/a&gt; pour le projet smart TV.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-10-29-we-love-speed-2024/flamgraph.jpeg&quot; alt=&quot;Flamegraph du Footer de Bedrock&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Autre information qui nous concerne chez Bedrock, au moment d‚Äô√©crire ces lignes, nous sommes en train de mettre en
production la migration de React 17 vers React 18 sur le projet web.
D‚Äôapr√®s les retours d‚Äôexp√©rience de Jean-Pierre, cette version de React aura un impact positif sur l‚ÄôINP car il permet
de faire moins de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Enfin, Jean-Pierre nous laisse avec un ultime conseil pour que nos applications web soient p√©rennes : ‚ÄúMonitore (au
moins une fois dans ta vie) l‚Äôorigine des INP avec un vrai utilisateur.‚Äù&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div style=&quot;display: flex&quot;&gt;
&lt;img src=&quot;/images/avatar/j_nginn.jpeg&quot; alt=&quot;Julie&quot; style=&quot;padding: 0;border-radius: 50%; height: 70px; margin: 10px&quot; /&gt;
J&apos;ai bien aim√© ce talk ! J&apos;ai trouv√© que sa pr√©sentation √©tait tr√®s accessible, il a su vulgariser des concepts et rendre un sujet fastidieux (la performance) int√©ressant üëè
&lt;/div&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;d√©bogage-des-performances-√†-laide-des-devtools--mise-en-pratique-approfondie---umar-hansa&quot;&gt;D√©bogage des performances √† l‚Äôaide des DevTools : Mise en pratique approfondie - &lt;a href=&quot;https://umaar.com/&quot;&gt;Umar Hansa&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Avoir un ≈ìil sur ses performances est essentiel pour avancer dans la bonne direction et s‚Äôassurer qu‚Äôon
fournit √† nos utilisateurs une exp√©rience optimale. Fort heureusement pour nous les devs, on est bien lotis avec de tr√®s
bons outils. Il suffit d‚Äôouvrir les Chrome DevTools pour s‚Äôen rendre compte. Ce talk nous a pr√©sent√© comment bien
utiliser les DevTools pour mesurer les performances de nos applications web et se mettre √† la place de
nos utilisateurs. Par exemple, on peut brider son r√©seau et son CPU pour simuler une connexion 3G et un CPU lent. Dans
cette pr√©sentation, on nous a quand m√™me rappel√© que les DevTools ne sont pas une solution miracle, il est important de
tester sur de vrais devices pour le ressenti.&lt;/p&gt;

&lt;p&gt;Pour ce qui est de l‚Äôinterpr√©tation des donn√©es, une myriade d‚Äôoutils est √† notre disposition pour nous aider √†
comprendre ce que nous voyons. Par exemple, on peut ajouter des annotations dans le flamegraph comme des labels, des
diagrammes ou encore des plages de temps. On peut aussi mettre en place des custom tracks pour suivre des √©v√©nements
sp√©cifiques. Au sein de notre application, on peut utiliser l‚ÄôAPI User Timing pour ajouter des points de rep√®re dans
notre code et ainsi mieux comprendre ce qui se passe au d√©clenchement d‚Äô√©v√©nements sp√©cifiques.&lt;/p&gt;

&lt;h2 id=&quot;web-performance-testing---estela-franco&quot;&gt;Web Performance Testing - &lt;a href=&quot;https://x.com/guaca&quot;&gt;Estela Franco&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Nous avons √©galement eu un talk sur l‚Äôint√©gration de Lighthouse, un outil de Google pour mesurer la performance de nos
applications web, dans une CI. Cela permet de d√©tecter les probl√®mes de performance avant qu‚Äôils ne soient d√©ploy√©s en
production. Il est possible de mettre des warnings, voire des erreurs emp√™chant de merger, si l‚Äôapplication ne respecte
pas les standards que nous nous sommes fix√©s. L‚Äôid√©e est de s‚Äôassurer que la performance de
notre application web est toujours au top et ne se d√©grade pas dans le temps.
&lt;img src=&quot;/images/posts/2024-10-29-we-love-speed-2024/Key%20Takeaways.jpeg&quot; alt=&quot;Key takeaways from the talk&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div style=&quot;display: flex&quot;&gt;
&lt;img src=&quot;/images/avatar/j_nginn.jpeg&quot; alt=&quot;Julie&quot; style=&quot;padding: 0;border-radius: 50%; height: 70px; margin: 10px&quot; /&gt;
On envisage de l&apos;ajouter au projet smart TV, mais plus pour g√©n√©rer un rapport de performance quotidien plut√¥t que de le faire pour chaque push ou merge. 
&lt;/div&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;comment-les-navigateurs-chargent-vraiment-les-pages-web---robin-marx&quot;&gt;Comment les navigateurs chargent VRAIMENT les pages web - &lt;a href=&quot;https://x.com/programmingart&quot;&gt;Robin Marx&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Dans ce qui est probablement le talk le plus technique de la journ√©e, on nous a expliqu√© comment les navigateurs
chargent les diff√©rentes ressources n√©cessaires √† l‚Äôaffichage d‚Äôune page web. Plus sp√©cifiquement, on nous a expliqu√©
comment les navigateurs interpr√®tent le HTML pour d√©terminer quelles ressources charger en priorit√©.&lt;/p&gt;

&lt;p&gt;Le talk √©tait tr√®s int√©ressant, mais la conclusion est un peu frustrante : il est pour le moment impossible de pr√©voir
l‚Äôordre de chargement des ressources par le navigateur √† partir du m√™me HTML. En effet, les navigateurs ont des
comportements diff√©rents entre eux et m√™me par version ü§Ø. Chrome a, par exemple, un comportement tr√®s diff√©rent cette
ann√©e
par rapport √† deux ans en arri√®re.&lt;/p&gt;

&lt;p&gt;M√™me si on est tent√© de vouloir contr√¥ler le chargement des ressources, il est important de se rappeler que le
navigateur
est tr√®s bien optimis√© pour charger les ressources de mani√®re efficace. Il est donc pr√©f√©rable de laisser le navigateur
faire son travail plut√¥t que de vouloir le contr√¥ler. L‚Äôattribut &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;preload&lt;/code&gt; est un bon exemple de ce que l‚Äôon peut faire
pour aider le navigateur √† charger les ressources de mani√®re plus efficace. Il faut cependant l‚Äôutiliser avec parcimonie
et de mani√®re chirurgicale pour ne pas interf√©rer avec le travail du navigateur.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-10-29-we-love-speed-2024/preload_surgical.jpeg&quot; alt=&quot;Preload with surgical precision&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mais-que-fait-la-police----eroan-boyer&quot;&gt;Mais que fait la police ? - &lt;a href=&quot;https://x.com/eroan&quot;&gt;Eroan Boyer&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Pour finir, on a eu un talk sur les polices de caract√®res. Elles sont essentielles pour l‚Äôidentit√© visuelle de nos
applications web, mais elles peuvent aussi √™tre une source de probl√®mes de performance. En effet, les polices de
caract√®res peuvent √™tre tr√®s lourdes et ralentir le chargement de nos pages. Il est donc important de bien les choisir
et de les optimiser pour garantir une bonne performance. Il existe plusieurs techniques pour optimiser les polices,
notamment en r√©alisant un subset de la police pour ne t√©l√©charger que les glyphes dont on a besoin. (En fran√ßais, on a
besoin que de 165 glyphes, compar√© √† 528 pour le latin).
Il existe des outils pour nous aider √† r√©aliser ces subsets
comme¬†: &lt;a href=&quot;https://everythingfonts.com/subsetter&quot;&gt;Font Subsetter&lt;/a&gt;, &lt;a href=&quot;https://fonttools.readthedocs.io/&quot;&gt;fontTools&lt;/a&gt; ou
&lt;a href=&quot;https://www.zachleat.com/web/glyphhanger/&quot;&gt;Glyphanger&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;div style=&quot;display: flex&quot;&gt;
Attention √† ne pas abuser des subsets, car cela peut entra√Æner des probl√®mes de lisibilit√© du texte. Le fameux tü†âfu .
&lt;img src=&quot;/images/avatar/j_poissonnet.jpg&quot; alt=&quot;Jules&quot; style=&quot;padding: 0;border-radius: 50%; height: 70px; margin: 10px&quot; /&gt;
&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-10-29-we-love-speed-2024/tofu.jpeg&quot; alt=&quot;Say no to tofu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Il est aussi possible de minimiser le nombre de fichiers en utilisant des polices variables. Un bon exemple est la
police Roboto Flex, qui est customisable et permet ainsi de pouvoir r√©duire le nombre de fichiers n√©cessaires √† charger.
Il est l√† aussi, possible de s√©lectionner les variations que l‚Äôon souhaite pour r√©duire encore plus le poids de la
police.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Cette ann√©e, l‚Äôaccent a √©t√© mis sur l‚ÄôINP et la mani√®re de l‚Äôam√©liorer. Il est important de garder en t√™te que l‚ÄôINP est
une m√©trique qui mesure l‚Äôexp√©rience utilisateur, il est donc essentiel de la garder √† l‚Äô≈ìil. Il est bon de
rappeler que la performance est plus une habitude √† prendre qu‚Äôun constat √† r√©aliser. Une application performante, c‚Äôest
une exp√©rience utilisateur am√©lior√©e et des utilisateurs satisfaits !&lt;/p&gt;

&lt;p&gt;De notre c√¥t√©, nous sommes rentr√©s avec quelques id√©es √† mettre en place dans nos projets √† Bedrock, notamment¬†:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Etudier la possibilit√© d‚Äôajouter des React Server Components pour r√©duire le poids de notre JS&lt;/li&gt;
  &lt;li&gt;Mettre en place des tests de performance dans notre CI avec Lighthouse CI&lt;/li&gt;
  &lt;li&gt;V√©rifier que nos polices de caract√®res sont bien optimis√©es pour la performance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notre √©quipe est ressortie de cette conf√©rence ravie et avec de nouvelles id√©es qui vont surement nous suivre sur nos
projets personnels aussi. La We love speed ‚ù§Ô∏è est une conf√©rence √† ne pas manquer pour tous les passionn√©s de
performance web, on vous recommande chaudement d‚Äôy assister si vous en avez l‚Äôoccasion !&lt;/p&gt;</content><author><name>[&quot;j_nginn&quot;, &quot;j_poissonnet&quot;]</name></author><category term="performance" /><category term="conference" /><category term="webperf" /><category term="javascript" /><category term="react" /><category term="web" /><category term="frontend" /><summary type="html">Nous avons eu la chance de participer √† la conf√©rence We love speed, une conf√©rence annuelle ax√©e sur la performance du web. C‚Äôest un domaine qui nous passionne et nous sommes tr√®s content d‚Äôavoir pu y assister. Le th√®me de cette √©dition, c‚Äôest l‚ÄôINP. En effet, cette m√©trique de performance a √©t√© ajout√©e aux core web vitals par Google r√©cemment. L‚Äôobjectif de cette m√©trique est de refl√©ter l‚Äôexp√©rience utilisateur en mesurant la r√©activit√© d‚Äôune application. Elle observe le temps entre une action utilisateur et une r√©ponse visuelle de notre interface.</summary></entry><entry><title type="html">Enhancing Production Monitoring with New Relic</title><link href="https://tech.bedrockstreaming.com/2024/10/03/enhancing-production-monitoring-with-newrelic.html" rel="alternate" type="text/html" title="Enhancing Production Monitoring with New Relic" /><published>2024-10-03T00:00:00+00:00</published><updated>2024-10-03T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2024/10/03/enhancing-production-monitoring-with-newrelic</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2024/10/03/enhancing-production-monitoring-with-newrelic.html">&lt;p&gt;At &lt;em&gt;Bedrock&lt;/em&gt;, we develop a streaming solution tailored for European media companies. Our application is a customizable white-label product used by millions across Europe. Bedrock‚Äôs clients have high expectations for stability, early incident detection, quick resolution, and effective communication during those times. Naturally, our goal is to deliver a stable product, and we dedicate significant effort toward this objective.&lt;/p&gt;

&lt;p&gt;However, about two and a half years ago, our mobile team faced serious challenges in monitoring production. The tagging systems were pushing events into a tool that developers were not kin to use. The graphs were not intuitive and difficult to generate, making them hard to interpret. Each team across the company was managing its own monitoring practices. Monitoring was largely manual.&lt;br /&gt;
Too many problems were brought to the attention of the team by a complaint of our client to the support team. We knew we had to make a change.&lt;/p&gt;

&lt;p&gt;Several organization-wide measures were implemented (like tools to streamline incident reporting and improved communication processes with our clients), but on the tech side, we also needed to play our part.&lt;/p&gt;

&lt;h2 id=&quot;setting-our-goals-and-expectations&quot;&gt;Setting Our Goals and Expectations&lt;/h2&gt;

&lt;p&gt;We began by defining our goals:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Confidence in Releases: We needed certainty that what we shipped was functioning as expected.&lt;/li&gt;
  &lt;li&gt;Standardized Practices: It was crucial to align monitoring practices and tagging plans across teams.&lt;/li&gt;
  &lt;li&gt;Early Problem Detection: Our goal was to identify issues as early as possible.&lt;/li&gt;
  &lt;li&gt;Quick Data for Support Teams: We aimed to swiftly provide support with relevant metrics, such as the number of users impacted and the duration of incidents.&lt;/li&gt;
  &lt;li&gt;Developer Adoption: The selected tool had to be user-friendly, offering easy graph creation, visually appealing layouts, straightforward querying, and an ergonomic interface.&lt;/li&gt;
  &lt;li&gt;Automated Alerts: We needed a system that could automatically alert us of potential issues.&lt;/li&gt;
  &lt;li&gt;Configuration Portability: Regularly exporting our dashboards and alerts configuration was key, ensuring we could redeploy the setup if needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bedrock chose New Relic. It‚Äôs important to note that this is not the only monitoring tool available, and we‚Äôre not claiming that others can‚Äôt meet our needs (we didn‚Äôt explore them deeply enough to say). What we do know is that New Relic has been widely adopted across our tech teams and has proven to be an effective solution to reach our requirements.&lt;/p&gt;

&lt;h2 id=&quot;our-implementation-path&quot;&gt;Our Implementation Path&lt;/h2&gt;

&lt;p&gt;Here‚Äôs the approach we took:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Shared Documentation: We created unified documentation for technical tagging plans across front-end teams, organized by domain and feature.&lt;/li&gt;
  &lt;li&gt;Common Dashboards: We developed shared dashboards for the Android and iOS teams, organized by domain (e.g., one for the Player, one for the Core, one for User Life Cycle, and one for iOS-specific features).&lt;/li&gt;
  &lt;li&gt;Automated Notifications: A Slack notification system was set up to alert teams whenever the documentation changes, ensuring everyone stays informed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;advanced-queries-with-new-relic-insights&quot;&gt;Advanced Queries with New Relic Insights&lt;/h2&gt;

&lt;p&gt;New Relic Insights, powered by NRQL (New Relic Query Language), allows developers to create powerful queries to extract specific information. Below, we illustrate how various NRQL queries translate into different types of graphs and charts on our dashboard:&lt;/p&gt;

&lt;h3 id=&quot;example-1-count-query-with-line-chart&quot;&gt;Example 1: Count Query with Line chart&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; SELECT count(*) 
 FROM Actions 
 WHERE actionName = &apos;LoginAction&apos; 
 FACET status, authenticationMethod 
 TIMESERIES auto 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This query counts the number of occurrences of the ‚ÄòLoginAction‚Äô event, faceted by the status and authenticationMethod fields. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TIMESERIES&lt;/code&gt; auto clause visualizes this count over time, showing trends or spikes in login activity.&lt;/p&gt;

&lt;p&gt;How It Renders: The line chart displays the count of login actions over time, with different lines for each combination of status and authentication method (Google, Apple, Email). This allows us to track how login activity changes over time and to compare different types of logins or statuses.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-10-03-enhancing-production-monitoring-with-newrelic/barchart.png&quot; alt=&quot;Bar chart rendering&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;example-2-count-query-with-pie-chart&quot;&gt;Example 2: Count Query with Pie chart&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; SELECT count(*), WHERE status = &apos;error&apos; 
 FROM Actions 
 WHERE actionName = &apos;LoginAction&apos; 
 FACET authenticationMethod, errorCode 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This query counts the number of login actions that resulted in errors, faceting by authenticationMethod (Google, Apple, Email) and errorCode. It helps identify which authentication methods and error codes are most common.&lt;/p&gt;

&lt;p&gt;How It Renders: The pie chart visualizes the distribution of login errors across different authentication methods and error codes. Each slice represents the proportion of errors associated with a particular method or error code, making it easy to see which are most problematic.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-10-03-enhancing-production-monitoring-with-newrelic/piechart.png&quot; alt=&quot;Pie chart rendering&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;example-3-percentage-query-with-billboard-chart&quot;&gt;Example 3: Percentage Query with Billboard chart&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; SELECT 100 - percentage(count(*), WHERE status = &apos;error&apos;)  
 as `Successful login` 
 FROM Actions 
 WHERE actionName = &apos;LoginAction&apos; 
 SINCE 2 hours ago 
 COMPARE WITH 1 day ago  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This query calculates the percentage of successful login actions (i.e., those that did not result in errors) within the last two hours, compared to the same period one day ago. It helps track success rates and identify any improvements or declines in login performance.&lt;/p&gt;

&lt;p&gt;How It Renders: The billboard chart prominently displays the percentage of successful logins as a large, bold number. The comparison with the previous day is also displayed, allowing for quick assessment of whether the success rate has improved or worsened.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-10-03-enhancing-production-monitoring-with-newrelic/billboardchart.png&quot; alt=&quot;Billboard chart rendering&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;example-4-funnel-query&quot;&gt;Example 4: Funnel Query&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   SELECT funnel(sessionId AS session, 
   WHERE name = &apos;EmailValidationStatus&apos; AND isVerified IS false AS &apos;email not verified&apos;, 
   WHERE name = &apos;EmailNotVerifiedPageOpe&apos; AS &apos;email validation page opened&apos;), 
   WHERE name = &apos;LayoutPageOpen‚Äô AS &apos;one layout event is called &apos;) 
   FROM Actions 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This funnel query tracks user sessions through key steps in an email verification process. It identifies users with unverified emails and checks if they opened the email validation page. This helps monitor conversion rates and potential drop-offs in the user journey.&lt;/p&gt;

&lt;p&gt;How It Renders: The funnel chart visualizes the sequence of user actions, showing the number of users at each step of the email verification process. This makes it easy to see where users drop off and which steps might need improvement.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-10-03-enhancing-production-monitoring-with-newrelic/funnelchart.png&quot; alt=&quot;Funnel chart rendering&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;configuring-alerts-with-new-relic&quot;&gt;Configuring Alerts with New Relic&lt;/h2&gt;

&lt;p&gt;When setting up New Relic alerts, we used both static and anomaly thresholds based on the feature‚Äôs behaviour:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Static Thresholds: Applied to features with predictable, consistent performance, where specific limits are well-defined.&lt;br /&gt;
For example, we used static thresholds for the Login/Register and Consent features, where behaviour is stable and deviations are easily identifiable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Anomaly Detection: Used for features with dynamic patterns where a fixed threshold isn‚Äôt suitable. 
We applied anomaly detection for example to the Payment feature since transaction patterns can vary significantly based on many factors.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This combination allows us to accurately monitor both stable and variable features.&lt;/p&gt;

&lt;h3 id=&quot;alert-policies&quot;&gt;Alert Policies&lt;/h3&gt;

&lt;p&gt;An alert policy determines who should be notified when an alert is triggered. It defines notification channels, user groups, and actions to take. To create an alert policy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go to ‚ÄúAlerts &amp;amp; AI‚Äù in your New Relic dashboard.&lt;/li&gt;
  &lt;li&gt;Create a new alert policy and define the actions to take when an alert is triggered.&lt;/li&gt;
  &lt;li&gt;Associate the policy with the channels or emails that should receive the alert notifications.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;alert-conditions&quot;&gt;Alert Conditions&lt;/h3&gt;

&lt;p&gt;Alert conditions define the thresholds at which an alert should be triggered. To configure an alert condition:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In your New Relic dashboard, go to ‚ÄúAlerts &amp;amp; AI.‚Äù&lt;/li&gt;
  &lt;li&gt;Create a new alert condition by specifying criteria such as response time or error rate.&lt;/li&gt;
  &lt;li&gt;Define the thresholds and conditions necessary to trigger the alert. You can use anomaly detection or static thresholds depending on your feature needs.&lt;/li&gt;
  &lt;li&gt;Associate this condition with the specific alert policy you have defined.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;code-of-alerts-with-terraform&quot;&gt;Code of alerts with Terraform&lt;/h3&gt;

&lt;p&gt;Here‚Äôs a simple example of Terraform code to configure an alert condition that triggers when a spike in login errors (critical or warning) is detected:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  resource &quot;newrelic_nrql_alert_condition&quot; &quot;authentication_login_error&quot; { 
  account_id                   = &quot;account_id&quot; 
  policy_id                    = &quot;policy_id&quot; 
  type                         = &quot;static&quot; 
  name                         = &quot;authentication_login_error&quot; 
  description                  = &quot;This alert fires when the % of login errors gets too high in a given time&quot; 
  enabled                      = true 
  violation_time_limit_seconds = 259200 

  nrql { 
    query = &quot;SELECT percentage(count(*), WHERE status = &apos;error&apos;) * IF(count(*)&amp;lt;100, 0, 1) FROM Actions WHERE actionName = &apos;LoginAction&apos;&quot; 
  } 

  critical { 
    operator              = &quot;above&quot; 
    threshold             = 10 
    threshold_duration    = 3600 
    threshold_occurrences = &quot;all&quot; 
    
  } 

  warning { 
    operator              = &quot;above&quot; 
    threshold             = 8 
    threshold_duration    = 3600 
    threshold_occurrences = &quot;all&quot; 

  } 

  fill_option        = &quot;none&quot; 
  aggregation_window = 3600 
  aggregation_method = &quot;event_flow&quot; 
  aggregation_delay  = 600 
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Explanation:&lt;/p&gt;

&lt;p&gt;This Terraform script configures an NRQL static alert condition for monitoring login errors. The alert triggers if the percentage of login errors exceeds a threshold. The NRQL query calculates the error percentage and multiplies it by 0 if the event count is less than 100 (to avoid false positives from low activity). The critical condition triggers if the error rate is above 10% for at least 1 hour. The warning condition triggers if the error rate is above 8% for the same duration.  The script also sets up an aggregation window and delay to smooth out any short-lived spikes. Once this condition is met, an alert is sent to the Slack channel configured in the previous steps.&lt;/p&gt;

&lt;h2 id=&quot;brighter-outlook-with-enhanced-monitoring&quot;&gt;Brighter Outlook with Enhanced Monitoring&lt;/h2&gt;

&lt;p&gt;Now, with our new monitoring solution in place, we‚Äôre seeing a significant improvement in how we handle critical issues. Alerts are delivered instantly, allowing us to respond to problems as they arise. Even when we receive warnings, we can act proactively to prevent potential issues from escalating.&lt;/p&gt;

&lt;p&gt;This immediate and precise alerting system ensures that our dedicated teams whether they handle backend issues or other areas are promptly informed and can address concerns before they impact our users. This proactive approach not only enhances our overall performance but also improves our operational efficiency.&lt;/p&gt;

&lt;p&gt;Overall, this solution has proven to be more effective and practical for our project, enabling us to maintain higher levels of stability and deliver a better experience for our clients. We‚Äôre confident that this improvement will continue to support our success and growth moving forward.&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://newrelic.com/blog/how-to-relic/steal-this-dashboard&quot;&gt;Steal this dashboard&lt;/a&gt;&lt;/p&gt;</content><author><name>[&quot;m_benali&quot;, &quot;m_julieron&quot;]</name></author><category term="monitoring" /><category term="production" /><category term="newrelic" /><category term="shared practice" /><category term="alerting" /><summary type="html">At Bedrock, we develop a streaming solution tailored for European media companies. Our application is a customizable white-label product used by millions across Europe. Bedrock‚Äôs clients have high expectations for stability, early incident detection, quick resolution, and effective communication during those times. Naturally, our goal is to deliver a stable product, and we dedicate significant effort toward this objective.</summary></entry><entry><title type="html">How to manage hundreds of view templates?</title><link href="https://tech.bedrockstreaming.com/2024/08/22/how-to-manage-hundreds-of-templates.html" rel="alternate" type="text/html" title="How to manage hundreds of view templates?" /><published>2024-08-22T00:00:00+00:00</published><updated>2024-08-22T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2024/08/22/how-to-manage-hundreds-of-templates</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2024/08/22/how-to-manage-hundreds-of-templates.html">&lt;p&gt;Let‚Äôs dive together into the depths of a large scale template versioning for a white label streaming application.&lt;/p&gt;

&lt;h2 id=&quot;the-context&quot;&gt;The context&lt;/h2&gt;

&lt;p&gt;Today, at &lt;strong&gt;Bedrock&lt;/strong&gt;, we are providing a streaming service on:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;11 common &lt;strong&gt;CTV&lt;/strong&gt; platforms: Tizen, Philips, WebOS, Hisense, Panasonic, Orange, Xbox, PS4, Orsay, Smart Alliance, WhaleOS&lt;/li&gt;
  &lt;li&gt;6 &lt;strong&gt;Android&lt;/strong&gt; platforms: mobile, AndroidTV, Bytel, Free, SFR, FireTV&lt;/li&gt;
  &lt;li&gt;2 &lt;strong&gt;Apple&lt;/strong&gt; platforms: iOS / tvOS&lt;/li&gt;
  &lt;li&gt;1 &lt;strong&gt;Web&lt;/strong&gt; platform&lt;/li&gt;
  &lt;li&gt;a lot of specific devices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these platforms has their own guidelines and usage (interaction, screen sizes, etc) and is managed by a dedicated team in our organization. They also have their own native &lt;strong&gt;design components&lt;/strong&gt; which our implementations rely on to offer the best possible experience.&lt;/p&gt;

&lt;p&gt;Bedrock has several clients (M6+, Videoland and others), that all have their dedicated application on each platform. But they also have their own design expectations and branding guidelines.&lt;br /&gt;
We provide them with a &lt;strong&gt;design system&lt;/strong&gt;: a set of visual assets they can use to render pages. These components follow the atomic design model, which means that each layer is a composition of the previous one. Here is the list of the layers with their name and some items that belong to it:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;14 &lt;strong&gt;tokens&lt;/strong&gt;: base element that defines the brand (ex: Colors, FontSystem, Radius, Shadow, Breakpoints, Treatments‚Ä¶)&lt;/li&gt;
  &lt;li&gt;9 &lt;strong&gt;atoms&lt;/strong&gt;: simplest design item that cannot be decomposed (ex: Icons, Avatar, CheckBox, ProgressBar, ServiceIcon, Separator‚Ä¶)&lt;/li&gt;
  &lt;li&gt;62 &lt;strong&gt;molecules&lt;/strong&gt;: group of atoms that forms a visual unity (ex: Card, Poster, HorizontalCard, Button, CTA, Portrait, Totem‚Ä¶)&lt;/li&gt;
  &lt;li&gt;12 &lt;strong&gt;organisms&lt;/strong&gt;: complex visual item or part of the interface (ex: Jumbotron, Hero, Solo, Banner‚Ä¶)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hereunder are some sample screens composed of design system components for different customers:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/images/posts/2024-08-22-how-to-manage-hundreds-of-templates/home-m6plus.png&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/images/posts/2024-08-22-how-to-manage-hundreds-of-templates/home-videoland.png&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/images/posts/2024-08-22-how-to-manage-hundreds-of-templates/home-rtlhu.png&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This results in approximately one hundred design elements per client. However, not all components are always specific, and an &lt;strong&gt;inheritance&lt;/strong&gt; system is in place to allow clients to reuse default atoms, molecules, or organisms while applying the tokens corresponding to their brand.&lt;/p&gt;

&lt;p&gt;The objectives and expectations regarding the design vary greatly among clients, resulting in &lt;strong&gt;numerous graphical element evolutions&lt;/strong&gt;. Managing the creation and progression of these elements through different processes is a major challenge in tracking designs across each platform. These demands sometimes lead to &lt;strong&gt;different integrations&lt;/strong&gt;. Whether or not the default design is inherited is crucial information to avoid manually comparing the app designs with documentation, which can lead to misunderstandings and wasted time during validation and approval processes.&lt;br /&gt;
To achieve all these objectives, we need to be able to carefully follow the evolution of the design system on each plateform.&lt;/p&gt;

&lt;h2 id=&quot;one-versioning-to-rule-them-all&quot;&gt;One versioning to rule them all&lt;/h2&gt;

&lt;p&gt;Therefore, implementing a versioning system became essential to continue enriching and evolving our client‚Äôs design systems.&lt;br /&gt;
To ensure its interest and effectiveness, this system had to address several issues:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Be specific&lt;/strong&gt; per platform and per client: evolution progress does not occur at the same pace across all platforms. This also allows for comparing design progress between platforms.&lt;/li&gt;
  &lt;li&gt;Allow &lt;strong&gt;visualizing the inheritance&lt;/strong&gt; between the default design system and the client‚Äôs specific part on the same platform. We also wanted the ability to add comments on implementation details.&lt;/li&gt;
  &lt;li&gt;Be &lt;strong&gt;directly accessible&lt;/strong&gt; with each build to stay in touch with the application it represents. On mobile, many builds are generated daily, making it difficult to track the arrival of new features.&lt;/li&gt;
  &lt;li&gt;Stay &lt;strong&gt;up-to-date&lt;/strong&gt; with the constant evolutions of the design system to maintain the source of truth.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Exemple of a Design System release note:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-08-22-how-to-manage-hundreds-of-templates/design-release-note.png&quot; alt=&quot;Release note of the design system&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Initially, the design team started by versioning its releases and all available components, which are accessible to technical teams in our online design documentation (hosted on &lt;a href=&quot;https://zeroheight.com/&quot;&gt;zeroheight&lt;/a&gt;). This versioning is &lt;strong&gt;common to all platforms&lt;/strong&gt; and all clients if there are no specificities for the component in question. Ultimately, versioning helps product and technical teams track the delivery progress of new designs. The version number follows these rules:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Code status&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Stage&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Rule&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;First release&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;New collection&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.0.0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Documentation update without impact on the anatomy of design element&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Documentation update&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Increment the third digit&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.0.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;New backward-compatible feature&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Minor release&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Increment the 2nd digit and reset the third&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Change on element that breaks backward compatibility&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Major release&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Increment the first digit and reset the second and the third&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2.0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Each frontend team were then responsible for implementing an equivalent versioning system representing the state of their platform. This was done through a &lt;strong&gt;feature team&lt;/strong&gt; including all front-end teams, design system managers, and the product team. This organization brought numerous benefits:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Facilitating the &lt;strong&gt;synchronization&lt;/strong&gt; and homogeneity of product templates&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sharing&lt;/strong&gt; development challenges&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Limiting&lt;/strong&gt; versioning differences between all fronts&lt;/li&gt;
  &lt;li&gt;Sharing &lt;strong&gt;industrialization&lt;/strong&gt; ideas&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;case-study-android-versioning-challenges&quot;&gt;Case study: Android versioning challenges&lt;/h2&gt;

&lt;p&gt;For Android, we sometimes have different component implementations between mobile and TV, evolving at different paces. This required &lt;strong&gt;two separate versionings&lt;/strong&gt; to represent them. Moreover, we currently use comments to track the migration to Google‚Äôs new view system (Compose), which is happening alongside graphical evolutions.&lt;br /&gt;
Each client has its &lt;strong&gt;versioning file&lt;/strong&gt; containing all the components available on the targeted platform. Regarding component inheritance from the default design system, there are two possibilities:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The component is &lt;strong&gt;inherited&lt;/strong&gt; and thus has no specificities and no version in the client‚Äôs versioning file, using the generic Bedrock customer version&lt;/li&gt;
  &lt;li&gt;It has its &lt;strong&gt;own implementation&lt;/strong&gt; and its associated version&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Default Versioning file&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Customer Versioning file&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/images/posts/2024-08-22-how-to-manage-hundreds-of-templates/versioning-file-default.png&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/images/posts/2024-08-22-how-to-manage-hundreds-of-templates/versioning-file-customer.png&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;From these &lt;strong&gt;versioning files&lt;/strong&gt;, we have been able to generate &lt;strong&gt;reports&lt;/strong&gt; for each platform containing only the available graphical elements and their version, whether inherited or not. To track their growing number, we opted for automatic generation of these reports with each build using a Gradle Plugin integrated on our continuous deployment and integration (CI/CD): &lt;a href=&quot;https://bitrise.io/&quot;&gt;Bitrise&lt;/a&gt;. Now, they are generated using a &lt;a href=&quot;https://www.mkdocs.org/&quot;&gt;Mkdocs&lt;/a&gt; plugin to be published online automatically with our technical documentation.&lt;/p&gt;

&lt;p&gt;Automatically generated template versioning report for M6+:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-08-22-how-to-manage-hundreds-of-templates/template-versioning-report.png&quot; alt=&quot;Template versioning report for a customer&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Design system versioning reports offer a &lt;strong&gt;quick and exhaustive overview&lt;/strong&gt; of the design system at any given moment for any of our customers and simplifies the QA teams validation work. It is now an essential tool for tracking design progress across all supported platforms.&lt;/p&gt;

&lt;p&gt;However, improvements are always possible:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Currently, developers are responsible for &lt;strong&gt;updating the versioning file&lt;/strong&gt; when adding or modifying graphical elements, which can lead to errors and omissions. To avoid this, we would like to link the concrete implementation of the component and its version in the versioning file. But as we are still using the android legacy view system, component can be a class but also some xml style or theme or even resource files. This should be easier after the migration to the new Android view system Compose.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Access through Bitrise&lt;/strong&gt; is not ideal. We currently centralize all generated builds (using CI as well) in &lt;a href=&quot;https://www.airtable.com/&quot;&gt;Airtable&lt;/a&gt;. A link would be preferable and more visible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These last improvements will perhaps be the subject of a follow-up to this article. Thank you for reading, we hope you found some useful information that can help you to better follow the graphical evolution of your project. Do not hesitate to contact us if you have some questions or suggestions.&lt;/p&gt;</content><author><name>[&quot;d_cuny&quot;, &quot;m_oudji&quot;]</name></author><category term="android" /><category term="versioning" /><category term="design" /><category term="atomic design" /><category term="design system" /><summary type="html">Let‚Äôs dive together into the depths of a large scale template versioning for a white label streaming application.</summary></entry><entry><title type="html">JS Nation x React Summit 2024 highlights</title><link href="https://tech.bedrockstreaming.com/2024/08/20/js-nation-react-summit-2024.html" rel="alternate" type="text/html" title="JS Nation x React Summit 2024 highlights" /><published>2024-08-20T00:00:00+00:00</published><updated>2024-08-20T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2024/08/20/js-nation-react-summit-2024</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2024/08/20/js-nation-react-summit-2024.html">&lt;p&gt;The Frontend Bedrock teams were present at the 2024 edition of the &lt;em&gt;JS Nation&lt;/em&gt; and &lt;em&gt;React Summit&lt;/em&gt; conferences in Amsterdam on 13 &amp;amp; 14 June. We would like to highlight and share some of the subjects we find relevant about our favourite language and framework üôÇ Feel free to explore them further if you are interested.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;üìπ You can watch all the video recordings of the &lt;a href=&quot;https://gitnation.com/events/jsnation-2024/talks&quot;&gt;JS Nation&lt;/a&gt; and the &lt;a href=&quot;https://gitnation.com/events/react-summit-2024/talks&quot;&gt;React Summit&lt;/a&gt; talks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;lessons-for-building-resilient-codebases---alex-moldovan&quot;&gt;Lessons for Building Resilient Codebases - Alex Moldovan&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;üìπ Watch the &lt;a href=&quot;https://gitnation.com/contents/lessons-for-building-resilient-codebases&quot;&gt;video&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of my favourite types of presentation, with practical things that you can then apply in your daily life as a developer.&lt;/p&gt;

&lt;p&gt;Alex sums up his speech in 5 points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Accept imperfections&lt;/strong&gt; in your codebase: perfect is the enemy of good, shortcuts and exceptions can be taken if they are well documented.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://alexmoldovan.dev/code-bites/colocation-is-king&quot;&gt;Colocating code&lt;/a&gt;&lt;/strong&gt; according to concerns is a way of improving readability and therefore maintainability and efficiency.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reusability&lt;/strong&gt; is not always the better choice vs &lt;strong&gt;duplication&lt;/strong&gt;, you should find the right balance, abstraction should only come when a piece of code is proven to be a long term solution.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Readability and understandability&lt;/strong&gt; of the code is very important for the future developers that will maintain your code: leave comments, break conditions with more than 3 members using intermediate variables, etc.&lt;/li&gt;
  &lt;li&gt;Use &lt;strong&gt;Typescript&lt;/strong&gt; intensively and try to handle all the possible states of your data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At Bedrock, we‚Äôve always tried to apply a maximum of &lt;a href=&quot;https://tech.bedrockstreaming.com/2021/09/06/web-best-practices.html&quot;&gt;best practices&lt;/a&gt; including some addressed here by Alex, to ensure the maintainability of our web codebase. It seems to be working pretty good since this &lt;a href=&quot;https://tech.bedrockstreaming.com/comment-ne-pas-jeter-son-application-frontend-tout-les-deux-ans&quot;&gt;JS project is now 10 years old&lt;/a&gt;!&lt;/p&gt;

&lt;h3 id=&quot;why-your-performance-work-is-not-seen---vinicius-dallacqua&quot;&gt;Why Your Performance Work Is Not Seen - Vinicius Dallacqua&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;üìπ Watch the &lt;a href=&quot;https://gitnation.com/contents/why-your-performance-work-is-not-seen&quot;&gt;video&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vinicius addresses an important subject for us, as frontend engineers. We are all concerned about performance and we want to deliver the most optimized product, but we often come up against major obstacles in this area. We already talked about this topic last year when &lt;a href=&quot;https://tech.bedrockstreaming.com/2023/08/11/we-love-speed-2023.html&quot;&gt;we attended the We Love Speed conference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To demonstrate the worth of working on performances, &lt;strong&gt;Lab tools&lt;/strong&gt; (like &lt;a href=&quot;https://developer.chrome.com/docs/lighthouse/overview?hl=fr&quot;&gt;Lighthouse&lt;/a&gt;) &amp;amp; &lt;strong&gt;RUM&lt;/strong&gt; (Real User Monitoring) have to be used together. Collected data must be analyzed, optimized and framed to make connections with product concerns. Performance needs to &lt;strong&gt;matter to engineering and product&lt;/strong&gt; for a sustainable governance model.&lt;/p&gt;

&lt;p&gt;As in many areas, the key is to set realistic and achievable objectives and to proceed by iteration: &lt;strong&gt;monitor, measure, report and repeat&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;install-nothing-app-uis-with-native-browser-apis---scott-tolinski&quot;&gt;Install Nothing: App UIs With Native Browser APIs - Scott Tolinski&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;üìπ Watch the &lt;a href=&quot;https://gitnation.com/contents/install-nothing-app-uis-with-native-browser-apis&quot;&gt;video&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Scott reveals that we can use the browser‚Äôs native APIs to build certain UI components easily, whereas we‚Äôve sometimes been using complex JS to do this for years.&lt;/p&gt;

&lt;p&gt;He shows for example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How to build modals with the &lt;a href=&quot;https://developer.mozilla.org/fr/docs/Web/HTML/Element/dialog&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt;&lt;/a&gt; element&lt;/li&gt;
  &lt;li&gt;How to easily create animated transitions with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API&quot;&gt;View Transition API&lt;/a&gt; or with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@starting-style&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@starting-style&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;How to create a menu with the &lt;a href=&quot;https://developer.mozilla.org/fr/docs/Web/HTML/Global_attributes/popover&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;popover&amp;gt;&lt;/code&gt;&lt;/a&gt; element&lt;/li&gt;
  &lt;li&gt;How to build slideshows with &lt;a href=&quot;https://developer.mozilla.org/fr/docs/Web/CSS/scroll-snap-align&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scroll-snap&lt;/code&gt;&lt;/a&gt; CSS properties&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check all these tips out and much more besides on Scott‚Äôs &lt;a href=&quot;https://tolin.ski/talks/install-nothing&quot;&gt;site&lt;/a&gt;!&lt;/p&gt;

&lt;h3 id=&quot;testing-do-more-with-less---eugene-fidelin&quot;&gt;Testing: do more with less - Eugene Fidelin&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;üìπ Watch the &lt;a href=&quot;https://gitnation.com/contents/testing-do-more-with-less&quot;&gt;video&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Testing has been a guide and a real challenge since we began the JS web project at Bedrock in 2015. We are convinced that this is an important part of the sustainability and reliability of the codebase. As a result, we listened to Eugene‚Äôs point of view with curiosity.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.datadoghq.com/knowledge-center/dora-metrics/&quot;&gt;DORA metrics&lt;/a&gt; should be adopted to measure how good your are for shipping software with &lt;strong&gt;4 indicators&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deployment frequency&lt;/li&gt;
  &lt;li&gt;Lead time for changes&lt;/li&gt;
  &lt;li&gt;Change failure rate&lt;/li&gt;
  &lt;li&gt;Time to restore service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first three are affected by the testing strategy. The &lt;em&gt;&lt;a href=&quot;https://kentcdodds.com/blog/the-testing-trophy-and-testing-classifications&quot;&gt;Testing Trophy&lt;/a&gt;&lt;/em&gt; can help to write the right tests given the &lt;strong&gt;return on investment&lt;/strong&gt; of the different forms.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-08-20-js-nation-react-summit-2024/testingTrophy.png&quot; alt=&quot;Testing Trophy: return on investment of the different forms of testing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Eugene describes the various steps to build a reliable testing strategy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;step 0: enable &lt;strong&gt;static&lt;/strong&gt; linters and &lt;strong&gt;type&lt;/strong&gt; checks&lt;/li&gt;
  &lt;li&gt;step 1: create &lt;strong&gt;integration&lt;/strong&gt; tests for all happy and non-happy flows&lt;/li&gt;
  &lt;li&gt;step 2: write &lt;strong&gt;unit&lt;/strong&gt; tests for reusable parts and code without coverage&lt;/li&gt;
  &lt;li&gt;step 3: write very few &lt;strong&gt;e2e&lt;/strong&gt; tests only for the most business critical flows&lt;/li&gt;
  &lt;li&gt;step 4: use &lt;strong&gt;metrics, tracing, logging&lt;/strong&gt; to identify anomalies on production&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://tech.bedrockstreaming.com/2021/09/06/web-best-practices.html&quot;&gt;In Bedrock‚Äôs frontend teams&lt;/a&gt;, we are aligned with these strategy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Static testing is a compulsory stage in any project start-up.&lt;/li&gt;
  &lt;li&gt;We have a lot of unit and integration tests (which can be viewed as e2e tests, but we only test the frontend part with mocked backend and 3rd parties).&lt;/li&gt;
  &lt;li&gt;A manual homologation phase before deploying any new release run e2e tests: this is a current project to automate most of these tests to save time in the process.&lt;/li&gt;
  &lt;li&gt;Production monitoring is one of our mantras: our former boss used to say that &lt;em&gt;‚Äúa non-monitored project is not in production‚Äù&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A &lt;a href=&quot;https://x.com/rauchg/status/807626710350839808&quot;&gt;tweet&lt;/a&gt; from &lt;a href=&quot;https://x.com/rauchg&quot;&gt;Guillermo Rauch&lt;/a&gt; can perfectly conclude this topic:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Write tests. Not too many. Mostly integration.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;facing-frontends-existencial-crisis---ryan-carniato&quot;&gt;Facing Frontend‚Äôs Existencial Crisis - Ryan Carniato&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;üìπ Watch the &lt;a href=&quot;https://gitnation.com/contents/solidjs-tba&quot;&gt;video&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ryan shows why JS frameworks, especially React, have recently evolved using new concepts to reduce the runtime at page load.&lt;/p&gt;

&lt;p&gt;The size of pages has been increasing over the years. In particular because &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot;&gt;SPAs&lt;/a&gt; have gained ground in the web world. SPAs are costly because of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;code execution and evaluation&lt;/strong&gt;,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;code bundle size&lt;/strong&gt;,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;payload (HTML &amp;amp; data) size&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the same time, devices have improved their performance, but not all of them. Connectivity can also be a limiting factor, depending on the context of use. As a result, we are faced with a real fact: an app with client-side rendering is slower to display and interact than an app with server-side rendering.&lt;/p&gt;

&lt;p&gt;In order to reduce each of these three costly aspects, Ryan mentions three concepts that new versions of recent JS frameworks, such as React 19, are developing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;islands&lt;/strong&gt;: splitting the page in several blocks, and render those which never change on server-side only,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;server components&lt;/strong&gt;: close to the island concept but with the ability to handle state persistence over the client navigation,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;resumability&lt;/strong&gt;: the ability to defer the hydratation of components until an interaction is requested.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want more details about concepts developed by Ryan, you can read his &lt;a href=&quot;https://dev.to/this-is-learning/islands-server-components-resumability-oh-my-319d&quot;&gt;article&lt;/a&gt; on this subject.&lt;/p&gt;

&lt;h3 id=&quot;invisible-hand-of-react-performance---ivan-akulov&quot;&gt;Invisible Hand of React Performance - Ivan Akulov&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;üìπ Watch the &lt;a href=&quot;https://gitnation.com/contents/react-performance-past-and-future&quot;&gt;video&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Like &lt;a href=&quot;https://gitnation.com/contents/react-internals&quot;&gt;Charlotte Isambert‚Äôs explanation of how Suspense works&lt;/a&gt;, this talk takes us into the inner workings of React. It is often interesting to understand how the library you are using works under the hood so that you can use it properly.&lt;/p&gt;

&lt;p&gt;By comparing behaviors between the latest React versions, Ivan explains:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; has optimized the browser layout and paint calculation flow comparing to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;How &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setState&lt;/code&gt; batching have been optimized in React 18&lt;/li&gt;
  &lt;li&gt;Why the freeze experience if the user interacts during the hydratation phase is much better by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Suspense&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-you-should-use-redux-in-2024---mark-erikson&quot;&gt;Why You Should Use Redux in 2024 - Mark Erikson&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;üìπ Watch the &lt;a href=&quot;https://gitnation.com/contents/why-you-should-use-redux-in-2024&quot;&gt;video&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At Bedrock, &lt;a href=&quot;https://tech.bedrockstreaming.com/2016/07/04/migrate-smoothly-flux-isomorphic-app-to-redux.html&quot;&gt;we have been using Redux since 2016&lt;/a&gt;, and we continue to use it. So Mark‚Äôs arguments will certainly confirm our choice!&lt;/p&gt;

&lt;p&gt;Mark is the creator of &lt;a href=&quot;https://redux-toolkit.js.org/&quot;&gt;Redux Toolkit&lt;/a&gt;. He begins by detailing the pros and cons of using Redux in relation to various aspects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Flux-style indirection via dispatching actions instead of direct state mutations&lt;/li&gt;
  &lt;li&gt;A single global centralized store&lt;/li&gt;
  &lt;li&gt;State updates via reducers and slices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then Mark presents the arguments why he thinks using Redux in 2024 is a good choice:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Provides a consistent architecture pattern for apps&lt;/li&gt;
  &lt;li&gt;Better understanding of what‚Äôs happening in the app&lt;/li&gt;
  &lt;li&gt;Widely used&lt;/li&gt;
  &lt;li&gt;Well documented&lt;/li&gt;
  &lt;li&gt;Better update behavior than React Context&lt;/li&gt;
  &lt;li&gt;Redux Toolkit provides built-in tools standard use cases&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://redux-toolkit.js.org/rtk-query/overview&quot;&gt;RTK Query&lt;/a&gt; data fetching and caching layer&lt;/li&gt;
  &lt;li&gt;Works great with Typescript&lt;/li&gt;
  &lt;li&gt;Designed to work with React but still UI-agnostic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since 2016 we have been trying at Bedrock to streamline the way we use Redux in JS projects by applying &lt;a href=&quot;https://tech.bedrockstreaming.com/2020/04/27/react-redux-pitfalls-and-best-pratices.html&quot;&gt;some best practices&lt;/a&gt;.
We also have been adopting &lt;a href=&quot;https://tech.bedrockstreaming.com/2022/06/08/migration-progressive-vers-redux-toolkit.html&quot;&gt;Redux Toolkit&lt;/a&gt; for some time with this in mind. And we are always open to new ways of managing state in apps. For example, we are currently testing &lt;a href=&quot;https://tech.bedrockstreaming.com/2023/02/08/projet-xstate.html&quot;&gt;XState&lt;/a&gt; to manage the state of our player.&lt;/p&gt;

&lt;h3 id=&quot;case-study-building-accessible-reusable-react-components-at-github---siddharth-kshetrapal&quot;&gt;Case Study: Building Accessible Reusable React Components at GitHub - Siddharth Kshetrapal&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;üìπ Watch the &lt;a href=&quot;https://gitnation.com/contents/case-study-building-accessible-reusable-react-components-at-github&quot;&gt;video&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The talk by Sid focuses on building accessible React components, and emphasises on the importance of using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Semantics&quot;&gt;correct HTML elements&lt;/a&gt; and &lt;a href=&quot;https://www.w3.org/TR/wai-aria-1.2/&quot;&gt;ARIA roles&lt;/a&gt; to enhance web accessibility.&lt;/p&gt;

&lt;p&gt;Sid highlights specific examples, such as &lt;a href=&quot;https://www.w3.org/WAI/ARIA/apg/patterns/tabs/&quot;&gt;navigating tab lists&lt;/a&gt; and &lt;a href=&quot;https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/&quot;&gt;handling conditional checkboxes&lt;/a&gt;, explaining how ARIA roles and properties can make web interfaces more accessible, especially for screen reader users.&lt;/p&gt;

&lt;p&gt;What we remember from this talk:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Importance of using correct HTML elements and ARIA roles for accessibility&lt;/li&gt;
  &lt;li&gt;Implementation of ARIA roles like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tablist&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tab&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aria-selected&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Significance of keyboard navigation and ARIA states/properties in accessibility&lt;/li&gt;
  &lt;li&gt;Design considerations for accessibility, including using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aria-disabled&lt;/code&gt; over &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disabled&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;whats-next-for-us&quot;&gt;What‚Äôs next for us&lt;/h3&gt;

&lt;p&gt;We came away from these conferences with the feeling that we had adopted the right approach in the past few years for our JS projects, whether in terms of architecture, maintainability or testing strategy. However, we saw that we shouldn‚Äôt miss the next steps regarding &lt;strong&gt;accessibility&lt;/strong&gt; (an improvement project is underway for the end of year) and &lt;strong&gt;performances&lt;/strong&gt;, especially taking into account the new way of rendering server-side with React 19 (while &lt;a href=&quot;https://tech.bedrockstreaming.com/2014/12/04/isomorphic-single-page-app-parfaite-react-flux&quot;&gt;we pioneered the use of React with SSR in 2014&lt;/a&gt;). We will be sure to keep you informed of our progress!&lt;/p&gt;</content><author><name>[&quot;f_dubost&quot;, &quot;y_frommelt&quot;]</name></author><category term="conference" /><category term="frontend" /><category term="react" /><category term="javascript" /><summary type="html">The Frontend Bedrock teams were present at the 2024 edition of the JS Nation and React Summit conferences in Amsterdam on 13 &amp;amp; 14 June. We would like to highlight and share some of the subjects we find relevant about our favourite language and framework üôÇ Feel free to explore them further if you are interested.</summary></entry><entry><title type="html">How Special Event Page allowed us to handle more than 1 million of users</title><link href="https://tech.bedrockstreaming.com/2024/08/07/euro-resiliency-special-event-page.html" rel="alternate" type="text/html" title="How Special Event Page allowed us to handle more than 1 million of users" /><published>2024-08-07T00:00:00+00:00</published><updated>2024-08-07T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2024/08/07/euro-resiliency-special-event-page</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2024/08/07/euro-resiliency-special-event-page.html">&lt;p&gt;Earlier this year took place the &lt;a href=&quot;https://www.uefa.com/euro2024/&quot;&gt;Euro soccer competition&lt;/a&gt;, spanning over a month and with thousands of people tuning all over the world to watch the matches. One of our customers, &lt;a href=&quot;https://www.6play.fr/&quot;&gt;M6+&lt;/a&gt;, was streaming several of these games - And during the competition, hundreds of thousands of browsers, phones and TVs were able to seamlessly stream the matches with no major issue at all. It was, however, no easy feat to reach that state. How did we do that? What were the challenges we faced, the solutions we envisioned? In this article, we‚Äôll discuss one of the features we developed specifically for the Euro: something that we called the &lt;strong&gt;‚ÄúSpecial Event Page‚Äù&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-need-behind-the-special-event-page&quot;&gt;The need behind the Special Event Page&lt;/h2&gt;

&lt;p&gt;This feature was actually first developed back in 2021, for a similar reason: yet another Euro soccer tournament! Back then, it was a very simple feature: display a page to the user, once per session and prior to any kind of backend call, that would prompt them to go to the football. Here‚Äôs what it looked like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-08-07-euro-resiliency-special-event-page/Old_SEP.png&quot; alt=&quot;Photo of the old Special Event page, in 2021&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It was a very simple page (no background, only the two teams and two buttons were displayed), which was only developed for the Web clients, but it served its purpose.
For every soccer evening, we would handle far more traffic than what we usually handled. If each one of these users would load a personalized homepage, search for a program, navigate around the app and do all kind of other actions, then it wouldn‚Äôt take long for our backend servers to explode under the pressure, especially as most users who want to watch a football match arrive ‚Äúat the same time‚Äù, over a few minutes before it starts, which makes it difficult for our servers to scale accordingly. Each user that saw that Special Event page and clicked on the Live button was one that was immediately directed to their content, &lt;strong&gt;without any kind of backend call&lt;/strong&gt;. It was a very simple solution, it worked very well, felt great for our users, and it allowed us to alleviate a lot of the pressure our backend APIs would have otherwise faced.&lt;/p&gt;

&lt;p&gt;At the same time, the Special Event page was very useful for our end users. Enabled a few minutes before the match, and staying available for the entire duration, it allowed any new user that was arriving to the platform to &lt;strong&gt;quickly be able to reach the corresponding live, without spending time searching for it beforehand&lt;/strong&gt;, directly reducing friction time.&lt;/p&gt;

&lt;p&gt;However, this was far from a perfect solution, as it presented a few issues that we needed to fix in order to be ready for the Euro 2024:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;This page was &lt;strong&gt;entirely managed by the Web team&lt;/strong&gt;. Our customer did not have any input on it, if they wanted to make a change they‚Äôd have to request it, and we‚Äôd then have to integrate it in our web application, and then deploy it, preventing any last-minute modifications. We needed a process that could be documented, followed, and would allow lightning-fast modifications to the Special Event page.&lt;/li&gt;
  &lt;li&gt;As it was only managed by the Web team, &lt;strong&gt;the traffic generated by phones and TVs did not benefit from this feature&lt;/strong&gt;. This was a major issue, as these devices could prove to be a lot of traffic. For example, usage of mobile devices suddenly spiked at every goal, with a lot of users in the street taking out their phone to check out what happened when they heard screams around them. We needed a new solution that could impact all platforms, not just the Web.&lt;/li&gt;
  &lt;li&gt;It was overall not pretty üòÖ We ourselves weren‚Äôt really huge fans of the old page, we wanted a new one that‚Äôd be more ‚ú® &lt;em&gt;shiny&lt;/em&gt; ‚ú®&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With all of these in mind, in preparation for the Euro of this year, we began to create what would be the new Special Event Page.&lt;/p&gt;

&lt;h2 id=&quot;attack-plan&quot;&gt;Attack plan&lt;/h2&gt;

&lt;p&gt;One of our first goals was to make sure that most platforms (with a target goal of &lt;strong&gt;more than 90% of them&lt;/strong&gt;) would get access to that feature. If we wanted to be able to sustain as much traffic as possible without hiccup, we‚Äôd have to reach as many users as possible in one shot, and not spend time working on device-specific implementations. For this reason, we decided to opt for &lt;strong&gt;a backend-first strategy&lt;/strong&gt;: ideally the work on different fronts would be minimal, and our backend would be responsible to handle and answer the Special Event page whenever it is needed.&lt;/p&gt;

&lt;p&gt;After consideration, we decided to go for &lt;strong&gt;a Cookie-based solution&lt;/strong&gt;. When one of our fronts would request the homepage, for example, the request would first be caught by our CDN. It‚Äôd check for the existence of a given cookie in that request. If the cookie was present, then the user already saw the special event page and we‚Äôd let the request go through. If the cookie was not present, then we‚Äôd return the Special Event page to the user, along with &lt;strong&gt;a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set-Cookie&lt;/code&gt; header that would save that cookie to the user‚Äôs device&lt;/strong&gt;, preventing them from seeing the Special Event page again for a given duration.
The Special event page content would be a static, non-personalized version of a page that resembled one our backend API could return for the homepage, hosted in the cloud. We‚Äôd then be able to edit that page on the fly without bothering the frontend teams.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-08-07-euro-resiliency-special-event-page/Request_Response_graph.png&quot; alt=&quot;Request/Response graph showing the CDN send a Special Event page to a request without cookie, and the usual page if the cookie is present&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With this solution, we also reaped another benefit: phone apps. When a new version of the application is released, not everyone always updates theirs. We could require an update, but it‚Äôs not really a good experience for a user to be prompted to update their app ever-so-often (and it can translate into a slight portion of our audience choosing to uninstall the app instead), so that‚Äôs a mean we wish to avoid as much as possible. With the solution described above, managing everything using nothing but cookies and http headers meant that not a single line of code needed to be written by our frontend teams, so aside from one small change to enable cookie storage (That we could plan for long in advance), &lt;strong&gt;no new version was needed&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;However, it wasn‚Äôt perfect either.&lt;/p&gt;

&lt;h2 id=&quot;web-challenges--cookies-and-ssr&quot;&gt;Web challenges : Cookies and SSR&lt;/h2&gt;

&lt;p&gt;The first issue we encountered, we probably should‚Äôve guessed earlier that it would happen: cross-domain cookies. While cookies work wonders when they are set by the same domain that‚Äôs using them, here, our cookies were set on &lt;a href=&quot;https://www.6play.fr/&quot;&gt;6play.fr&lt;/a&gt; by the domain &lt;a href=&quot;https://layout.6cloud.fr&quot;&gt;6cloud.fr&lt;/a&gt;. At first, when we tested locally, this wasn‚Äôt an issue.&lt;/p&gt;

&lt;p&gt;However, nowadays, as a mean to ensure users privacy, &lt;strong&gt;most browsers block these kind of cookies&lt;/strong&gt; to prevent cross-domain tracking. While our cookies weren‚Äôt trying to gather anything from our users, they were blocked nonetheless! With no existing way of indicating that this was a functional cookie (as it‚Äôd otherwise probably be abused by these exact tracking tools that browsers aim to block üòÖ), we had to find another solution specifically for the Web. We ended up having to code a second logic on the Web code directly, detecting whenever a Special Event page was displayed and setting a cookie from the website itself, to prevent this third-party cookie blocking. Even though this required a bit more code, this ended up working like a charm for the web.&lt;/p&gt;

&lt;p&gt;The second issue we encountered was with &lt;strong&gt;Server-Side Rendering&lt;/strong&gt;, that the Web (again!) use plenty (we talked about this a while ago, &lt;a href=&quot;https://tech.bedrockstreaming.com/2017/05/17/spa-mode-isomorphism-js&quot;&gt;right here!&lt;/a&gt;). When a page is requested, the SSR first renders the page on the server, and serves it to the client: it allows a user to see an immediate result, while their own device is processing the page. That result is also served to web crawlers such as Google SEO robots! However, in our architecture, SSR responses are not user-specific, and &lt;strong&gt;we can‚Äôt detect cookies of each user on the server side&lt;/strong&gt;. As a result, the server would always respond the Special Event Page, and every user would see it for a split second before the client-side code takes over again. Moreover, it‚Äôd completely break our SEO! To prevent that issue, we chose to whitelist the IP addresses of our servers, in order to specify to our CDN not to send it the Special Event page under any circumstances.&lt;/p&gt;

&lt;h2 id=&quot;final-result&quot;&gt;Final result&lt;/h2&gt;

&lt;p&gt;With these small issues now behind us, the Special Event was ready to be released. We prepared the static files, configured the last details for the cookie duration, and voil√†!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-08-07-euro-resiliency-special-event-page/New_SEP.png&quot; alt=&quot;Photo of the new Special Event page, in 2024&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As soon as the feature came live, we could instantly see the impact it had on our traffic, with &lt;strong&gt;the pressure on our servers diminishing drastically&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2024-08-07-euro-resiliency-special-event-page/SEP_graph_effic.png&quot; alt=&quot;Graph displaying the proportion of Special Event page distributed, with around 70% of pages being the Special Event Page once enabled&quot; /&gt;
&lt;img src=&quot;/images/posts/2024-08-07-euro-resiliency-special-event-page/SEP_response_decrease.png&quot; alt=&quot;Graph displaying the amount of specific pages response, decreasing by almost 2 times when the Special Event page was displayed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While the Special Event page was a success, enabling our users to reach the soccer matches with nothing more than &lt;strong&gt;one single click&lt;/strong&gt;, while at the same time allowing us to reduce a lot of the incoming traffic on our backend servers, it was not the only feature that we developed to prepare for such a massive event. We also worked on quite a few topics, such as the &lt;em&gt;layout at edge&lt;/em&gt;, or a huge workshop on a way to &lt;em&gt;load-test efficiently our services&lt;/em&gt;. We will communicate about these at some point in the future, so keep an eye out for this!&lt;/p&gt;</content><author><name>Bedrock</name></author><category term="resilience" /><category term="frontend" /><category term="back-for-front" /><category term="2024" /><summary type="html">Earlier this year took place the Euro soccer competition, spanning over a month and with thousands of people tuning all over the world to watch the matches. One of our customers, M6+, was streaming several of these games - And during the competition, hundreds of thousands of browsers, phones and TVs were able to seamlessly stream the matches with no major issue at all. It was, however, no easy feat to reach that state. How did we do that? What were the challenges we faced, the solutions we envisioned? In this article, we‚Äôll discuss one of the features we developed specifically for the Euro: something that we called the ‚ÄúSpecial Event Page‚Äù.</summary></entry><entry><title type="html">Bedrock Dev Facts #20</title><link href="https://tech.bedrockstreaming.com/2024/07/26/bedrock-dev-facts-20.html" rel="alternate" type="text/html" title="Bedrock Dev Facts #20" /><published>2024-07-26T00:00:00+00:00</published><updated>2024-07-26T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2024/07/26/bedrock-dev-facts-20</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2024/07/26/bedrock-dev-facts-20.html">&lt;p&gt;Bien que cela fasse pr√®s de 18 mois que nous n‚Äôavons pas publi√© une nouvelle fourn√©e de Dev Facts, nos √©quipes ont continu√©s √† alimenter la pile des perles des d√©veloppeurs.
Et du coup, double fourn√©e !!&lt;/p&gt;

&lt;h2 id=&quot;tester-cest-douter&quot;&gt;Tester, c‚Äôest douter&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;A : Attention, je vais peut-√™tre (je l‚Äôesp√®re) faire sonner [la prod]&lt;/li&gt;
    &lt;li&gt;B : A, toujours l√† pour utiliser la prod comme son bac √† sable&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;jai-appris-√†-lire-je-ne-souhaite-√ßa-√†-personne&quot;&gt;J‚Äôai appris √† lire, je ne souhaite √ßa √† personne&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Nan mais en plus je sais m√™me pas ce qu‚Äôil faut faire ! Le ticket il est l√†, y a plein de mots !&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;professionnel-jusqu√†-lassiette&quot;&gt;Professionnel jusqu‚Äô√† l‚Äôassiette&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;A : Mais moi quand je commande ma salade moulin, je fais gaffe a prendre des trucs qui vont ensembles ! Genre, chou rouge et betterave, c‚Äôest des couleurs compl√©mentaires !&lt;/li&gt;
    &lt;li&gt;B : Ah bah tout de suite on voit le dev qui se d√©brouille en CSS ici&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;la-mutualisation&quot;&gt;La mutualisation&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;c‚Äôest l‚Äôavantage d‚Äôavoir une solution core, tu retrouveras s√ªrement les m√™mes bugs chez les autres clients&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;les-doigts-devraient-suffir&quot;&gt;Les doigts devraient suffir&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;C‚Äôest le moment o√π je croise les fesses&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;le-d√©bat-mode-demploi&quot;&gt;Le d√©bat, mode d‚Äôemploi&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;A : en fait c‚Äô√©tait vachement mieux&lt;/li&gt;
    &lt;li&gt;B : ben non&lt;/li&gt;
    &lt;li&gt;A : ¬Ø\&lt;em&gt;(„ÉÑ)&lt;/em&gt;/¬Ø&lt;/li&gt;
    &lt;li&gt;C :  j‚Äôaime les d√©bats argument√©s ü§£&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;quand-les-admins-d√©couvrent-la-vie-r√©elle&quot;&gt;Quand les admins d√©couvrent la vie r√©elle&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Super faut respecter les r√®gles quoi&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;quand-il-faut-√©teindre-un-client&quot;&gt;Quand il faut √©teindre un client&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;J‚Äôai l‚Äôimpression de supprimer mon skyblog&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;cest-un-peu-plus-moins-bien&quot;&gt;C‚Äôest un peu plus moins bien&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;C‚Äôest cute dans le c√¥t√© d√©gueulasse&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;le-t√©l√©travail-v2&quot;&gt;Le t√©l√©travail v2&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;A : Il fait plus chaud dans les couloirs que dans les bureaux.&lt;/li&gt;
    &lt;li&gt;B : On a qu‚Äô√† d√©placer les bureaux dans les couloirs. On fera du t√©l√©pr√©sentiel&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;lentrainement-cest-important&quot;&gt;L‚Äôentrainement, c‚Äôest important&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Mon temps de r√©action en r√©union n‚Äôest plus tr√®s bon depuis que j‚Äôai arr√™t√© de jouer a StarCraft.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;un-d√©veloppeur-un-vrai-avec-pleins-de-doigts&quot;&gt;Un d√©veloppeur, un vrai, avec pleins de doigts&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Je fais pas un copier-coller, je retape doigt par doigt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;l√©chelle-sociale-en-entreprise&quot;&gt;L‚Äô√©chelle sociale en entreprise&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Un alternant : Je peux avoir un stagiaire moi aussi ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;quand-le-respect-sest-enfui&quot;&gt;Quand le respect s‚Äôest enfui&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Vas-y r√©p√®te, je n‚Äô√©coutais pas&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;ou-alors-cest-le-9√®me-jour-de-la-semaine&quot;&gt;Ou alors, c‚Äôest le 9√®me jour de la semaine&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;C‚Äôest le 5 le dernier vendredi du mois ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;quand-√ßa-√©choue-vraiment&quot;&gt;Quand √ßa √©choue vraiment&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Au lieu d‚Äô√©chouer avec succ√®s √ßa √©choue avec √©chec&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;pas-vu-pas-pris&quot;&gt;Pas vu, pas pris&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;C‚Äôest une feature potentiellement pas impactante tant que tu ne l‚Äôutilises pas&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;cest-pas-faux&quot;&gt;C‚Äôest pas faux&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Ca sert √† rien d‚Äôavoir un truc qui sert √† rien&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;ling√©niosit√©&quot;&gt;L‚Äôing√©niosit√©&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Ah ? Ma molette est en panne ‚Ä¶. tant pis je vais scroller au clic&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;cest-pas-faux-bis&quot;&gt;C‚Äôest pas faux, bis&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;C‚Äôest cool les choses bien&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;ils-ne-savaient-pas-que-c√©tait-impossible-alors-ils-lont-fait&quot;&gt;Ils ne savaient pas que c‚Äô√©tait impossible, alors ils l‚Äôont fait&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;On est oblig√©s de pouvoir puisque c‚Äôest la seule solution&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;il-na-visiblement-pas-eu-son-stagiaire&quot;&gt;Il n‚Äôa visiblement pas eu son stagiaire&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Un alternant: Je vois pas mon code si je pleure&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;vous-faites-quoi-mercredi-soir-&quot;&gt;Vous faites quoi mercredi soir ?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;J‚Äôai une nouvelle passion pur√©e de piments qui m‚Äôa bien occup√©e durant le dernier week-end&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;J‚Äôadore ce genre de phrases. Je suis 100% susceptible d‚Äôen faire sur plein de sujets cuisine. Mais √† chaque fois je ne peux m‚Äôemp√©cher de penser qu‚Äôon pourrait √™tre invit√© √† un diner de cons avec ce genre de phrase üòÇ&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;de-la-sagesse-il-faut-faire-preuve&quot;&gt;De la sagesse, il faut faire preuve&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;La vie est un breaking-change&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;le-positivisme&quot;&gt;Le positivisme&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;‚ÄúNon‚Äù, c‚Äôest pas n√©gatif&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;a-la-pointe-de-la-technologie&quot;&gt;A la pointe de la technologie&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;On a commenc√© les travaux de refonte auj üòÑ. (injection de dependance, puis on enchaine sur l‚Äôutilisation des ‚Äúnouvelles‚Äù api apple (qui datent d‚Äôil y a 4 ans d√©j√† üòÑ))&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;linflation-cest-compliqu√©&quot;&gt;L‚Äôinflation, c‚Äôest compliqu√©&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Ouais y a l‚Äôinflation, c‚Äôest bien pour √ßa que tu me gonfles ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;la-quadrature-du-cercle-new-gen&quot;&gt;La quadrature du cercle new gen&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Je suis entrain de tourner en rond dans un triangle&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;but-why-&quot;&gt;But why ?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Parce que parler lascivement a une chaise, j‚Äôai jamais tent√©&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;exemple-tr√®s-parlant&quot;&gt;Exemple tr√®s parlant&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;C‚Äôest √©crit plus petit que derri√®re les paquets de c√©r√©ales&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;il-fait-aussi-du-th√©-&quot;&gt;Il fait aussi du th√© ?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Je n‚Äôai pas la science infuse, je suis juste un connard qui fait des commentaires.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;cest-pas-faux-ter&quot;&gt;C‚Äôest pas faux, ter&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Alors c‚Äôest moche, parce qu‚Äôen vrai, c‚Äôest pas tr√®s beau&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;je-ne-dirais-pas-que-√ßa-a-√©chou√©-je-dirais-que-√ßa-na-pas-march√©&quot;&gt;Je ne dirais pas que √ßa a √©chou√©, je dirais que √ßa n‚Äôa pas march√©&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;C‚Äôest pas du DDOS, c‚Äôest un stress test pas vraiment sous contr√¥le&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-yes-need-the-no-to-win-against-the-no&quot;&gt;The yes need the no, to win, against the no&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Ca peut √™tre long √† √©crire tr√®s vite&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;avoir-une-passion-cest-important&quot;&gt;Avoir une passion, c‚Äôest important&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Casser les couilles, c‚Äôest ma passion&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;le-trou-noir-de-la-productivit√©&quot;&gt;Le trou noir de la productivit√©&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;‚ÄòTain je sais pas si c‚Äôest votre ilot, mais j‚Äôai vraiment l‚Äôimpression de rien foutre ici&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;un-chef-cest-fait-pour-cheffer&quot;&gt;Un chef, c‚Äôest fait pour cheffer&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;A : C‚Äôest marrant mais on a jamais fait de pair ensemble !&lt;/li&gt;
    &lt;li&gt;B : En m√™me temps, je dev pas‚Ä¶ et toi non plus‚Ä¶&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;lagenda-cest-so-2010&quot;&gt;L‚Äôagenda, c‚Äôest so 2010&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Un lead √† un membre (appelons le T) de son √©quipe : Bon, tu nous rejoins ?&lt;/li&gt;
    &lt;li&gt;T : ah on a r√©union ?&lt;/li&gt;
    &lt;li&gt;Le lead : ben on est en retro surtout l√†&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;tout-d√©pend-de-la-zone&quot;&gt;Tout d√©pend de la zone&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;A : Tout depend de la policy&lt;/li&gt;
    &lt;li&gt;B : et pas de la gendarmerie ?&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;rtfm&quot;&gt;RTFM&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Putain lire la doc √ßa sert !&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;pour-un-peu-quil-soit-cach√©-on-est-foutu&quot;&gt;Pour un peu qu‚Äôil soit cach√©, on est foutu&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;le jwt actuel expire le  26/11/5189 20:26:26. (j‚Äôesp√®re que √ßa suffira)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;on-ma-dit-de-regarder-sil-y-a-des-erreurs-pas-sil-marche&quot;&gt;On m‚Äôa dit de regarder s‚Äôil y a des erreurs, pas s‚Äôil marche&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;A : Dites, quelqu‚Äôun arrive a acc√©der a notre outil de monitoring ?&lt;/li&gt;
    &lt;li&gt;B : Non, mais je crois que Vendredi dernier il √©tait d√©j√† cass√©&lt;/li&gt;
    &lt;li&gt;C : ‚Ä¶ Mais tu as mis RAS sur ton rapport de Monitoring ?&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;cest-pour-engager-un-engagement&quot;&gt;C‚Äôest pour engager un engagement&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Il faut qu‚Äôon sache ce qu‚Äôil y a contractuellement dans le contrat‚Ä¶&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;apr√®s-le-no-code-le-code-√†-emporter&quot;&gt;Apr√®s le no code, le code √† emporter&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;A :  On se fait un point ‚Äúplan d‚Äôactions‚Äù si tu veux.&lt;/li&gt;
    &lt;li&gt;B : Pourquoi pas maintenant ! Tu es sur place ?&lt;/li&gt;
    &lt;li&gt;A : Non, √† emporter !&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;il-na-pas-lhabitude&quot;&gt;Il n‚Äôa pas l‚Äôhabitude&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Oulaaa, mon PC il aime pas quand je travaille&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;cest-pas-faux-quarter&quot;&gt;C‚Äôest pas faux, quarter&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Dell c‚Äôest le Apple de Windows&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;et-tout-√ßa-pour-pas-cher&quot;&gt;Et tout √ßa, pour pas cher&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Avec rien, tu ne fais pas grand chose&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;du-coup-√ßa-ne-fait-pas-grand-chose-&quot;&gt;Du coup, √ßa ne fait pas grand chose ?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Ca allait bien jusqu‚Äô√† ce qu‚Äôon ne fasse rien&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;quand-tu-d√©veloppes-√†-base-de-tnt&quot;&gt;Quand tu d√©veloppes √† base de TNT&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;L√† on pourrait tout casser sans rien faire marcher&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;sudo-make-me-a-sandwich&quot;&gt;Sudo make me a sandwich&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;A : Ma commande marche pas&lt;/li&gt;
    &lt;li&gt;B : Ca me dit un truc, je regarde sur StackOverflow‚Ä¶ Ah oui tient le lien vers le site est violet&lt;/li&gt;
    &lt;li&gt;A : Et du coup ?&lt;/li&gt;
    &lt;li&gt;B : Rajoute un ‚Äìforce.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;et-si-on-utilise-des-carottes-jaunes-&quot;&gt;Et si on utilise des carottes jaunes ?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;J‚Äôai n√©anmoins le sentiment que le client compare des carottes et des patates. Par hasard au d√©but les carottes et les patates (douces) avaient la m√™me couleur, et que maintenant qu‚Äôon a des vraies patates, ca marche plus&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;optimisme-d√©finition&quot;&gt;Optimisme, d√©finition&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Pour le burndown, si on enl√®ve tous les jours ou √ßa stagne, √ßa descend&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;si-mais-tu-les-comprends-plus-tard-quand-tu-nen-as-plus-besoin&quot;&gt;Si, mais tu les comprends plus tard, quand tu n‚Äôen as plus besoin&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;De toutes fa√ßon les blagues de front on ne peux pas les comprendre, elles sont asynchrone&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;en-plus-il-faut-lire-des-choses&quot;&gt;En plus, il faut lire des choses&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;A : J‚Äôai r√©solu notre probl√®me&lt;/li&gt;
    &lt;li&gt;B : Ah cool, c‚Äô√©tait du coup ?&lt;/li&gt;
    &lt;li&gt;A : C‚Äô√©tait une mauvaise lecture de la doc&lt;/li&gt;
    &lt;li&gt;B : Ouais mais leurs docs elles sont trop longues !&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;le-legacy-de-demain-qui-a-√©t√©-fait-hier-mais-vu-daujourdhui&quot;&gt;Le legacy de demain, qui a √©t√© fait hier, mais vu d‚Äôaujourd‚Äôhui&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;C‚Äôest un legacy futur&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;√ßa-nous-est-tous-arriv√©&quot;&gt;√áa nous est tous arriv√©&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Putain, je viens de faire un commit que j‚Äôai appel√© &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--amend&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;le-pianiste&quot;&gt;Le pianiste&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;C‚Äôest mes doigts qui connaissent mon mot de passe, c‚Äôest pas moi&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;√ßa-explique-des-choses-&quot;&gt;√áa explique des choses ‚Ä¶&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Hier j‚Äôai utilis√© mes comp√©tences de dev front, j‚Äôai fait un g√¢teau au chocolat&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;cest-presque-√ßa&quot;&gt;C‚Äôest presque √ßa&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;J‚Äôveux pas faire des features sur la com√®te&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;du-coup-on-passe-la-prod-en-staging-&quot;&gt;Du coup, on passe la prod en staging ?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;La validation a conclut que √ßa marchait en prod mais pas en staging&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;en-signal-de-fum√©e-&quot;&gt;En signal de fum√©e ?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Je sais pas comment je vais dev, ce qui est branch√© a mon √©cran c‚Äôest une cigarette √©lectronique&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;c√©tait-au-tour-du-chien-de-surveiller-lalerting-&quot;&gt;C‚Äô√©tait au tour du chien de surveiller l‚Äôalerting ?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;A : C‚Äôest quoi qui sonne comme √ßa ?&lt;/li&gt;
    &lt;li&gt;B : C‚Äôest le collier de mon chien quand il bouge la t√™te&lt;/li&gt;
    &lt;li&gt;A : Je voulais dire dans notre alerting&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;merci&quot;&gt;Merci&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;A : On sait faire un test atoum&lt;/li&gt;
    &lt;li&gt;B : √Ä tes souhaits&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;il-√©choue-rapidement-peut-√™tre-&quot;&gt;Il √©choue rapidement peut-√™tre ?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Putain le code est tellement optimis√© qu‚Äôil marche plus&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;mais-comme-personne-ne-lit-la-doc-&quot;&gt;Mais comme personne ne lit la doc ‚Ä¶&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;C‚Äôest pas de la magie, c‚Äôest document√©&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;une-histoire-de-marsche&quot;&gt;Une histoire de mar(s|c)h(e)&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Si on Unmarshal puis Marshal, √ßa doit marcher&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;4g-ou-5g-&quot;&gt;4G ou 5G ?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Avez-vous un cable Wi-fi √† me pr√™ter ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;nous-avons-affaire-√†-un-serial-killer&quot;&gt;Nous avons affaire √† un &lt;em&gt;serial killer&lt;/em&gt;&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;A : He is on &lt;em&gt;AirTiTi&lt;/em&gt; (RTT)&lt;/li&gt;
    &lt;li&gt;B : Quoi ?&lt;/li&gt;
    &lt;li&gt;A : En RTT&lt;/li&gt;
    &lt;li&gt;B : Oh, on &lt;em&gt;AirTiTi&lt;/em&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;you-have-to-be-curious&quot;&gt;You have to be curious&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;On a la salle bi curieux&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;on-a-dit-que-le-chef-est-l√†-pour-cheffer&quot;&gt;On a dit que le chef est l√† pour cheffer&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;J‚Äôaimerais bien un assistant, genre un team lead&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;cest-beau-ou-beau-&quot;&gt;C‚Äôest beau ou beau ?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Je t‚Äôai demand√© de constater √† quel point c‚Äôest beau, pas de me dire que c‚Äôest moche&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;quand-tu-vas-trop-loin-dans-lintimit√©-des-gens&quot;&gt;Quand tu vas trop loin dans l‚Äôintimit√© des gens&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Sachez que Mark Zuckerberg transpire beaucoup.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;les-solutions-les-plus-simples&quot;&gt;Les solutions les plus simples&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Mon script qui sort mon PC de veille c‚Äôest mon chien qui passe vers le PC‚ÄØen bougeant la souris&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;encore-quelquun-qui-na-pas-lu-la-doc-avant&quot;&gt;Encore quelqu‚Äôun qui n‚Äôa pas lu la doc avant&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;On va tous mourrir, le BOv3 aussi, mais lui c‚Äôest son jour. J‚Äôai dit pareil pour ma mamie&lt;/li&gt;
    &lt;li&gt;Moi aussi, mais j‚Äôai pas pu la red√©marrer apr√®s&lt;/li&gt;
    &lt;li&gt;T‚Äôas oubli√© de la recompiler&lt;/li&gt;
    &lt;li&gt;üò± J‚Äôai pas recompil√© mamie !&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;au-moins-il-est-indispensable&quot;&gt;Au moins, il est indispensable&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Moi avec le temps, je me suis sp√©cialis√© dans les sujets qu‚Äôaiment pas le reste de la team&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;et-pour-prendre-un-wget-&quot;&gt;Et pour prendre un wget ?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;T‚Äôas pas d‚Äôami prends un Curly, t‚Äôas pas d‚Äô√¢me prends un curl&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;cest-pas-faux-quinquies&quot;&gt;C‚Äôest pas faux, quinquies&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Notre monitoring n‚Äôest fiable que si on peut s‚Äôy fier&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;lynchez-le-&quot;&gt;Lynchez le !&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Mais quoi ? Zelda c‚Äôest pas le personnage principal qu‚Äôon joue dans Zelda&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;et-le-meilleur-pour-la-fin&quot;&gt;Et le meilleur pour la fin&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Y a peu de temps j‚Äô√©tais en train de faire du python, l√† je reviens sur du JS. Et du coup je suis en train de debugger mon site, quand d‚Äôun coup sans que je comprenne pourquoi √† chaque fois que je le reload il imprime une feuille de papier. J‚Äôai mis une heure √† chercher avant de voir que par r√©flexe, j‚Äôai debugg√© mon code en utilisant la commande &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print&lt;/code&gt; au lieu de faire un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Bedrock</name></author><category term="devfacts" /><category term="humour" /><summary type="html">Bien que cela fasse pr√®s de 18 mois que nous n‚Äôavons pas publi√© une nouvelle fourn√©e de Dev Facts, nos √©quipes ont continu√©s √† alimenter la pile des perles des d√©veloppeurs. Et du coup, double fourn√©e !!</summary></entry></feed>