<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://tech.bedrockstreaming.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://tech.bedrockstreaming.com/" rel="alternate" type="text/html" /><updated>2022-11-15T09:27:40+00:00</updated><id>https://tech.bedrockstreaming.com/feed.xml</id><title type="html">Bedrock Tech Blog</title><subtitle>Blog technique de Bedrock</subtitle><entry><title type="html">Un onboarding facilité grâce à la revue de code!</title><link href="https://tech.bedrockstreaming.com/2022/11/15/onboarding-revue-code.html" rel="alternate" type="text/html" title="Un onboarding facilité grâce à la revue de code!" /><published>2022-11-15T00:00:00+00:00</published><updated>2022-11-15T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2022/11/15/onboarding-revue-code</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2022/11/15/onboarding-revue-code.html">&lt;h1 id=&quot;facilitez-lonboarding-de-vos-collègues-grâce-à-la-revue-de-code&quot;&gt;Facilitez l’onboarding de vos collègues grâce à la revue de code!&lt;/h1&gt;

&lt;p&gt;Au sein des équipes de développement, une activité bien connue est celle de la revue de code, et 
plus 
précisément de la &lt;strong&gt;revue du delta du code&lt;/strong&gt;. Il s’agit de l’inspection par nos 
pairs du code proposé par nos soins, qui se trouve ainsi commenté pour répondre aux 
exigences de qualité de l’équipe et du projet.&lt;/p&gt;

&lt;p&gt;Les risques d’incompréhensions inhérents à la communication écrite, de malentendus
ou encore les remarques &lt;em&gt;malheureuses&lt;/em&gt; peuvent rendre cet exercice redouté tant par les 
relecteurs et relectrices 
que 
par celles et ceux dont le code est relu.&lt;/p&gt;

&lt;p&gt;Avant d’arriver chez Bedrock, j’étais un peu 
inquiète. Je savais déjà que les 9 personnes de ma future équipe font tou(te)s de la revue de code. 
&lt;strong&gt;Comment échangerons-nous? Saurai-je faire “bonne impression” via mes commentaires 
sur leur code ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;En arrivant, j’ai été très 
agréablement surprise de découvrir que l’équipe applique un 
standard, celui des conventions de commentaires, &lt;a href=&quot;https://conventionalcomments.org/&quot;&gt;ou conventional comments&lt;/a&gt;. &lt;strong&gt;Grâce à cela, mon 
onboarding a été grandement facilité&lt;/strong&gt; et j’ai découvert une façon plus efficace d’écrire mes 
commentaires !&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt; : cet article est inspiré de ma conférence “&lt;em&gt;Revue de code : on n’est pas 
venu-e-s pour
souffrir !&lt;/em&gt;” donnée à l’occasion du meet-up anniversaire Duchess chez Dataiku en 2022 et &lt;a href=&quot;https://afup.org/talks/4038-revue-de-code-on-n-est-pas-venu-pour-souffrir&quot;&gt;au Forum
PHP 2022&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;1127&quot; height=&quot;773&quot; src=&quot;https://www.youtube.com/embed/LVh6iQtJW2I&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;petit-rappel--pourquoi-faisons-nous-des-revues-de-code-&quot;&gt;Petit rappel : pourquoi faisons-nous des revues de code ?&lt;/h2&gt;

&lt;p&gt;Passer en revue le code proposé par ses co-équipier(e)s est largement répandu dans les 
équipes de développeurs et développeuses. Bien sûr, la qualité du code en elle-même se trouve 
améliorée 
car chacun apporte un regard neuf sur ce qui est proposé, mais ce n’est pas tout. La 
revue de code est également une façon de nous tenir informé(e) de 
l’implémentation de nouvelles features, d’apprendre autant du métier que de la 
technique et enfin, d’apprendre à travailler ensemble.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2022-11-07-code-review-onboarding/code-review.png&quot; alt=&quot;Pourquoi faisons-nous de la code review ?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Voici une 
petite liste non exhaustive de l’intérêt de la revue de code :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Améliorer la qualité et la lisibilité du code grâce aux remarques de toutes les
personnes de l’équipe&lt;/li&gt;
  &lt;li&gt;Appliquer les standards adoptés par l’équipe (et les apprendre !)&lt;/li&gt;
  &lt;li&gt;Détecter et corriger les éventuels bugs fonctionnels&lt;/li&gt;
  &lt;li&gt;Favoriser la collaboration en équipe&lt;/li&gt;
  &lt;li&gt;Former les développeurs et développeuses au fur et à mesure des remarques&lt;/li&gt;
  &lt;li&gt;Partager les responsabilités : en approuvant une pull request ou une merge request, nous
sommes responsables en tant qu’équipe du code ajouté/modifié au tronc commun !&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;et-parfois-on-souffre&quot;&gt;…Et parfois, on souffre&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2022-11-07-code-review-onboarding/parfois-on-souffre.png&quot; alt=&quot;parfois on souffre&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mais parfois, ce n’est pas tout rose. Les commentaires qu’on laisse peuvent vexer. On 
peut nous-même être vexé. Car certains jours, on peut manquer d’empathie. On peut avoir 
l’impression d’être plus compétent(e) en 
critiquant les autres, on veut se rassurer en se montrant plus qualifié(e). On peut également 
être habitué(e) à une culture de la compétition, nous poussant ainsi à faire des remarques désagréables à nos pairs.&lt;/p&gt;

&lt;h2 id=&quot;comment-le-formatage-de-commentaire-a-t-il-amélioré-mon-arrivée-dans-léquipe-&quot;&gt;Comment le formatage de commentaire a-t-il amélioré mon arrivée dans l’équipe ?&lt;/h2&gt;

&lt;p&gt;La standardisation des commentaires a énormément amélioré mon intégration dans 
l’équipe. En effet, grâce à cela :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;J’ai pu rapidement me rendre compte de ce qui était bloquant / non bloquant et ainsi me 
&lt;strong&gt;concentrer sur les actions essentielles et prioritaires&lt;/strong&gt; à mener;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;je n’ai pas eu à me poser de questions sur le ton employé par mes collègues ni sur leur 
intention&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;j’ai pu rapidement faire moi-même des revues de code &lt;strong&gt;sans craindre d’être mal comprise&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;j’ai eu des retours qui m’ont permis de &lt;strong&gt;progresser sur la connaissance du fonctionnel&lt;/strong&gt; et 
des standards de la team.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;améliorer-sa-posture&quot;&gt;Améliorer sa posture&lt;/h2&gt;

&lt;p&gt;Avant de parler du standard, je vous propose de nous interroger sur 
notre posture en tant que développeur et développeuse. Recevoir ou donner des commentaires, ce 
n’est pas aisé pour tous. &lt;strong&gt;Notre ego peut interférer et dégrader la qualité de nos 
échanges avec nos collègues&lt;/strong&gt;. Aussi, avant de chercher à formater nos commentaires, nous pouvons 
nous interroger sur leur contenu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2022-11-07-code-review-onboarding/egoless.png&quot; alt=&quot;Egoless programming&quot; /&gt;&lt;/p&gt;

&lt;p&gt;L’Egoless Programming, proposé par &lt;a href=&quot;https://en.wikipedia.org/wiki/Gerald_Weinberg&quot;&gt;Gerald Weinberg&lt;/a&gt; en 1971 dans son livre &lt;em&gt;The Psychology of 
Computer Programming&lt;/em&gt;, présente une dizaine de commandements pour nous 
aider à progresser.&lt;/p&gt;

&lt;p&gt;Le principe est le suivant : &lt;strong&gt;réduire au minimum les facteurs personnels lors des interactions 
avec ses pairs&lt;/strong&gt;, pour favoriser le travail en équipe et produire le maximum de qualité.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Critiquez le code au lieu des personnes,&lt;/li&gt;
  &lt;li&gt;Soyez factuels sur le code,&lt;/li&gt;
  &lt;li&gt;N’attaquez jamais les personnes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Je vous recommande de regarder cette excellente conférence sur l’egoless programming, où Olivier 
Thelu prend le temps de revenir sur tous les concepts :&lt;/p&gt;

&lt;iframe src=&quot;https://player.vimeo.com/video/728605321?h=60e48e1686&amp;amp;title=0&amp;amp;byline=0&amp;amp;portrait=0&quot; width=&quot;1127&quot; height=&quot;773&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;https://vimeo.com/728605321&quot;&gt;Les 10 commandements de la programmation sans &amp;eacute;go - Olivier Thelu - MiXiT 2022&lt;/a&gt; from &lt;a href=&quot;https://vimeo.com/mixitconf&quot;&gt;MiXiT&lt;/a&gt; on &lt;a href=&quot;https://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Une autre excellente conférence de Kim Laï Trinh, lead développeur, et son &lt;a href=&quot;https://afup.org/talks/3415-auto-critique-de-la-revue-de-code-bienveillante&quot;&gt;“Auto-critique de la 
revue de code
bienveillante”&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;1127&quot; height=&quot;773&quot; src=&quot;https://www.youtube.com/embed/jMzhP1n19e8&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;formatez-vos-commentaires-&quot;&gt;Formatez vos commentaires !&lt;/h2&gt;

&lt;p&gt;Une fois qu’on a adopté une posture qui nous aide à mieux recevoir et donner des commentaires dans le cadre de nos revues de code, on peut réfléchir à la façon dont on les formate.&lt;/p&gt;

&lt;p&gt;Grâce au standard des &lt;a href=&quot;https://conventionalcomments.org/&quot;&gt;conventional comments&lt;/a&gt;, nous disposons d’une convention pour écrire des 
commentaires clairs et visuels et limiter les incompréhensions. Chacun de nous est invité 
à réfléchir à l’intention de son commentaire &lt;strong&gt;avant&lt;/strong&gt; de l’écrire.&lt;/p&gt;

&lt;p&gt;Par exemple, avec ce commentaire qui peut prêter à confusion (le OMG qui signifie “Oh my god” 
peut être autant interprété comme quelque chose de négatif que de positif, notamment ici puisque 
nous n’avons pas le contexte 😈) :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2022-11-07-code-review-onboarding/commentaire-omg.png&quot; alt=&quot;Utilisateur Kittycat dit : &amp;quot;Omg&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ce commentaire peut être préfixé par &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;praise&lt;/code&gt;, ce qui signifie éloge. Cela change radicalement 
le ton du commentaire.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2022-11-07-code-review-onboarding/commentaire-praise-omg.png&quot; alt=&quot;praise : Omg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Voici un autre exemple laconique : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Poubelle&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2022-11-07-code-review-onboarding/commentaire-poubelle.png&quot; alt=&quot;Poubelle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Celui-ci peut être amélioré en étant préfixé par l’étiquette &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nitpick&lt;/code&gt;, qui signifie 
“tatillonner”, ce qui diminue également son ton dramatique. De plus, l’urgence peut être 
indiquée (ici, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;non-bloquant&lt;/code&gt;) et le contexte est décrit et peut être exploité grâce à un patch 
proposant un code de remplacement.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2022-11-07-code-review-onboarding/commentaire-nitpick.png&quot; alt=&quot;nitpick (non-bloquant): le résultat peut être directement retourné (patch)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La compréhension du commentaire est facilitée par l’effort fourni pour ajouter le maximum de
contexte possible. On gagne en lisibilité grâce à la catégorisation (étiquette), qui nous permet
également d’immédiatement savoir de quoi on parle. Par exemple, une &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;question&lt;/code&gt; ne sera pas lue
de la même façon qu’une &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suggestion&lt;/code&gt; !&lt;/p&gt;

&lt;p&gt;La contextualisation permet de savoir si on traite le retour immédiatement ou si on ouvre une
nouvelle pull request plus tard, pour rémedier au point soulevé. On limite ainsi les
quiproquos ou les pertes de temps sur des actions non prioritaires.
Et surtout, on limite les mauvaises impressions sur le ton employé.&lt;/p&gt;

&lt;h3 id=&quot;description-du-standard&quot;&gt;Description du standard&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;label&amp;gt; [decorations]: &amp;lt;subject&amp;gt;

[discussion]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;étiquette (label)&lt;/strong&gt; : “étiquette” pour signifier de quel genre de commentaire il s’agit&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sujet (subject)&lt;/strong&gt; : le commentaire en lui-même&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;contexte supplémentaire (decorations)&lt;/strong&gt; (optionnel)  : labels supplémentaires pour donner plus d’indications (entre parenthèses, séparés par des virgules).
Exemple : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;non-blocking&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blocking&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt; …&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;discussion (optional)&lt;/strong&gt; : contexte, raisonnement ou tout autre élément pour aider à 
comprendre le « pourquoi » et les « prochaines étapes » pour résoudre le commentaire&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;les-labels&quot;&gt;Les labels&lt;/h3&gt;

&lt;p&gt;Voici la liste de labels ou étiquettes, extraits du standard :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;praise&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nitpick&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suggestion&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;issue&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;todo&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;question&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thought&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chore&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;typo&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;polish&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;quibble&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;L’équipe est, bien entendu, libre de choisir ou d’inventer ses labels ! Chez nous, le choix a été 
fait de respecter le standard tel qu’il est proposé, mais cela pourrait être rediscuté si besoin.&lt;/p&gt;

&lt;p&gt;Voici quelques définitions (pour le reste, &lt;a href=&quot;https://conventionalcomments.org/&quot;&gt;se référer au site du standard&lt;/a&gt;):&lt;/p&gt;

&lt;h4 id=&quot;praise-éloge&quot;&gt;Praise (éloge)&lt;/h4&gt;

&lt;p&gt;Grâce à ce commentaire, on souligne quelque chose de positif, on encourage la personne. Bien 
entendu, pas de second degré !&lt;/p&gt;

&lt;h4 id=&quot;suggestion-suggestion&quot;&gt;Suggestion (suggestion)&lt;/h4&gt;

&lt;p&gt;Les suggestions sont la majorité des commentaires qu’on laisse, en général. Il s’agit 
d’améliorations à apporter au sujet actuel. On cherchera à être explicite et clair,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;expliquer en quoi il s’agit d’une amélioration;&lt;/li&gt;
  &lt;li&gt;utiliser des patchs;&lt;/li&gt;
  &lt;li&gt;utiliser des décorations &lt;strong&gt;blocking&lt;/strong&gt; ou &lt;strong&gt;non-blocking&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;issue-problème&quot;&gt;Issue (problème)&lt;/h4&gt;

&lt;p&gt;Grâce aux issues, on met en évidence des problèmes spécifiques. Idéalement, on couple ce 
commentaire avec une &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Suggestion&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;thought-pensée&quot;&gt;Thought (pensée)&lt;/h4&gt;

&lt;p&gt;Les pensées sont des idées qui surgissent lors de la relecture du code. Celles-ci ne sont pas 
bloquantes par nature, mais sont extrêmement précieuses, car elles peuvent conduire à des 
possibilités de mentorat.&lt;/p&gt;

&lt;h2 id=&quot;appropriez-vous-la-méthode-&quot;&gt;Appropriez-vous la méthode !&lt;/h2&gt;

&lt;p&gt;Bien entendu, vous n’êtes pas obligé d’utiliser toute la liste de labels proposée par le 
standard. Vous pouvez en choisir quelques uns, ou bien carrément vous en inspirer et créer les 
vôtres. C’est le choix qu’ont fait Camille et son équipe, &lt;a href=&quot;https://www.24joursdeweb.fr/2021/conventional-comments-faire-des-revues-de-code-avec-le-smiley/&quot;&gt;qu’elle décrit dans cet excellent 
article 
sur les conventional Comments et l’utilisation des emojis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ainsi, l’équipe a porté son choix sur une liste d’étiquettes illustrées par des emojis, qui 
traduisent à fois l’intention du commentaire et son urgence.
Voici quelques exemples, tirés de l’article :&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;🥜 peanuts&lt;/code&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;❓ question&lt;/code&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;💬 discussion&lt;/code&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;🚨 alerte&lt;/code&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;🚫 no-go&lt;/code&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;👏 bravo&lt;/code&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⚠️ warning&lt;/code&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;☠️ bad idea&lt;/code&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;✨ magic&lt;/code&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;🔥 burn-it-all&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;quelques-autres-bonnes-pratiques-donboarding&quot;&gt;Quelques autres bonnes pratiques d’onboarding&lt;/h2&gt;

&lt;p&gt;Bien entendu, il y a plein d’autres façons d’aider vos nouveaux développeurs ou
nouvelles développeuses à découvrir le code. Voici quelques autres idées :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;On peut se familiariser avec le workflow d’une publication de pull request ou de merge 
request en faisant une petite modification (ajouter son nom dans un fichier, par exemple ?);&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;on peut être accompagné(e) d’un “buddy” qui nous est assigné à l’arrivée dans l’entreprise avec 
qui on fait les premières revues de code en direct, et pas par écrit.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Une dernière bonne pratique très largement répandue : si les échanges par commentaires sont trop 
nombreux sur une même pull request, pourquoi ne pas se retrouver directement et résoudre en pair 
les 
points discutés ?&lt;/p&gt;</content><author><name>Anne-Laure de Boissieu</name></author><category term="team" /><summary type="html">Facilitez l’onboarding de vos collègues grâce à la revue de code!</summary></entry><entry><title type="html">Forum PHP 2022 - L’éléphant bleu n’a pas peur de la souris aux grandes oreilles</title><link href="https://tech.bedrockstreaming.com/2022/10/28/forum-php-afup-2022.html" rel="alternate" type="text/html" title="Forum PHP 2022 - L’éléphant bleu n’a pas peur de la souris aux grandes oreilles" /><published>2022-10-28T00:00:00+00:00</published><updated>2022-10-28T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2022/10/28/forum-php-afup-2022</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2022/10/28/forum-php-afup-2022.html">&lt;p&gt;Pour cette édition du Forum PHP qui s’est déroulée à Disneyland Paris, Bedrock a vu les choses en grand : première fois
sponsor Or sur un forum et pas moins de 32 Bedrockien(ne)s présent(e)s dont 4 en tant que conférencier(e)s !
Cette année encore, le forum a été un moment privilégié pour les échanges, le partage et vous avez été nombreux(ses) à
venir nous rencontrer sur notre stand et nous avons été ravis de pouvoir échanger avec vous.&lt;/p&gt;

&lt;p&gt;La richesse et la diversité des conférences ont fait de cette édition une grande réussite. Nous ne pouvons
malheureusement pas aborder toutes les conférences dans cet article, mais voici une sélection de 10 d’entre elles.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/forumphp2022/stand-bedrock.jpg&quot; alt=&quot;Le stand Bedrock&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;bedrock-au-forum-php&quot;&gt;Bedrock au Forum PHP&lt;/h2&gt;

&lt;p&gt;Grande première pour nous cette fois-ci : Bedrock avait un stand sur le forum PHP !
Notre équipe technique, ainsi que des membres de l’équipe RH a participé à la présentation de
l’entreprise. Nous avons pu, tous ensemble, vous accueillir sur le stand pour répondre aux questions sur notre activité,
notre organisation et la vie dans l’entreprise.&lt;/p&gt;

&lt;p&gt;De leurs propres mots :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Notre présence au forum fut une réussite collective, qui nous a permis de nous faire connaître et mettre en lumière BEDROCK en tant que structure à part entière, et non plus en tant que « M6 Web ».
Nos équipes étaient ravies que Bedrock soit sponsor et ont pu se challenger sur de réels “casses-têtes” et non pas sur leur code.
Durant ces deux journées, le stand Bedrock a été un point de rendez-vous agréable pour nos équipes et pour les autres participants curieux d’apprendre à nous connaître.
Cette participation, au-delà d’être très formatrice pour la communauté Bedrock, a même parfois été assimilée à un « team building » pour reprendre les termes de nos collaborateurs, leur permettant de se retrouver dans un autre environnement et de participer à l’attractivité de leur entreprise.
Les équipes Backend &amp;amp; RH étaient fières de représenter Bedrock en participant à la vie du stand et de répondre aux questions des passants.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/forumphp2022/backend-managers.jpg&quot; alt=&quot;Nos 2 Backend managers, Mikael et FX en train d’animer l’épreuve des casse-têtes&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;les-conférences-quon-retient&quot;&gt;Les conférences qu’on retient&lt;/h2&gt;

&lt;h3 id=&quot;jour-1&quot;&gt;Jour 1&lt;/h3&gt;

&lt;h4 id=&quot;the-php-foundation-the-past-the-present-and-the-future---sebastian-bergmann-roman-pronskiy&quot;&gt;The PHP Foundation: The past, the present, and the future - Sebastian BERGMANN, Roman PRONSKIY&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;“PHP c’est simple, suffit de dégommer un mec, et ça n’existe plus…”
                                  	- Chuck Norris -&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cette vision à peine exagérée de l’ami Chuck était assez proche de la réalité jusqu’à l’année dernière. En effet,
jusque-là, l’écrasante majorité de la connaissance internet et des implémentations des features de PHP reposaient sur
les épaules de &lt;em&gt;Nikita Popov&lt;/em&gt; et &lt;em&gt;Dmitry Stogov&lt;/em&gt;. Lesquels faisaient cela de manière non-professionnelle, comme un hobby,
alors que PHP est aujourd’hui utilisé pour environ &lt;a href=&quot;https://w3techs.com/technologies/details/pl-php&quot;&gt;70% des sites internets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tout ceci est résumé dans &lt;a href=&quot;https://blog.krakjoe.ninja/2021/05/avoiding-busses.html&quot;&gt;cet article&lt;/a&gt; (en anglais).&lt;/p&gt;

&lt;p&gt;Ce qui nous amène à un principe bien connu et très problématique de bon nombre d’entreprises : &lt;em&gt;le Bus Factor&lt;/em&gt;.&lt;/p&gt;

&lt;h5 id=&quot;bus-factor&quot;&gt;Bus Factor&lt;/h5&gt;

&lt;p&gt;Ce principe identifie &lt;em&gt;le nombre de personnes qui doivent être renversées par un bus&lt;/em&gt; pour que la connaissance d’un
projet disparaisse et que ce dernier soit réellement mis en péril. Appliqué à PHP, cela signifie que &lt;em&gt;si deux
personnes&lt;/em&gt; avaient été renversées par un bus ou &lt;em&gt;avaient croisé le chemin de Chuck&lt;/em&gt;, l’ensemble de la communauté PHP
aurait bien transpiré.&lt;/p&gt;

&lt;h5 id=&quot;la-php-foundation&quot;&gt;La PHP Foundation&lt;/h5&gt;

&lt;p&gt;En 2021, &lt;em&gt;Nikita Popov&lt;/em&gt; annonce son souhait de réduire drastiquement sa contribution au langage, et c’est là que
la &lt;a href=&quot;https://thephp.foundation/&quot;&gt;PHP Fundation&lt;/a&gt; est fondée autour de personnalités comme &lt;em&gt;Sebastian BERGMAN&lt;/em&gt; et
&lt;em&gt;Roman PRONSKIY&lt;/em&gt; qui ont animé cette conférence à laquelle nous avons eu la chance d’assister.&lt;/p&gt;

&lt;p&gt;L’objectif est simple : récolter des fonds pour pouvoir &lt;em&gt;rémunérer des personnes qui font évoluer le langage&lt;/em&gt; et
répartir la connaissance dudit langage entre un maximum de personnes pour &lt;em&gt;minimiser le Bus Factor&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;L’aspect juridique et financier de la chose est délégué à une structure
nommée &lt;a href=&quot;https://opencollective.com/phpfoundation&quot;&gt;Open Collective&lt;/a&gt;, dont l’activité est 100% transparente.
Les derniers chiffres font ainsi valoir qu’après déductions des charges, il reste cette année environ 580 000$ pour la
fondation.&lt;/p&gt;

&lt;p&gt;Les fonds &lt;em&gt;proviennent majoritairement de donations&lt;/em&gt; répartis comme suit :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;77% provenant d’entreprises (JetBrains, Livesport, Symfony…)&lt;/li&gt;
  &lt;li&gt;23% provenant d’individus&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Parmi les actuels core contributeurs on retrouve :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/arnaud-lb&quot;&gt;Arnaud Le Blanc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/derickr&quot;&gt;Derick Rethans&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Girgias&quot;&gt;George P. Banyard&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/iluuu1994&quot;&gt;Ilija Tovilo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bukka&quot;&gt;Jakub Zelenka&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kocsismate&quot;&gt;Máté Kocsis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;le-futur-de-php-&quot;&gt;Le futur de PHP ?&lt;/h5&gt;

&lt;p&gt;Avec cette stratégie de contractualisation des core-contributeurs et le souci de partager la connaissance, on est en
droit d’espérer que le risque de mise en péril du langage soit fortement réduit. Qui plus est, &lt;strong&gt;l’arrivée prochaine de
la version 8.2 de PHP&lt;/strong&gt; semble montrer que la nouvelle équipe a su faire avancer le projet, pour notre plus grand plaisir.&lt;/p&gt;

&lt;h4 id=&quot;watch-the-clock---andreas-heighl&quot;&gt;Watch the clock - Andreas HEIGHL&lt;/h4&gt;

&lt;p&gt;Dans cette conférence, &lt;a href=&quot;https://twitter.com/heiglandreas&quot;&gt;Andreas&lt;/a&gt; aborde la douloureuse problématique du temps en PHP
et plus précisément le cauchemar que sont les tests sur la notion de temps réel.&lt;/p&gt;

&lt;p&gt;Afin de répondre à cette problématique, il évoque et explique en détail tout le cheminement intellectuel pour la mise en
place de la &lt;a href=&quot;https://github.com/php-fig/clock&quot;&gt;PSR-20&lt;/a&gt;. Elle donnera la possibilité, grâce à une “simple” interface, de
gérer plus facilement le temps réel et les tests associés. Malheureusement, la PSR-20 est actuellement encore à l’état
de brouillon et ne sera probablement pas mise à disposition avant longtemps.&lt;/p&gt;

&lt;p&gt;Afin de nous faire patienter, Andreas a développé sa propre implémentation de l’interface Clock qui sera proposée dans
la PSR-20 : &lt;a href=&quot;https://packagist.org/packages/stella-maris/clock&quot;&gt;https://packagist.org/packages/stella-maris/clock&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;comment-être-bien-onboardé-en-tant-que-développeuse-junior-reconvertie----amélie-abdallah&quot;&gt;Comment être bien onboardé en tant que développeuse junior reconvertie ? - &lt;a href=&quot;https://twitter.com/AlonahAmelie&quot;&gt;Amélie ABDALLAH&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Amélie, alternante et en reconversion, a donné sa première conférence pour faire un retour d’expérience des onboardings
qu’elle a vécu dans ses 2 premières entreprises.&lt;/p&gt;

&lt;p&gt;Pour sa première expérience en tant que développeuse elle se retrouve à devoir coder dès le premier jour. Une fois
passée l’euphorie, je rappelle qu’elle est en reconversion et sur-motivée, elle se rend vite compte de tout ce qui ne
va pas :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;personne pour la former que ce soit techniquement ou concernant le métier&lt;/li&gt;
  &lt;li&gt;aucune présentation des autres équipes&lt;/li&gt;
  &lt;li&gt;aucun accompagnement de la part des supérieurs hiérarchiques&lt;/li&gt;
  &lt;li&gt;seule sur un projet où les règles métiers semblent complexes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Elle se sent rapidement perdue et son moral et sa motivation tombent en flèche.&lt;/p&gt;

&lt;p&gt;Concernant sa seconde entreprise, c’est tout l’inverse :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pas de code pour les alternants/reconverti(e)s avant 2 semaines&lt;/li&gt;
  &lt;li&gt;un système de marrainage/parrainage&lt;/li&gt;
  &lt;li&gt;un repo avec des exercices et bonnes pratiques pour progresser&lt;/li&gt;
  &lt;li&gt;une rencontre avec toutes les équipes pour se connaître mais surtout pour bien comprendre les différents métiers de ses collègues&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Amélie conclut en incitant toutes les entreprises à envisager des candidat(e)s en reconversion qui, à la condition
d’être bien accompagné(e)s, seront sur-motivé(e)s et plein(e)s d’énergie.&lt;/p&gt;

&lt;p&gt;Cela nous permet de faire l’état des lieux de notre processus d’onboarding. Même si on peut trouver des pistes
d’amélioration, comme par exemple avoir une présentation des autres équipes et différents métiers bien plus tôt, on
constate que nous avons déjà mis en place beaucoup de bonnes pratiques :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;calendrier d’onboarding clair avec installation de la machine, présentation de l’équipe rejoint par la nouvelle personne, des locaux, des projets, etc.&lt;/li&gt;
  &lt;li&gt;système de marrainage/parrainage,&lt;/li&gt;
  &lt;li&gt;des formations disponibles sur les différentes technologies utilisées&lt;/li&gt;
  &lt;li&gt;ce qu’on appelle la &lt;em&gt;Bedrock Academy&lt;/em&gt;, qui donne une vision globale des métiers de l’entreprise&lt;/li&gt;
  &lt;li&gt;un rapport d’étonnement présenté par le nouvel arrivant qui nous permet d’améliorer notre onboarding en continu&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ffi--de-nouveaux-horizons-pour-php---pierre-pelisset&quot;&gt;FFI : De nouveaux horizons pour PHP - Pierre PELISSET&lt;/h4&gt;

&lt;p&gt;Chez Karafun, Pierre Pelisset nous présente un moyen de dépasser les frontières habituelles de PHP.&lt;/p&gt;

&lt;p&gt;La mise en place de bar à karaoké nécessite en effet de manipuler du matériel spécifique. La transmission de données par
USB reste le moyen le plus simple de faire communiquer des systèmes, mais nativement rien n’existe en PHP. Jusqu’à
présent les équipes de Karafun utilisaient un script Python avec PySerial pour répondre à ce besoin.&lt;/p&gt;

&lt;p&gt;Depuis PHP 7.4, il est possible d’utiliser les &lt;a href=&quot;https://www.php.net/manual/en/book.ffi.php&quot;&gt;&lt;em&gt;Foreign Function Interface&lt;/em&gt; (FFI)&lt;/a&gt;
pour appeler directement des libraires C compilées depuis le code PHP. En se basant sur les bonnes librairies, il a été
ainsi possible pour les équipes de Karafun d’utiliser PHP dans la totalité de leur stack, et de remplacer leurs scripts
Python.&lt;/p&gt;

&lt;p&gt;Pierre nous présente ensuite la librairie &lt;a href=&quot;https://github.com/ppelisset/php-termios&quot;&gt;php-termios&lt;/a&gt; qu’il a implémentée
pour permettre d’utiliser Termios, une librairie de manipulation de terminal POSIX écrite en C, depuis PHP.&lt;/p&gt;

&lt;p&gt;L’interfaçage reste facile tant qu’il s’agit de types de données simples (comme des entiers), mais devient beaucoup plus
complexe lorsqu’il s’agit de manipuler des structures de données avancées (chaînes de caractères, objets, …).&lt;/p&gt;

&lt;p&gt;Idéalement, il faut créer des classes PHP ressemblant à la librairie C (mêmes noms de fonction, de constante, …), afin
de faciliter sa manipulation.&lt;/p&gt;

&lt;p&gt;L’utilisation des FFI introduit de nouvelles difficultés liées généralement aux programmes compilés. Ainsi, dans le cas
de Termios, les constantes utilisées varient selon la plateforme (Linux, MacOS, …). Il a donc fallu utiliser quelques
astuces pour les copier dynamiquement dans le code PHP. De même, pour distribuer le binaire compilé, il faut prendre en
compte l’architecture CPU de la machine exécutant le code.&lt;/p&gt;

&lt;h4 id=&quot;opentelemetry--vers-un-standard-pour-surveiller-vos-applications---benoit-viguier&quot;&gt;OpenTelemetry : vers un standard pour surveiller vos applications - Benoit Viguier&lt;/h4&gt;

&lt;p&gt;Lors de sa conférence, Benoit Viguier (développeur chez &lt;a href=&quot;https://platform.sh/&quot;&gt;Platform.sh&lt;/a&gt; au sein de l’équipe de &lt;a href=&quot;https://www.blackfire.io/&quot;&gt;Blackfire.io&lt;/a&gt;) est venu parler
d’un standard de monitoring soutenu par la Cloud Native Computing Foundation : OpenTelemetry. Il a d’abord commencé par
nous rappeler pourquoi nous faisons du monitoring.&lt;/p&gt;

&lt;p&gt;Le monitoring nous permet de savoir si nos services fonctionnent correctement (conforme au SLA|SLO), et si cela n’est
pas le cas, de savoir pourquoi cela ne fonctionne pas. Pour faire cela, il nous a présenté les différentes solutions de
monitoring qui existent, de la plus simple à mettre en place (Analytics), au plus|trop détaillé (logs) mais aussi via
des metrics qui eux demandent une plus grande intégration.&lt;/p&gt;

&lt;p&gt;Ensuite vient la présentation des promesses de ce nouveau standard (OpenTelemetry) et sa volonté d’uniformiser les trois
piliers du monitoring : logs, metrics et les traces, avec la volonté de rendre interopérable ces données collectées avec
n’importe quel service et ce qu’importe le langage.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/forumphp2022/open-telemetry.png&quot; alt=&quot;Schéma OpenTelemetry&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Afin de permettre cette interopérabilité pour la collecte, le traitement et l’envoi des données entre nos applications
et nos APMs, OpenTelemetry propose l’utilisation d’un &lt;a href=&quot;https://opentelemetry.io/docs/collector/&quot;&gt;collecteur&lt;/a&gt;. Ce collecteur possède trois composants par lesquels
notre donnée va transiter :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Receiver - Gère la récupération des données dans le collecteur. Il fonctionne aussi bien avec une mécanique de push que de pull et supporte nativement les protocoles HTTP et gRPC.&lt;/li&gt;
  &lt;li&gt;Processor - Permet le traitement des données avant l’envoi aux différents outils de monitoring.&lt;/li&gt;
  &lt;li&gt;Exporter - Envoie les données (via push ou pull) aux outils de monitoring.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Concernant l’utilisation du standard OpenTelemetry en PHP, il existe aujourd’hui un SDK qui, cependant, ne possède
pas beaucoup de fonctionnalités.&lt;/p&gt;

&lt;p&gt;Malgré son jeune âge (release v1.0 en 2021), OpenTelemetry a encore de beaux jours devant lui si la contribution et le
soutien de la communauté continuent. Il est important de rappeler que le standard n’est pas encore finalisé, par exemple
la fonctionnalité “logging” est encore en cours de développement et n’est disponible qu’en “draft”.&lt;/p&gt;

&lt;h3 id=&quot;jour-2&quot;&gt;Jour 2&lt;/h3&gt;

&lt;h4 id=&quot;typage-en-php-comment-ça-fonctionne----george-banyard&quot;&gt;Typage en PHP, comment ça fonctionne ? - George BANYARD&lt;/h4&gt;

&lt;p&gt;Lors de cette dissection du typage PHP, George Banyard, développeur salarié de la PHP Foundation, nous a expliqué (ou du
moins tenté) comment fonctionne le typage PHP grâce à des formules mathématiques. Mais avant de nous faire peur avec les
formules, il nous d’abord rappelé les différents types existants et futurs (PHP 8.1 et 8.2) et comment ils sont
représentés en C (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zend_type&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; _zval_struct&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_zend_class_entry&lt;/code&gt;)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Types Primitifs&lt;/li&gt;
  &lt;li&gt;Types définis en espace utilisateur (classe, interfaces, enum)&lt;/li&gt;
  &lt;li&gt;Types Littéraux (false, true)&lt;/li&gt;
  &lt;li&gt;Type callable&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;Types Composés (A&amp;amp;B, A&lt;/td&gt;
          &lt;td&gt;B, Forme Normale Disjonctive)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;Alias de Type (PHP 8.2)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ensuite, il nous a expliqué le principe de &lt;strong&gt;substitution de Liskov&lt;/strong&gt; de différente manière.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Si φ(x) est une propriété démontrable pour tout objet x de&lt;/em&gt;
&lt;em&gt;type T, alors φ(y) est vraie pour tout objet y de type S tel que&lt;/em&gt;
&lt;em&gt;S est un sous-type de T&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mathématique, en C mais aussi en image :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/forumphp2022/schema-maths.png&quot; alt=&quot;Schéma mathématique&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En version très simplifiée, la substitution de Liskov permet de substituer un type par un autre type s’il est
mieux-disant. C’est par exemple sur ce principe que sont fondées &lt;a href=&quot;https://www.php.net/manual/en/language.oop5.variance.php&quot;&gt;la co-variance et la contra-variance&lt;/a&gt; en PHP.&lt;/p&gt;

&lt;p&gt;Après toutes ces informations, George nous a fait rêver avec les nouveautés qui pourraient arriver dans notre langage préféré :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;La possibilité de définir nos alias de type (numeric qui serait int ou float)&lt;/li&gt;
  &lt;li&gt;Pouvoir définir un typage pour les paramètres et le retour des callable directement dans la fonction : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo(fn&amp;lt;int,string&amp;gt;:bool $callable) {}&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Le paramètre in-out qui permet de vérifier que le type ne change pas entre l’entrée et la sortie d’une fonction, utile notamment dans le cas de passage par référence&lt;/li&gt;
  &lt;li&gt;Pouvoir créer des types génériques (par exemple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class Collection&amp;lt;string&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vous pouvez retrouver les slides de la conférence &lt;a href=&quot;https://gpb.moe/doc/PHP_Type_System_Talk__FR.pdf&quot;&gt;ici&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;protéger-votre-application-avec-len-tête-http-de-sécurité-content-security-policy---laurent-brunet&quot;&gt;Protéger votre application avec l’en-tête HTTP de sécurité “Content Security Policy” - Laurent BRUNET&lt;/h4&gt;

&lt;p&gt;Durant ce talk, Laurent BRUNET nous a rappelé l’importance de sécuriser les sites internet en nous parlant des attaques
les plus utilisées et dont on pourrait se défendre en exploitant correctement le header de réponse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Security-Policy&lt;/code&gt; (aka. CSP).&lt;/p&gt;

&lt;p&gt;Concrètement, le header CSP est délivré par le serveur en même temps que le HTML d’une page web et contraint les
navigateurs à s’assurer que le contenu de la page respecte les règles de sécurité définies grâce à de nombreuses directives.&lt;/p&gt;

&lt;p&gt;Il existe 2 variantes de ce header qui peuvent être utilisées conjointement :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;une forme bloquante qui empêchera tous contenus illicites d’être chargés par le navigateur
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Security-Policy: &amp;lt;directive1&amp;gt; ;  &amp;lt;directive2&amp;gt; ;  &amp;lt;directiveN&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;une forme non-bloquante qui permet uniquement aux développeurs d’être avertis si du contenu illicite est présent sur la page
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Security-Policy-Report-Only: &amp;lt;directive1&amp;gt; ;  &amp;lt;directive2&amp;gt; ;  &amp;lt;directiveN&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Et voici quelques unes des failles de sécurité évoquées durant ce talk, chacune accompagnée d’une des directives permettant de s’en protéger :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;on peut se protéger des attaques &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XSS&lt;/code&gt; (e.g. injection de scripts dans une page web permettant d’exploiter les accès d’un utilisateur) en whitelistant les scripts autorisés à s’exécuter dans votre application avec &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;script-src &apos;nonce-MonIDDeScript&apos; &apos;sha256-MonHashDeScript&apos; &apos;strict-dynamic&apos; https: &apos;unsafe-inline&apos; *.example.com ;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;le Clickjacking (e.g. injection d’iframe invisible dans laquelle l’utilisateur va cliquer sans le savoir) peut être facilement contré en whitelistant vos iframes et celles de vos partenaires avec &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;frame-ancestors &apos;self&apos; https://example.com ;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;la faille Magecart (e.g. récupération des données bancaires en les envoyant vers un nom de domaine pirate difficile à détecter) disparaîtra en whitelistant les noms de domaines utilisés dans des appels AJAX avec &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;connect-src &apos;self&apos; https://example.com ;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si le sujet vous intéresse, n’hésitez pas à consulter le talk de Laurent dès qu’il sera disponible en replay. En
attendant, profitez de &lt;a href=&quot;https://developer.mozilla.org/fr/docs/Web/HTTP/CSP&quot;&gt;la documentation du MDN&lt;/a&gt; et sachez
que &lt;a href=&quot;https://csp-evaluator.withgoogle.com&quot;&gt;Google fournit un service en ligne&lt;/a&gt; pour inspecter et valider les CSP de vos
pages web.&lt;/p&gt;

&lt;h4 id=&quot;tester-à-travers-openapi-ou-comment-valider-votre-documentation----stéphane-hulard&quot;&gt;Tester à travers OpenAPI, ou comment valider votre documentation ! - Stéphane Hulard&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/s_hulard&quot;&gt;Stéphane Hulard&lt;/a&gt; a commencé sa conférence par nous rappeler ce qu’est OpenAPI : il s’agit
d’une initiative qui vise à normaliser et standardiser la description d’APIs. Cela sert à l’interopérabilité,
l’automatisation et la fiabilité.&lt;/p&gt;

&lt;p&gt;Il faut voir la documentation comme une spécification de notre API. &lt;em&gt;“Une documentation n’a de sens que si elle reflète
l’état actuel de l’application.”&lt;/em&gt; Rien de mieux donc que d’intégrer la validation de notre documentation par rapport à
notre code, et inversement : que notre documentation valide notre code !&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/forumphp2022/presentation-validation-openapi.png&quot; alt=&quot;schéma de validation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://thephpleague.com/&quot;&gt;&lt;em&gt;thephpleague&lt;/em&gt;&lt;/a&gt; nous propose une solution pour faire ça : &lt;a href=&quot;https://github.com/thephpleague/openapi-psr7-validator&quot;&gt;openapi-psr7-validator&lt;/a&gt;.
Ce paquet peut valider les messages PSR-7 par rapport aux spécifications OpenAPI (3.0.x) exprimées en YAML ou JSON.&lt;/p&gt;

&lt;p&gt;Ce paquet se base sur les &lt;em&gt;PHP Standards Recommendations&lt;/em&gt; (PSR) qui sont des textes décrivant une manière commune de
résoudre un problème spécifique. De cette façon, les projets qui suivent ces recommandations auront une excellente
interopérabilité en suivant les mêmes recommandations et contrats.&lt;/p&gt;

&lt;p&gt;Stéphane nous parle ensuite de la librairie &lt;a href=&quot;https://github.com/CHStudio/Raven&quot;&gt;Raven&lt;/a&gt; qu’il vient de publier. Raven a
pour but de faciliter la validation au travers de la documentation, de s’appuyer sur de vraies données pour valider les
requêtes et réponses ainsi que valider le comportement de l’API testée. La librairie n’en est qu’à ses débuts, quelques
issues sont remontées sur le repository, n’hésitez pas à contribuer !&lt;/p&gt;

&lt;p&gt;Stéphane a mis à disposition les &lt;a href=&quot;https://public.chstudio.fr/talks/test-through-openapi-or-how-to-validate-your-documentation/fr-forum-php-2022.html#/&quot;&gt;slides de sa conférence ici&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;frankenphp-dans-les-entrailles-de-linterpréteur-php-de-machines-virtuelles-et-des-threads---kévin-dunglas&quot;&gt;FrankenPHP, dans les entrailles de l’interpréteur PHP, de machines virtuelles et des threads - &lt;a href=&quot;https://twitter.com/dunglas&quot;&gt;Kévin DUNGLAS&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chez Bedrock, nous utilisons majoritairement nginx et php-fpm pour servir nos applications. Nous avons aussi fait des
essais avec Road Runner comme alternative.&lt;/p&gt;

&lt;p&gt;Durant cette conférence, Kévin DUNGLAS nous a présenté une nouvelle alternative écrite en Go et nommée &lt;a href=&quot;https://frankenphp.dev/&quot;&gt;frankenphp&lt;/a&gt;.
Chouette effet d’annonce au passage, FrankenPHP a été ouvert au public en direct durant la conférence.&lt;/p&gt;

&lt;p&gt;En plus d’avoir un logo très mignon, ce nouveau serveur d’application PHP promet un gain de performance en gardant en
mémoire l’application chargée. Autre argument intéressant, la facilité d’installation et d’utilisation.&lt;/p&gt;

&lt;p&gt;Bien qu’il a plusieurs fois précisé que ce n’était pas prêt pour la production, cette nouvelle approche semble
prometteuse. Il est probable que nous ne tardions pas à l’essayer pour voir s’il est possible de gagner en performance.&lt;/p&gt;

&lt;h2 id=&quot;les-conférenciers-bedrock&quot;&gt;Les conférenciers Bedrock&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/forumphp2022/presentation-anne-laure.jpg&quot; alt=&quot;Anne-Laure durant sa présentation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cette année, ce ne sont pas moins de 4 présentations qui étaient données par des personnes de chez Bedrock.&lt;/p&gt;

&lt;p&gt;Vous pourrez les trouver très bientôt en replay. Les liens seront partagés sur ce blog et les vidéos disponibles
sur &lt;a href=&quot;https://www.youtube.com/user/afupPHP&quot;&gt;la chaîne youtube de l’afup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En attendant, et pour rappel, il s’agissait des conférences suivantes :&lt;/p&gt;

&lt;h4 id=&quot;comprenez-comment-php-fonctionne-vos-applications-marcheront-mieux---pascal-martin&quot;&gt;Comprenez comment PHP fonctionne, vos applications marcheront mieux - Pascal MARTIN&lt;/h4&gt;

&lt;p&gt;À l’échelle à laquelle nous travaillons, avec des millions de personnes sur nos plateformes tous les jours, nous découvrons, atteignons, voire dépassons régulièrement des limites de l’approche traditionnelle de PHP et de php-fpm. Au cours de ce talk, Pascal souhaitait partager notre expérience de travail avec PHP, sur des sujets souvent peu connus par les développeurs et développeuses, pour aider le public à créer des applications qui répondent mieux aux attentes de leur public.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Pour exécuter du code, PHP consomme du processeur et de la mémoire. Quand une requête HTTP arrive, un processus php-fpm lui est dédié. Mais ces ressources sont limitées. Et, même dans le Cloud ou en serverless, scaler prend du temps et les coûts s’envolent !&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Savez-vous combien de CPU et de RAM votre application réclame ? Et pendant quelle durée ? Si non ou sans comprendre « pourquoi », difficile de développer efficacement et de dimensionner un hébergement pérenne ! Peut-être que ça marche… Sur votre poste. Ou pendant un moment, en gaspillant de l’argent et des ressources. Mais l’expérience prouve que, tôt ou tard, ces questions vous rattraperont.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cycle de vie de PHP, communication entre nginx et php-fpm, approche shared-nothing, compilation et cache d’opcodes, gestion interne de la mémoire ou même architecture logicielle et debugging… Pour qu’une application réponde aux attentes de son public, nous devons comprendre comment PHP fonctionne !&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;sauve-un-e-dév-écris-une-doc----sarah-haïm-lubczanski&quot;&gt;Sauve un-e dév, écris une doc ! - Sarah HAÏM-LUBCZANSKI&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;Vous êtes développeur ou développeuse PHP : vous aimez programmer, réfléchir. Vous aimez créer des applications ou des bibliothèques de qualité. Mais pourquoi personne ne les utilise ? Parce que votre documentation n’est pas à la hauteur !&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Justement : je suis Technical Writer et mon métier est de vous aider à valoriser votre logiciel auprès de ses utilisateurs et utilisatrices, à travers une bonne doc. Comprenons comment architecturer, concevoir et rédiger votre contenu. Découvrons les outils qui vous procureront une aide précieuse. Enfin, facilitons sa mise à jour pour qu’elle soit pérenne.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Dorénavant, vous saurez identifier les passages obligés et ceux où vous pouvez gagner du temps.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;revue-de-code--on-nest-pas-venu-pour-souffrir----anne-laure-de-boissieu&quot;&gt;Revue de code : on n’est pas venu pour souffrir ! - Anne-Laure DE BOISSIEU&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;J’ai rejoint ma nouvelle équipe il y a 6 mois, avec une appréhension. Comment allais-je vivre les revues de code par des collègues que je ne connais pas encore ? Incompréhensions, malentendus : la communication écrite rend cet exercice très délicat. Vous avez été blessé-e par un commentaire ? Etait-il vraiment mal intentionné ? Vous avez blessé quelqu’un sans le vouloir, à cause d’une tournure maladroite ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Dans mon équipe, j’ai découvert un cadre qui m’a permis de me sentir bien accueillie dès mon arrivée. En adoptant une posture et une convention bien adaptée, on peut largement diminuer le risque de mal se comprendre. Non seulement on communique mieux, mais on améliore la qualité globale du projet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Vous n’aurez plus aucune raison de souffrir !&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;bff-notre-best-friend-forever-pour-faire-plein-dapplications-frontend----valentin-claras&quot;&gt;BFF, notre best friend forever pour faire plein d’applications frontend ? - Valentin CLARAS&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;Chez Bedrock nous fournissons des applications de streaming (ASVOD, AVOD) pour plusieurs clients en France et en Europe, chaque application étant déployée sur de nombreux appareils (ordinateur, mobile, set top box, tv connectée, consoles de jeux, tv stick etc …). Il était devenu très difficile de gérer la création et l’évolution de ces nombreuses applications qui requêtaient et formataient chacune elles-mêmes les données dont elles avaient besoin.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Pour cela, en 2018, nous avons décidé de nous lancer dans la création d’un Back For Front afin d’unifier et faciliter les interactions backend et frontend. Cette conférence fut l’occasion de passer en revue :&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;les concepts du Back For Front&lt;/li&gt;
    &lt;li&gt;l’architecture api-gateway et micro service mise en place&lt;/li&gt;
    &lt;li&gt;les gains fonctionnels et la vélocité gagnée&lt;/li&gt;
    &lt;li&gt;les différents mécanismes développés pour absorber les importants pics de charge (résilience, circuit breaker, fallbacks etc.)&lt;/li&gt;
    &lt;li&gt;les impacts techniques et organisationnels d’une telle architecture&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Aujourd’hui notre API Gateway BFF opère 92 frontends délivrant 1.5 milliards de vidéos par an pour 45 millions d’utilisateurs actifs (MaU).
Vous pourrez trouver un complément d’informations au sujet de notre BFF dans &lt;a href=&quot;https://tech.bedrockstreaming.com/2022/06/10/backend-bff-intro.html&quot;&gt;la suite d’articles dédié&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;pour-conclure&quot;&gt;Pour conclure&lt;/h2&gt;

&lt;p&gt;Nous sommes revenus la tête pleine de nouvelles idées. Ces deux jours de conférences nous ont permis de montrer le savoir faire présent chez Bedrock et nous avons aussi pu nous inspirer des connaissances d’autres personnes. Les formats variés répondaient aux goûts de chacun(e) et ont rendu ce forum unique.&lt;/p&gt;

&lt;p&gt;Les nombreuses activités proposées entre chaque conférence permettaient d’échanger entre pairs et comme toujours la communauté a été mise à l’honneur avec la construction d’une fresque LEGO représentant tous les logos des antennes de l’AFUP.&lt;/p&gt;

&lt;p&gt;Merci à tou(te)s les conférencier(e)s pour leur travail incroyable et merci l’AFUP pour l’organisation de ce superbe évènement !&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/forumphp2022/fresque-lego-communautaire.jpg&quot; alt=&quot;La fresque Lego communautaire&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vivement l’année prochaine !&lt;/p&gt;</content><author><name>Bedrock</name></author><category term="afup" /><category term="php" /><category term="forumphp" /><category term="conference" /><summary type="html">Pour cette édition du Forum PHP qui s’est déroulée à Disneyland Paris, Bedrock a vu les choses en grand : première fois sponsor Or sur un forum et pas moins de 32 Bedrockien(ne)s présent(e)s dont 4 en tant que conférencier(e)s ! Cette année encore, le forum a été un moment privilégié pour les échanges, le partage et vous avez été nombreux(ses) à venir nous rencontrer sur notre stand et nous avons été ravis de pouvoir échanger avec vous.</summary></entry><entry><title type="html">API Platform Conference 2022</title><link href="https://tech.bedrockstreaming.com/2022/10/07/api-platform-conference-2022.html" rel="alternate" type="text/html" title="API Platform Conference 2022" /><published>2022-10-07T00:00:00+00:00</published><updated>2022-10-07T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2022/10/07/api-platform-conference-2022</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2022/10/07/api-platform-conference-2022.html">&lt;p&gt;En cette période de rentrée, Bedrock participait à l’&lt;a href=&quot;https://api-platform.com/con/2022&quot;&gt;API Platform Conference 2022&lt;/a&gt;, où nous avons eu le plaisir d’assister à une partie des conférences proposées. Un grand merci à toutes les personnes chez &lt;a href=&quot;https://les-tilleuls.coop/&quot;&gt;Les-Tilleuls.coop&lt;/a&gt; pour l’organisation de cet évènement !
Pour cette seconde édition, le programme était réparti sur deux jours, les 15 &amp;amp; 16 septembre 2022.&lt;/p&gt;

&lt;p&gt;En introduction à cette conférence, Kévin Dunglas, créateur d’&lt;a href=&quot;https://api-platform.com/&quot;&gt;API Platform&lt;/a&gt;, a mis en ligne la version 3.0.0 du framework en nous présentant certaines nouvelles fonctionnalités développées telles que le support natif de XDebug. Il a profité de l’occasion pour présenter un petit historique d’API Platform.&lt;/p&gt;

&lt;h2 id=&quot;domain-driven-design-with-api-platform-3&quot;&gt;Domain-driven design with API Platform 3&lt;/h2&gt;

&lt;p&gt;Lors de cette conférence, &lt;a href=&quot;https://twitter.com/chalas_r&quot;&gt;Robin Chalas&lt;/a&gt; et &lt;a href=&quot;https://twitter.com/matarld&quot;&gt;Mathias Arlaud&lt;/a&gt; nous ont parlé de l’utilisation d’API Platform dans le cadre du Domain Driven Development et de l’Architecture Hexagonale.
Les présentateurs ont commencé cette présentation par plusieurs rappels et présentations sur des sujets comme :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Domain Driven Design&lt;/li&gt;
  &lt;li&gt;Structures hexagonales&lt;/li&gt;
  &lt;li&gt;CQRS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ces rappels ont permis d’enchainer sur l’utilisation du framework dans ce contexte à travers un &lt;a href=&quot;https://github.com/mtarld/apip-ddd&quot;&gt;exemple de projet&lt;/a&gt; DDD utilisant API Platform 3 et suivant l’architecture hexagonale.&lt;/p&gt;

&lt;p&gt;Ils expliquent comment implémenter API Platform dans notre code en détaillant plusieurs points :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;L’implémentation des providers côté query&lt;/li&gt;
  &lt;li&gt;L’implémentation des processors côté command&lt;/li&gt;
  &lt;li&gt;Le système d’opération&lt;/li&gt;
  &lt;li&gt;Les providers/processors qui appellent l’app via les bus&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;comment-alice-gardens-gère-t-elle-son-code-métier-via-les-évènements&quot;&gt;Comment Alice Garden’s gère-t-elle son code métier via les évènements&lt;/h2&gt;

&lt;p&gt;Nous avons pu assister à la conférence “Comment Alice Garden’s gère-t-elle le code métier via des évènements ?” proposée par leur technical architect &lt;a href=&quot;https://twitter.com/epatwon&quot;&gt;Nicolas Lemahieu&lt;/a&gt;. Tout d’abord, il nous a présenté le contexte de son entreprise Alice Garden’s qui fait de la vente de mobilier d’extérieur. En se basant sur la stack technique déjà présente : Symfony, RabbitMQ, MariaDB et sans tout refondre, comment faire pour mieux gérer le code métier actuellement éparpillé un peu partout dans le code.&lt;/p&gt;

&lt;p&gt;Ils utilisaient beaucoup de subscribers Doctrine, ce qui entraîne plusieurs problèmes :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Des subscribers nombreux = plus de logique au flush&lt;/li&gt;
  &lt;li&gt;Code plus difficile à maintenir et à comprendre&lt;/li&gt;
  &lt;li&gt;L’augmentation du risque de boucles infinies implique que chaque changement entraîne des boucles sur le UnitOfWork&lt;/li&gt;
  &lt;li&gt;Duplication de code&lt;/li&gt;
  &lt;li&gt;Code fortement couplé à Doctrine et manque de typage&lt;/li&gt;
  &lt;li&gt;Du côté du profiler Symfony, cela devient compliqué aussi dès qu’on commence à en avoir beaucoup&lt;/li&gt;
  &lt;li&gt;Les tests sont compliqués :
    &lt;ul&gt;
      &lt;li&gt;Unitaires quasi impossibles,&lt;/li&gt;
      &lt;li&gt;Fonctionnels possibles, mais demandent beaucoup de ressources en temps et donc d’argent&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nicolas Lemahieu a donc présenté les différentes solutions envisagées ainsi que leurs avantages et inconvénients :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Domain Driven Development : séparation très nette du métier et de l’infra, mais demande beaucoup trop d’effort à mettre en place, car aucune correspondance avec les bundles déjà existants (risque de régression trop haut, coût de développement trop grand…)&lt;/li&gt;
  &lt;li&gt;Garder les évènements et s’affranchir de Doctrine : c’est la solution qui a été retenue parce qu’elle permettait de réutiliser un maximum de l’existant&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Puis, nous avons pu apprendre comment implémenter cette solution :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Création d’une abstraction supplémentaire “BusinessObject” : nouveau dossier Business dans src où :
    &lt;ul&gt;
      &lt;li&gt;Entité = objet métier&lt;/li&gt;
      &lt;li&gt;Méthodes des entités = règles métier&lt;/li&gt;
      &lt;li&gt;Toutes les interfaces entité étendent BusinessObjectInterface&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Classes abstraites dans Business&lt;/li&gt;
  &lt;li&gt;Implémentation d’events custom pour chaque objet métier et par type d’event&lt;/li&gt;
  &lt;li&gt;Event provider : fournit les évènements qui sont mis dans une collection puis tag dans les services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En conclusion, chez Alice Garden’s, ils ont réussi à n’avoir qu’un seul Doctrine Subscriber, donc une seule boucle de UnitOfWork et des tests facilités, car c’est seulement du PHP. La dépendance à Doctrine est éliminée et il suffira de déplacer le provider pour adapter le code à une autre infrastructure.&lt;/p&gt;

&lt;h2 id=&quot;réutiliser-et-partager-vos-opérations-personnalisées-avec-api-platform&quot;&gt;Réutiliser et partager vos opérations personnalisées avec API Platform&lt;/h2&gt;

&lt;p&gt;Grâce à &lt;a href=&quot;https://mobile.twitter.com/jean_beru&quot;&gt;Hubert Lenoir&lt;/a&gt; et &lt;a href=&quot;https://mobile.twitter.com/jjarrie&quot;&gt;Jérémy Jarrié&lt;/a&gt; de l’entreprise SensioLabs, nous avons pu apprendre à réutiliser et partager les opérations avec API Platform. Ils utilisent 3 API REST faites avec API Platform v3. Des opérations génériques comme “liker” peuvent s’appliquer sur des ressources différentes (articles, photos, pages, etc.), on peut donc réutiliser du code.&lt;/p&gt;

&lt;p&gt;Les principes pour faire cette utilisation générique de code sont simples :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Un seul contrôleur pour plusieurs ressources = un contrôleur de comportement&lt;/li&gt;
  &lt;li&gt;Une interface pour que les entités puissent adopter ce comportement&lt;/li&gt;
  &lt;li&gt;Trait pour les méthodes du comportement (1 à n comportements, donc classe abstraite ou interface impossible)&lt;/li&gt;
  &lt;li&gt;Ajouter des services intermédiaires&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il survient un seul problème avec ce pattern : la duplication des annotations API Platform. La solution est d’ajouter des décorations (design pattern decorator) sur les métadatas d’API Platform. Il est donc simple de créer des comportements indépendants des ressources qui pourront être facilement réutilisés. Ce projet était encore à l’état de POC, mais Jérémy et Hubert allaient mettre à jour la version plus aboutie sur le &lt;a href=&quot;https://github.com/JJarrie/reuse-behaviour&quot;&gt;repository GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;la-revue-de-code-est-un-art&quot;&gt;La revue de code est un art&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/SmaineDev&quot;&gt;Smaine Milianni&lt;/a&gt; a proposé une conférence sur les conseils à suivre afin d’effectuer une revue de code. Nous avons pu réaliser qu’au sein de Bedrock nous appliquions déjà de nombreux principes.&lt;/p&gt;

&lt;p&gt;Nous appliquons déjà :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Un template de PR pour décrire les caractéristiques du bug ou de l’US :
    &lt;ul&gt;
      &lt;li&gt;Quoi, pourquoi, comment, comment tester, etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Des noms de commits explicites&lt;/li&gt;
  &lt;li&gt;La bienveillance&lt;/li&gt;
  &lt;li&gt;Le challenge du code des autres personnes&lt;/li&gt;
  &lt;li&gt;La connaissance des nombreux concepts de code (SOLID, KISS…)&lt;/li&gt;
  &lt;li&gt;Faire du pair review ou mob review&lt;/li&gt;
  &lt;li&gt;Un request bot déjà en place&lt;/li&gt;
  &lt;li&gt;Tester et ne pas se fier uniquement à la lecture du code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nous avons aussi pu prendre du recul et noter des conseils à appliquer. Chacun a pu transmettre ses idées à son équipe. Le rappel qu’une revue c’est aussi souligner le positif et pas seulement challenger le code. Cette conférence est très concrète et facilement applicable à Bedrock.&lt;/p&gt;

&lt;h2 id=&quot;fighting-impostor-syndrome-a-practical-handbook&quot;&gt;Fighting impostor syndrome: a practical handbook&lt;/h2&gt;

&lt;p&gt;Lors de cette conférence, &lt;a href=&quot;https://twitter.com/mupsigraphy&quot;&gt;Marine Gandy&lt;/a&gt; commence sa présentation par définir ce que le syndrome de l’imposteur est : une peur de l’échec, la crainte que quelqu’un dise que nous ne sommes pas capables, mais aussi le sentiment de ne pas mériter de réussir.
Elle nous explique que ce terme était tout d’abord attribué exclusivement aux femmes, mais qu’après une étude montrant que 70% de la population était touchée, il se serait généralisé à tous les genres.
Marine Gandy nous énonce que la tech est très touchée par ce phénomène pour plusieurs raisons comme le fait qu’il y ait beaucoup de renouveau dans ce corps de métier et que nous avons vite l’impression de retourner à nos débuts lorsque nous changeons de techno, créant ainsi un sentiment d’instabilité. 
Dans ce contexte, Marine nous parle de &lt;a href=&quot;https://www.universite-paris-saclay.fr/sites/default/files/media/2020-02/erreur-fondamentale-d-attribution-atelierfbjip2018.pdf&quot;&gt;l’effet Julien Lepers&lt;/a&gt; en prenant pour exemple le fait de se trouver dans une équipe de personnes bien plus expérimentées que nous où la situation influe sur la personne.
Pour finir, la conférencière nous présente plusieurs pistes à suivre pour éviter ou minimiser ce genre de sentiment :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Arrêter de se comparer aux autres&lt;/li&gt;
  &lt;li&gt;Se challenger sur de nouveaux domaines pour se rendre compte qu’on peut toujours apprendre&lt;/li&gt;
  &lt;li&gt;Travailler sur ses faiblesses pour permettre de se sentir plus compétent&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mon-combat-contre-larachnophobie&quot;&gt;Mon combat contre l’arachnophobie&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/Deuchnord&quot;&gt;Jérôme Tanghe&lt;/a&gt;, par son arachnophobie, nous a expliqué comment il est arrivé à contribuer à API Platform afin d’ajouter une option pour cacher la mascotte Webby. Et c’est ce dont il nous a parlé, à savoir comment bien démarrer sa première pull request pour contribuer au logiciel libre. La première étape étant de trouver le bon repository qui nous conviendrait parmi les projets existants. Dans le but d’identifier un sujet sur lequel contribuer, il ne faut pas hésiter à utiliser la fonctionnalité des tags sur les issues, par exemple le tag hacktoberfest dans le cadre d’API Platform. Une fois le sujet trouvé, il faut maintenant identifier la branche de base à partir de laquelle faire sa pull request, cela peut s’agir d’une version spécifique choisie ou même de la branche principale. La contribution au logiciel libre ou à l’open source ne passe pas uniquement par des pull requests uniquement basés sur le code. Il est également possible de tester les préversions (release-candidate), signaler des bugs, faire des suggestions, améliorer la documentation ou encore rédiger des traductions. Enfin, il est conseillé de prendre en compte chaque retour sur d’autres pull requests, cela permet notamment de découvrir les principes et standards du projet.&lt;/p&gt;

&lt;h2 id=&quot;pourquoi-je-nutilise-pas-api-platform&quot;&gt;Pourquoi je n’utilise pas API Platform&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/FredBouchery&quot;&gt;Frédéric Bouchery&lt;/a&gt;, s’est décidément perdu en se retrouvant à présenter cette conférence à l’API Platform conference 2022. Malgré tout, cela lui a permis de nous partager son introspection : Mais au fait, pourquoi il ne s’en sert pas ?&lt;br /&gt;
Dans cette première partie de sa conférence, Frédéric n’hésite pas à utiliser beaucoup de sarcasme. Il nous explique qu’il ne s’en sert pas, car API Platform est écrit en PHP et pour lui, c’est une technologie vieillissante qui ne devrait pas tarder à rejoindre Cobolt. Également parce qu’API Platform utilise Symfony, alors que tout le monde le sait très bien, enfin surtout les Google Trend, Laravel est plus utilisé dans le monde. De plus, Frédéric n’aime pas la magie et API Platform en est rempli : sérialisation et désérialisation à tout va alors que lui est capable de faire une API en seulement quelques lignes avec du PHP pur sans artifice. Enfin, il reproche à API Platform de devenir compliqué à utiliser si le projet qui se base dessus est complexe, trop de personnalisation et de configurations doivent être effectuées. &lt;br /&gt;
Dans cette deuxième partie, Frédéric fait tomber son masque sarcastique et décide de revenir sur les points qu’il a abordés précédemment :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Les tendances concernant un langage ne sont pas des bons indicateurs, en effet imaginer le futur ou la mort de PHP via des statistiques dont certaines basées sur l’opinion publique n’est pas une bonne façon de faire&lt;/li&gt;
  &lt;li&gt;PHP, c’est aujourd’hui 75% des sites du monde entier et 54% parmi le top 1000 des sites internet fréquemment utilisés&lt;/li&gt;
  &lt;li&gt;Malgré tout, il nous conseille de ne pas être mono technologique non plus. S’intéresser à d’autres langages est une bonne chose&lt;/li&gt;
  &lt;li&gt;API Plateform a quand même de bonnes performances : 99% de réponses avec une moyenne de 91 ms sur 5 000 requêtes comparées à son code PHP pur avec une moyenne de 21 ms pour 5 000 requêtes également sachant que son code ne prend pas en compte la sécurité&lt;/li&gt;
  &lt;li&gt;Le framework Laravel utilisant des composants Symfony, il est dès lors difficile de les comparer. Même si factuellement Laravel est plus utilisé dans le monde, on n’utilise pas du Laravel ou du Symfony pour les mêmes raisons et c’est une bonne chose que les deux coexistent ensemble&lt;/li&gt;
  &lt;li&gt;Il pensait qu’avec la complexité de ses projets, il était trop dur de passer à API Platform, mais il s’est rendu compte que ce n’était pas nécessairement vrai&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En conclusion de sa conférence et sans aucun sarcasme, Frédéric n’hésite pas à se livrer à nous et finit par nous dire qu’il va finalement utiliser API Platform 3 pour un projet.&lt;/p&gt;

&lt;h2 id=&quot;whats-new-in-caddy-the-webserver-of-api-platform&quot;&gt;What’s New in Caddy, the webserver of API Platform&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/_francislavoie&quot;&gt;Francis Lavoie&lt;/a&gt; nous a présenté plusieurs nouveautés dans &lt;strong&gt;Caddy&lt;/strong&gt;, un webserver écrit en Go ayant beaucoup de fonctionnalités activées par défaut et fourni avec API Platform dans &lt;a href=&quot;https://api-platform.com/docs/distribution/caddy/&quot;&gt;l’installation de base&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Parmi les nouveautés présentées, il nous a notamment parlé d’améliorations au niveau des &lt;strong&gt;request matchers&lt;/strong&gt; avec des matchers réutilisables, des expressions et des fonctions. Il a ensuite parlé d’une gestion native de &lt;a href=&quot;https://www.authelia.com&quot;&gt;Authelia&lt;/a&gt; permettant de déléguer facilement l’authentification depuis la configuration du serveur.
Enfin, la directive &lt;strong&gt;file_server&lt;/strong&gt; peut maintenant servir des fichiers provenant d’autres sources que le système de fichiers local, par exemple depuis un &lt;strong&gt;bucket S3&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Certaines fonctionnalités sont désormais activées par défaut comme &lt;strong&gt;HTTP/3&lt;/strong&gt; et la suppression du log des headers d’authentification où il est également possible de créer des filtres pour retirer d’autres informations.&lt;/p&gt;

&lt;h2 id=&quot;webauthn--se-débarrasser-des-mots-de-passe-définitivement&quot;&gt;WebAuthn : se débarrasser des mots de passe. Définitivement.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://mobile.twitter.com/florentmorselli&quot;&gt;Florent Morselli&lt;/a&gt; nous fait une proposition : il est de plus en plus possible aujourd’hui de se passer complètement des mots de passe.&lt;/p&gt;

&lt;p&gt;Il a commencé par nous rappeler les problèmes récurrents : mots de passe trop faibles et/ou trop courts, réutilisation sur plusieurs sites, la multiplication des fuites de bases de données, etc.&lt;/p&gt;

&lt;p&gt;La solution proposée : &lt;a href=&quot;https://webauthn.io&quot;&gt;WebAuthn&lt;/a&gt;, un standard d’authentification multifacteur permettant d’identifier les utilisateurs via des données biométriques, des clés physiques ou sans aucune information après la première authentification sur un appareil.&lt;/p&gt;

&lt;p&gt;Côté implémentation, Florent nous a présenté deux projets : un &lt;a href=&quot;https://github.com/web-auth/webauthn-symfony-bundle&quot;&gt;bundle Symfony&lt;/a&gt; pour le côté backend et un &lt;a href=&quot;https://github.com/web-auth/webauthn-stimulus&quot;&gt;composant Symfony UX&lt;/a&gt; pour le frontend.&lt;/p&gt;

&lt;h2 id=&quot;php-websockets-or-how-to-communicate-with-clients-in-real-time&quot;&gt;PHP WebSockets, or how to communicate with clients in real-time&lt;/h2&gt;

&lt;p&gt;Habituellement connue pour faire des conférences sur Git, &lt;a href=&quot;https://twitter.com/vanamerongen&quot;&gt;Pauline Vos&lt;/a&gt; nous a fait une démo en live de l’utilisation des &lt;strong&gt;WebSockets&lt;/strong&gt; en PHP.&lt;/p&gt;

&lt;p&gt;Elle a commencé par une rapide explication de différents protocoles de communication en temps réel existant : &lt;em&gt;WebRTC&lt;/em&gt; chez Google, &lt;em&gt;Mercure&lt;/em&gt; chez Symfony et &lt;em&gt;Livewire&lt;/em&gt; chez Laravel.
Les WebSockets étant de simples tunnels à données, ces protocoles permettent de les enrichir de diverses fonctionnalités : identification, structures de messages, reconnexion auto, etc.&lt;/p&gt;

&lt;p&gt;Vient ensuite la démo qui consistait en une mini webapp de tombola en ligne. Elle a été découpée en différentes étapes (préparées dans des branches Git) avec, pour chaque étape, une présentation du code et des tests en live via l’outil &lt;a href=&quot;https://websocketking.com&quot;&gt;WebSocketKing&lt;/a&gt;.
Pour l’étape finale, un QR code a été affiché à l’écran pour permettre aux spectateurs et spectatrices de participer en live. Le hasard a voulu que le nom tiré soit &lt;a href=&quot;https://twitter.com/s0yuka&quot;&gt;Antoine Bluchet&lt;/a&gt;, le contributeur principal d’API Platform !&lt;/p&gt;

&lt;h2 id=&quot;comment-remettre-la-tech-au-service-du-bien-commun-&quot;&gt;Comment (re)mettre la tech au service du bien commun ?&lt;/h2&gt;

&lt;p&gt;Pour conclure ces deux jours de conférences intenses en savoir et en émotions, animé par &lt;a href=&quot;https://twitter.com/gregcop1&quot;&gt;Grégory Copin&lt;/a&gt; : &lt;a href=&quot;https://twitter.com/HeleneMaitre&quot;&gt;Hélène Marchois&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/paulandrieux&quot;&gt;Paul Andrieux&lt;/a&gt; et &lt;a href=&quot;https://twitter.com/dunglas&quot;&gt;Kévin Dunglas&lt;/a&gt; nous ont proposé une excellente table ronde riche en idées et porteuse (d’un peu) d’espoir. Le sujet étant de savoir s’il est possible de faire évoluer la tech dans le but de rejoindre les objectifs de départ du logiciel libre.&lt;/p&gt;

&lt;p&gt;L’apparition du mouvement du logiciel libre puis celle du web se sont bâties sur de grands espoirs et de beaux objectifs : émancipation des individus, partage des connaissances à l’échelle planétaire, liberté d’expression, constructions de bien commun appartenant à toutes et tous et maintenues collectivement. Malheureusement, force est de constater que le web comme le logiciel libre ont été détournés de leurs objectifs de base et que les idéaux qu’ils portaient ont été bien mis à mal : surveillance de masse, capitalisation de ces biens communs et précarisation des individus et des libertés.&lt;/p&gt;

&lt;p&gt;Kévin nous explique ensuite la différence entre logiciel libre et open source : API Platform est un logiciel libre plus qu’open source, même si techniquement, c’est les deux. Historiquement, le logiciel libre est apparu dans le but de créer un bien commun pour l’humanité et s’est élargi avec, notamment, la notion de commons via Wikipédia. La différence avec l’open source est que si le code est disponible, ce n’est pas uniquement pour bâtir tout et n’importe quoi avec, mais c’est un code qui porte des valeurs et qui a pour but de faire en sorte que tout le monde sans distinction puisse facilement créer de nouveaux outils qui puissent être partagés, qui appartiennent à un ensemble de personnes et qui vont socialiser le travail qui est réalisé en commun là-dessus. Le but du logiciel libre à la base, c’est de faire en sorte que ces valeurs de transparence, de démocraties, de partage de connaissance s’étendent via le logiciel à l’ensemble de la société. Donc si vous aussi, vous voulez utiliser un logiciel libre, la condition est que, vous aussi, vous devez faire quelque chose qui sert l’humanité : créer un bien commun et mettre aussi à disposition le code source du logiciel. En l’occurrence, API Platform, est une licence permissive, c’est-à-dire qu’il est possible de faire tout et n’importe quoi avec, mais ce n’est pas le cas pour le logiciel &lt;a href=&quot;https://github.com/dunglas/mercure&quot;&gt;Mercure&lt;/a&gt; par exemple, où si vous l’utilisez et le modifiez, vous êtes obligé de redistribuer les éléments.&lt;/p&gt;

&lt;p&gt;Quant à l’open source, c’est une initiative qui est arrivée bien après le logiciel libre et est une offensive de multinationale de la technologie qui veut dépolitiser le mouvement du logiciel libre. Le point de départ étant que, techniquement, c’est très intéressant de créer du logiciel ensemble, de partager les coûts de maintenance entre différentes entreprises ou personnes et c’est surtout très intéressant d’avoir accès au secret de fabrication pour les choses qui ont peu de valeur ajoutée. Mais l’objectif final étant de capitaliser, faire du business et capter la valeur sur ce qui a une très forte valeur ajoutée. Par exemple, pour macOS, toutes les briques de bases sont complètement libres, développées par une communauté de personne, d’entreprise et essentiellement beaucoup de bénévoles et d’hobbyiste. Et dans ce cas-là, ce qui a une extrême valeur ajoutée, c’est l’UI au-dessus du matériel ou encore les jolis outils qui coûtent une fortune. Ce qui permet à Apple d’être la boite la plus riche du monde en réutilisant le travail de personnes qui n’ont pas fait ça pour macOS à la base.&lt;/p&gt;

&lt;p&gt;Les trois personnes intervenantes représentant chacune une SCOP, la table ronde s’est ensuite naturellement tournée vers le lien entre le logiciel libre et le mouvement coopératif. Le lien étant la vision politique du logiciel libre via son socle de valeur : liberté, transparence, gouvernance partagée et coopération. On retrouve cet esprit de transparence, de fonctionnement démocratique et de fonctionnement par coopération à l’intérieur de la SCOP et entre les différentes SCOP.
S’en est ajoutée la question du sens par rapport à son travail. Effectivement, le logiciel libre, comme le mouvement coopératif, redonne du sens, principalement car cela ouvre le champ des possibles en vue des enjeux climatiques et sociaux actuels. Même si l’on vit dans une société qui est régie par le profit, la compétition féroce et le pouvoir, il existe des possibilités de s’organiser autrement et qui fonctionne quand même à une échelle conséquente, bien qu’encore insuffisante. Des actions individuelles existent et sont possibles. Pour cela, nous vous recommandons de regarder &lt;a href=&quot;https://www.youtube.com/watch?v=XpY7p062zIo&amp;amp;list=PL3hoUDjLa7eSo7-CAyiirYfhJe4h_Wxs4&quot;&gt;la conférence d’Hélène&lt;/a&gt; à l’API Platform Conference de l’année dernière qu’elle résume et étoffe lors de cette table ronde.&lt;/p&gt;

&lt;p&gt;Et bien sûr, quand cela sera possible, nous vous encourageons fortement de regarder le replay de cette conférence (&lt;a href=&quot;https://www.youtube.com/c/Les-tilleulsCoop&quot;&gt;sur la chaine des Tilleuls&lt;/a&gt;) qui redonne un peu d’espoir quant aux futurs des organisations démocratiques de nos métiers.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Merci à toutes et tous les speakers, à API Platform ainsi qu’aux Tilleuls-coop pour cet évènement ! Nous avons pu en apprendre plus sur API Platform et revenir la tête pleine d’idées pour nos projets futurs et présents ! À l’année prochaine peut-être !&lt;/p&gt;</content><author><name>backend</name></author><category term="conferences" /><category term="backend" /><category term="api" /><category term="php" /><summary type="html">En cette période de rentrée, Bedrock participait à l’API Platform Conference 2022, où nous avons eu le plaisir d’assister à une partie des conférences proposées. Un grand merci à toutes les personnes chez Les-Tilleuls.coop pour l’organisation de cet évènement ! Pour cette seconde édition, le programme était réparti sur deux jours, les 15 &amp;amp; 16 septembre 2022.</summary></entry><entry><title type="html">Bedrock Dev Facts #18</title><link href="https://tech.bedrockstreaming.com/2022/10/07/bedrock-dev-facts-18.html" rel="alternate" type="text/html" title="Bedrock Dev Facts #18" /><published>2022-10-07T00:00:00+00:00</published><updated>2022-10-07T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2022/10/07/bedrock-dev-facts-18</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2022/10/07/bedrock-dev-facts-18.html">&lt;p&gt;C’est maintenant l’automne 🍁🎃, on vous propose les devfacts de cette fin d’été et il y a du lourd !&lt;/p&gt;

&lt;h1 id=&quot;cogito-ergo-sum&quot;&gt;Cogito ergo sum&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Le seul truc que je “sais” c’est “on paye 200 par mois pour avoir un direct connect” ; mais peut-être que je sais que je ne sais rien.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;👋🔥🙊🎉&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Je te fais confiance, je te laisserai mettre des emoji sur ma tombe&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;la-priorité-cest-important&quot;&gt;La priorité c’est important&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;C’est plus important que des trucs moins importants.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;biafine-nécessaire&quot;&gt;Biafine nécessaire&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Un QA voulant faire une vanne au morning&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Le QA: “Qu’est-ce qui a deux lettres et qui marche pas?”&lt;/p&gt;

  &lt;p&gt;Réponse du dev: “La QA ?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;3615-croissants&quot;&gt;3615 croissants&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Parlant d’une évolution majeure&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Est-ce que c’est OK pour vous pour qu’on MEP aujourd’hui ou pas ?&lt;/p&gt;

  &lt;p&gt;À priori pas de contre-indications. Peut-être acheter directement une boulangerie ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;sugar-&quot;&gt;Sugar !&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;C’est du sucre syntaxique&lt;/p&gt;

  &lt;p&gt;Quand il y a trop de sucre, tu risques du diabète&lt;/p&gt;

  &lt;p&gt;Surtout que le diabète syntaxique, c’est le pire&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;la-metric&quot;&gt;LA metric&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Je crois qu’on est bon, on a pas plus d’erreur que d’user.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;le-verre-à-moitié-plein&quot;&gt;Le verre à moitié plein&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Du coup ça a cassé je suppose?&lt;/p&gt;

  &lt;p&gt;Ouais, enfin pas totalement, presque un succès.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;la-montagne-ça-vous-gagne&quot;&gt;La montagne ça vous gagne&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;En parlant de son ascension du Ventoux à vélo:&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Moi je pensais vraiment que j’étais prêt”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;mais-pourquoi-&quot;&gt;Mais pourquoi ?&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Essayant de comprendre pourquoi une commande met beaucoup de temps sur sa machine.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Je suis sur master, branche à jour, yarn réalisé juste avant, et je pense pas que mon PC soit particulièrement atteint de maladie congénitale
(Enfin, j’espère pas?)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;read-me-please&quot;&gt;Read me please&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tout est dans le README (que les gens liront pas de toute façon mais bon).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;les-étoiles-️&quot;&gt;Les étoiles ⭐️&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Être responsable d’un incident, c’est pas marrant c’est sûr. 
Mais ça forme !
Casser la prod et la réparer ça donne une étoile sur le maillot, et je peux te dire qu’on est plusieurs ici à avoir plus d’étoiles que le drapeau américain.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;review-main-dans-la-main&quot;&gt;Review main dans la main&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;La peer review, c’est la meilleure des reviews.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;patterns&quot;&gt;Patterns&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;A : “Je pense que je vais devoir faire un singleton pour ça…”&lt;/p&gt;

  &lt;p&gt;B : “Sinon, tu devrais pouvoir aussi faire des multitons ?”&lt;/p&gt;

  &lt;p&gt;C : “On appelle ça une boîte de conserve.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;ම&quot;&gt;ම&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ça devait être en base64 des Maya&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;time-is-relative&quot;&gt;Time is relative&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Je pense que la première fois ce sera long …et après ce ne sera pas long, mais ce sera long quand même.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;bim&quot;&gt;:bim:&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Alors l’intelligence elle existe déjà, elle s’appelle vous-même… mais actuellement elle n’est pas disponible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;️&quot;&gt;☕️&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tu peux mettre autant de code brouette dans tes pull request que de sucre dans ton café : L’important, c’est que ça soit bien dilué. 
Moi, je ne sucre pas mon café.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;-1&quot;&gt;🔍&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Normalement j’utilise un vrai IDE. Mais je ne sais pas monter le zoom sur PHPStorm&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;encore-une-histoire-de-date&quot;&gt;Encore une histoire de date&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;C’est une fois par semaine, les releases mensuelles ?&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Bedrock</name></author><category term="devfacts" /><category term="humour" /><summary type="html">C’est maintenant l’automne 🍁🎃, on vous propose les devfacts de cette fin d’été et il y a du lourd !</summary></entry><entry><title type="html">Bullet journal #LFT 30/09/22</title><link href="https://tech.bedrockstreaming.com/bullet-journal" rel="alternate" type="text/html" title="Bullet journal #LFT 30/09/22" /><published>2022-09-30T00:00:00+00:00</published><updated>2022-09-30T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/bullet-journal</id><content type="html" xml:base="https://tech.bedrockstreaming.com/bullet-journal">&lt;p&gt;Bullet Journal.
Présenté par Bénédicte Garcia.&lt;/p&gt;</content><author><name>Bénédicte Garcia</name></author><category term="lft" /><category term="tech" /><summary type="html">Bullet Journal. Présenté par Bénédicte Garcia.</summary></entry><entry><title type="html">Chaos engineering dans le frontend #LFT 30/09/22</title><link href="https://tech.bedrockstreaming.com/chaos-engineering-frontend" rel="alternate" type="text/html" title="Chaos engineering dans le frontend #LFT 30/09/22" /><published>2022-09-30T00:00:00+00:00</published><updated>2022-09-30T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/chaos-engineering-frontend</id><content type="html" xml:base="https://tech.bedrockstreaming.com/chaos-engineering-frontend">&lt;p&gt;Découvrez comment faire du chaos engineering dans le frontend.
Présenté par Thibaud Courtoison.&lt;/p&gt;</content><author><name>Thibaud Courtoison</name></author><category term="lft" /><category term="tech" /><summary type="html">Découvrez comment faire du chaos engineering dans le frontend. Présenté par Thibaud Courtoison.</summary></entry><entry><title type="html">Comment cloner Shazam ! #LFT 30/09/22</title><link href="https://tech.bedrockstreaming.com/comment-cloner-shazam" rel="alternate" type="text/html" title="Comment cloner Shazam ! #LFT 30/09/22" /><published>2022-09-30T00:00:00+00:00</published><updated>2022-09-30T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/comment-cloner-shazam</id><content type="html" xml:base="https://tech.bedrockstreaming.com/comment-cloner-shazam">&lt;p&gt;Découvrez comment cloner Shazam!
Présenté par Moustapha Agack.&lt;/p&gt;</content><author><name>Moustapha Agack</name></author><category term="lft" /><category term="tech" /><summary type="html">Découvrez comment cloner Shazam! Présenté par Moustapha Agack.</summary></entry><entry><title type="html">Courir: la voi(e/x) du fondeur #LFT 30/09/22</title><link href="https://tech.bedrockstreaming.com/courir-la-voie-du-fondeur" rel="alternate" type="text/html" title="Courir: la voi(e/x) du fondeur #LFT 30/09/22" /><published>2022-09-30T00:00:00+00:00</published><updated>2022-09-30T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/courir-la-voie-du-fondeur</id><content type="html" xml:base="https://tech.bedrockstreaming.com/courir-la-voie-du-fondeur">&lt;p&gt;Courir: la voi(e/x) du fondeur
Présenté par Thomas Sontag.&lt;/p&gt;</content><author><name>Thomas Sontag</name></author><category term="lft" /><category term="tech" /><summary type="html">Courir: la voi(e/x) du fondeur Présenté par Thomas Sontag.</summary></entry><entry><title type="html">La facilitation spectacle : Entre artifices et intention #LFT 30/09/22</title><link href="https://tech.bedrockstreaming.com/la-facilitation-spectacle" rel="alternate" type="text/html" title="La facilitation spectacle : Entre artifices et intention #LFT 30/09/22" /><published>2022-09-30T00:00:00+00:00</published><updated>2022-09-30T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/la-facilitation-spectacle</id><content type="html" xml:base="https://tech.bedrockstreaming.com/la-facilitation-spectacle">&lt;p&gt;La facilitation spectacle : Entre artifices et intention.
Présenté par Camille Cousin &amp;amp; Marie-Andrée Jolibois.&lt;/p&gt;</content><author><name>Camille Cousin</name></author><category term="lft" /><category term="tech" /><summary type="html">La facilitation spectacle : Entre artifices et intention. Présenté par Camille Cousin &amp;amp; Marie-Andrée Jolibois.</summary></entry><entry><title type="html">Nearby interaction, Airtags or how your iPhone shares your location #LFT 30/09/22</title><link href="https://tech.bedrockstreaming.com/nearby-interaction-airtags" rel="alternate" type="text/html" title="Nearby interaction, Airtags or how your iPhone shares your location #LFT 30/09/22" /><published>2022-09-30T00:00:00+00:00</published><updated>2022-09-30T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/nearby-interaction-airtags</id><content type="html" xml:base="https://tech.bedrockstreaming.com/nearby-interaction-airtags">&lt;p&gt;Découvrez comment votre iPhone partage votre localisation.
Présenté par Oleksandr Balystky.&lt;/p&gt;</content><author><name>Oleksandr Balystky</name></author><category term="lft" /><category term="tech" /><summary type="html">Découvrez comment votre iPhone partage votre localisation. Présenté par Oleksandr Balystky.</summary></entry></feed>