<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://tech.bedrockstreaming.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://tech.bedrockstreaming.com/" rel="alternate" type="text/html" /><updated>2023-07-07T09:19:14+00:00</updated><id>https://tech.bedrockstreaming.com/feed.xml</id><title type="html">Bedrock Tech Blog</title><subtitle>Blog technique de Bedrock</subtitle><entry><title type="html">You Need a Custom Gradle Plugin, and Here’s Why</title><link href="https://tech.bedrockstreaming.com/2023/07/07/gradle-convention-plugins.html" rel="alternate" type="text/html" title="You Need a Custom Gradle Plugin, and Here’s Why" /><published>2023-07-07T00:00:00+00:00</published><updated>2023-07-07T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2023/07/07/gradle-convention-plugins</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2023/07/07/gradle-convention-plugins.html">&lt;p&gt;In the last couple of years, Gradle has been encouraging developers to work towards modularizing their projects. Of course, when effectively implemented, this approach offers several advantages, with build parallelization being a significant factor.&lt;/p&gt;

&lt;p&gt;But splitting your Android project into many modules has a major drawback, at first: you need to write a build file for each of them.&lt;/p&gt;

&lt;h2 id=&quot;the-naive-approach&quot;&gt;The naive approach&lt;/h2&gt;

&lt;p&gt;One might be tempted to create “common” Groovy files (also known as “script plugins”) and import them into each module. We can also define some properties in the root project, which can then be used in each subproject.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;com.android.library&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;kotlin-android&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;kotlin-kapt&apos;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// This imports a Gradle file which we can use everywhere&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;from:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;/lib-common.gradle&apos;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// compileSdkVersion is defined in the root project&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compileSdkVersion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compileSdkVersion&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;defaultConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;minSdkVersion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;minSdkVersion&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;targetSdkVersion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;targetSdkVersion&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;consumerProguardFiles&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;proguard-rules.pro&apos;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;testInstrumentationRunner&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;androidx.test.runner.AndroidJUnitRunner&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;compileOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sourceCompatibility&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sourceCompatibility&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;targetCompatibility&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;targetCompatibility&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;kotlinOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;jvmTarget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;kotlinJvmTarget&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;freeCompilerArgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;kotlinCompilerArgs&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Dependencies are defined in a map in the root project&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;androidx.core:core-ktx&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;androidx.paging:paging-runtime-ktx&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;com.squareup.okhttp3:okhttp&apos;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;rootProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;applyTestDependenciesOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rootProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;applyToothpickDependenciesOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the approach we were using before moving to a better system. These few following drawbacks made it obsolete and not recommended by Gradle maintainers.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Script plugins need to be imported &lt;strong&gt;individually&lt;/strong&gt; for each module in your project. This means that your heap will grow a lot, and this approach will scale terribly on a project with many modules.&lt;/li&gt;
  &lt;li&gt;Relying on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rootProject&lt;/code&gt; in your modules−or relying on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subprojects&lt;/code&gt; from your root project, for that matter−will add unwanted dependencies between your modules, which will in turn defeat optimization mechanisms designed by Gradle, such as &lt;a href=&quot;https://docs.gradle.org/current/userguide/multi_project_configuration_and_execution.html#sec:configuration_on_demand&quot;&gt;configuration-on-demand&lt;/a&gt; or &lt;a href=&quot;https://gradle.github.io/configuration-cache/&quot;&gt;configuration cache&lt;/a&gt;. These are made to help bring down the time Gradle spends configuring your project (i.e. reading the configuration and building the task graph) each time you build; it goes without saying that getting this time to decrease will make for happier and more productive developers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to these issues, we wanted to start modularizing much of our project. We already had about 150 modules, but we planned on making many more soon, so this would be a good time to find a future-proof architecture. Plus, this was a good opportunity to clear some tech debt: cleaning unused dependencies, moving to a version catalog…&lt;/p&gt;

&lt;h2 id=&quot;modern-problems-call-for-modern-solutions&quot;&gt;Modern problems call for modern solutions&lt;/h2&gt;

&lt;h3 id=&quot;centralizing-version-management&quot;&gt;Centralizing version management&lt;/h3&gt;

&lt;p&gt;A significant challenge we faced, which is also common in the industry, is managing dependencies and versions across the entire project. Hard-coding the version of okhttp for every module is not recommended, as it can be tedious and error-prone.&lt;/p&gt;

&lt;p&gt;There are several known solutions to this problem, such as storing versions in the root project or using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buildSrc&lt;/code&gt; script. But not only are some solutions bad for your build performance (see: reliance on the root project), almost all of them share an insoluble issue: tooling support.&lt;/p&gt;

&lt;p&gt;There are multiple ways to be informed when your dependencies can be upgraded. You can rely on your IDE to highlight your outdated dependencies, which it does by trying to look for some string that… looks like a Gradle . You can also rely on a tool like Renovate, which does the same thing on your CI. In either case, you probably could use a standard solution, where there is some kind of standard to declare your centralized dependencies, which both humans and machines can rely on consistently.&lt;/p&gt;

&lt;p&gt;To solve this problem, Gradle introduced the version catalog:&lt;/p&gt;

&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[versions]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;androidCompileSdk&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;33&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;androidGradlePlugin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;7.4.2&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;jvm&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;17&quot;&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[libraries]&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;android-billingclient-core&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.android.billingclient:billing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;version.ref&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;billing&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;android-billingclient-ktx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.android.billingclient:billing-ktx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;version.ref&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;billing&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;android-gradle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.android.tools.build:gradle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;version.ref&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;androidGradlePlugin&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;android-installreferrer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.android.installreferrer:installreferrer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2.2&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;android-tools-desugar-jdk-libs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.android.tools:desugar_jdk_libs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.1.5&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;android-tools-lint-api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.android.tools.lint:lint-api&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;version.ref&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;lint&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[plugins]&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;android-app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.android.application&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;version.ref&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;androidGradlePlugin&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;android-library&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.android.library&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;version.ref&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;androidGradlePlugin&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This format has been great, even for a project as big as ours. It’s flexible: you can now store library versions, but plugin versions as well, and even just plain versions, which you can get from your custom plugin later on!&lt;/p&gt;

&lt;p&gt;And it’s a standard format, so it works out of the box with tools like Renovate or Android Studio.&lt;/p&gt;

&lt;h3 id=&quot;code-reuse&quot;&gt;Code reuse&lt;/h3&gt;

&lt;p&gt;The direction of Gradle best practices in our industry is evident, with numerous talks and blog posts from big tech companies and even Gradle itself emphasizing the use of convention plugins.&lt;/p&gt;

&lt;p&gt;While the name may sound intimidating, convention plugins are actually pretty straightforward. They are Gradle plugins that can be applied to each module, ensuring consistent configuration across all of them.&lt;/p&gt;

&lt;p&gt;Convention plugins offer the advantages of build scripts and the elimination of duplicate configuration, all without the need for a dependency on the root project. The convention plugin is an isolated project, which could be stored in your monorepo, but could very well be stored in a completely different place. Unlike build scripts, it’s compiled and instantiated only once, and is then ×*called** once for each module.&lt;/p&gt;

&lt;p&gt;Creating a convention plugin is similar to creating any custom Gradle plugin. If you haven’t had to do this yet, it looks like this:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// settings.gradle&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// …&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;includeBuild&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;gradle-plugins/convention-plugin&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will include your convention plugin alongside your main project at build time, so you will be able to use its result for your main project’s build system.&lt;/p&gt;

&lt;p&gt;You’ll need a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;settings.gradle(.kts)&lt;/code&gt; file for your plugin. If your plugin is located in your monorepo, it will be very useful to be able to access its Version Catalog, so you can even share your dependency versions in the build files of your plugin.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dependencyResolutionManagement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;versionCatalogs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;libs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;../../gradle/libs.versions.toml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;gradlePluginPortal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rootProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;gradle-plugin-convention&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, you need a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle(.kts)&lt;/code&gt; configuration script for your custom plugin. In order to configure &lt;strong&gt;other&lt;/strong&gt; modules with the Android Gradle Plugin (AGP), for example, you will need access to the AGP’s classpath &lt;strong&gt;at build time&lt;/strong&gt; in your plugin. You might be tempted to apply the AGP as a plugin, but you actually need to import it as an &lt;strong&gt;implementation&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.bedrockstreaming&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0-SNAPSHOT&quot;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This is a Gradle plugin written in Kotlin, import the Gradle Kotlin DSL&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;`kotlin-dsl`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;toolchain&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// This sets the JVM version needed to build this project.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Notice that we set this version in the Version Catalog, and we can use it here!&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;languageVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JavaLanguageVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jvm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;gradlePlugin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Your custom plugin&apos;s module can actually contain many plugins.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Create as many as you need - if you have multiple application modules, &lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// it might be useful to at least create one for library modules,&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// and one for application modules.&lt;/span&gt;

        &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;androidMobileAppPlugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.bedrockstreaming.convention.application.mobile&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;implementationClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.bedrockstreaming.gradle.convention.android.application.AndroidMobileApplicationPlugin&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;androidLibraryPlugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.bedrockstreaming.convention.library.android&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;implementationClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.bedrockstreaming.gradle.convention.android.library.AndroidLibraryPlugin&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jvmLibraryPlugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.bedrockstreaming.convention.library.jvm&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;implementationClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.bedrockstreaming.gradle.convention.jvm.JvmLibraryPlugin&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Note that we add the AGP and Kotlin plugin as implementations, which is unusual.&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;implementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gradle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;implementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kotlin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gradle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, you’ll need an &lt;strong&gt;extension&lt;/strong&gt;, which is Gradle speak to describe a configuration interface. Each option you will add to your extension will be usable from your module’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle(.kts)&lt;/code&gt;. This is one of the most powerful advantages of custom plugins: you can reuse code and still make it configurable!&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BaseConventionPluginExtension&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;enableCompose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Enable Jetpack Compose on this module, and add core libraries.
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;composeToolkit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;enableCompose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// …&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, it’s time to create the actual plugin class, the entry point for Gradle (specified in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;implementationClass&lt;/code&gt; above).&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.bedrockstreaming.gradle.convention.android.library&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.gradle.api.Plugin&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.gradle.api.Project&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.gradle.kotlin.dsl.create&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AndroidLibraryPlugin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Plugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// This is where we declare that our extension will be available in a bedrock {} block.&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AndroidLibraryExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bedrock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// …&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it for boilerplate! You’re free to architect the internals of your Gradle plugin however you want, but this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plugin::apply&lt;/code&gt; method will be the entry point for your configuration code. It will be called for each module on which your plugin has been applied.&lt;/p&gt;

&lt;p&gt;For example, here’s how you might apply the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.android.library&lt;/code&gt; plugin to your module, and configure it:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// getPluginId is an extension function that reads the plugin ID from the version catalog&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPluginId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.library&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LibraryExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;compileSdk&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;androidCompileSdk&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;androidComponents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;finalizeDsl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LibraryExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;defaultConfig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;minSdk&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;androidMinSdk&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;consumerProguardFiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;proguard-rules.pro&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can reuse this principle and apply it to all your common configuration blocks. You can automatically add dependencies, add some unit testing configuration, set the correct JDK toolchain, build flags, and even configure other third-party plugins with the same mechanism. The sky is the limit!&lt;/p&gt;

&lt;h2 id=&quot;end-result&quot;&gt;End result&lt;/h2&gt;

&lt;p&gt;Remember our old build file, with its included Groovy scripts, referenced root project, custom extension functions? Here’s what it looks like now!&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bedrock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bedrock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;moshi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;codegen:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;composeToolkit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;unitTests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;androidx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ktx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;androidx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;paging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ktx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Much nicer, isn’t it? 🤩&lt;/p&gt;

&lt;h2 id=&quot;in-summary&quot;&gt;In summary&lt;/h2&gt;

&lt;p&gt;The scalability of our project has been significantly improved through the migration from included build scripts and root project dependencies. Although writing custom Gradle plugins can initially pose challenges due to the potential for frustrating errors resulting from a minor misunderstanding of the Gradle API, once you are set up, the maintenance becomes much easier. It feels more rewarding to work in harmony with Gradle, rather than working against the optimizations introduced with each Gradle update, knowing that we can automatically benefit from them. The version catalogs provide a convenient method for organizing dependencies, and the fact that our tooling recognizes the format is a significant advantage.&lt;/p&gt;

&lt;p&gt;In conclusion, for developers working on medium-to-large Gradle projects, whether in the Android realm or elsewhere, I highly recommend exploring the use of convention plugins. Mastering them is not as difficult as it may seem, and they provide effective solutions to address real challenges that we all face day-to-day.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Cover image © Isis Petroni&lt;/small&gt;&lt;/p&gt;</content><author><name>Baptiste Candellier</name></author><category term="android" /><category term="gradle" /><category term="plugin" /><summary type="html">In the last couple of years, Gradle has been encouraging developers to work towards modularizing their projects. Of course, when effectively implemented, this approach offers several advantages, with build parallelization being a significant factor.</summary></entry><entry><title type="html">Deux jours à Android Makers by Droidcon 2023</title><link href="https://tech.bedrockstreaming.com/2023/06/19/android-makers-23.html" rel="alternate" type="text/html" title="Deux jours à Android Makers by Droidcon 2023" /><published>2023-06-19T00:00:00+00:00</published><updated>2023-06-19T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2023/06/19/android-makers-23</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2023/06/19/android-makers-23.html">&lt;p&gt;Il y a quelques semaines déjà, nous avons pu nous rendre à LA conférence annuelle Android en France : Android Makers. Conférence qui s’associe tout juste avec une initiative un peu plus internationale qui est DroidCon (cf. &lt;a href=&quot;https://tech.bedrockstreaming.com/2022/11/22/droidcon-london-2022.html&quot;&gt;notre précédent article&lt;/a&gt;, par exemple).
L’occasion d’assister à des conférences de speakers du monde entier mais également de networker et revoir avec plaisir beaucoup de têtes connues !&lt;/p&gt;

&lt;p&gt;Voici pêle-mêle nos retours et les apprentissages que nous avons pu collecter durant ces 2 jours intenses !&lt;/p&gt;

&lt;h3 id=&quot;par-antoine-pitel&quot;&gt;Par @Antoine Pitel&lt;/h3&gt;

&lt;p&gt;Si on devait retenir une chose de la conférence &lt;strong&gt;The Rise and Fall of Feature Teams&lt;/strong&gt; de Danny Preussler, on pourrait dire en résumé que “Les développeurs ont besoin d’autres développeurs de la même technologie pour s’épanouir”. Le format en Feature Team peut facilement tomber dans le piège de l’isolement du développeur sur sa technologie. Il est fondamentale de s’assurer soit de multiplier les profils de même technos dans une team, soit d’organiser un partage de connaissance et du pair programming très récurrent.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/a40q41ghSks&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;p&gt;La conférence &lt;strong&gt;Practical ADB usage to enhance your life!&lt;/strong&gt; de Benjamin Kadel était, pour moi, définitivement la plus passionnante (au sens propre du terme passionné). L’usage d’ADB pour optimiser le travail quotidien en développement comme en test me parait ultra efficace. On a pu y découvrir notamment une astuce particulièrement utile : il est possible via ADB de nettoyer, refuser ou accepter les permissions demandées au framework par l’app. Un gros gain de temps quand on doit développer sur une feature qui nécessite une permission spécifique (et le statut de celle-ci) .&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/DcU1czPxQ10&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;p&gt;Je ne me suis jamais vraiment penché sur Android Auto, shame on me 😉 Mais la conférence “Going on a road trip with Android Auto” de Carlos Mota nous a ouvert un tout nouvel univers de jeu que j’ai hâte d’explorer chez Bedrock ! En effet grâce aux dernières évolutions d’Android Auto il est désormais possible de publier, comme avant, des services audio (radio, podcast,..), mais désormais aussi des services vidéo ! L’accès vidéo n’étant disponible qu’à l’arrêt du véhicule, information que le framework Android Automotive fourni à travers la classe &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CarUxRestrictions&lt;/code&gt; du package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android.car.drivingstate&lt;/code&gt; et sa méthode &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isRequiresDistractionOptimization()&lt;/code&gt;.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/wguYRGmVeiw&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;p&gt;Il est tellement plaisant, mais rare, d’assister à des conférences qui parlent de CD et de publication ! En cela la conférence &lt;strong&gt;How to ship apps better, faster, stronger&lt;/strong&gt; de Fabien Devos était passionnante et pleine d’apprentissage à diffuser au plus grand nombre ! J’en retiendrai 2 de mon côté :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;La notion de “release Train” et cette métaphore du train qui part à heure fixe de manière régulière. Avec de plus l’info que la périodicité hebdomadaire semble être adaptée aux projets qui collaborent avec des stores comme App Store et Google Play Store ;&lt;/li&gt;
  &lt;li&gt;L’absolue nécessité de disposer d’un système de feature flipping robuste et couvrant le maximum du fonctionnel du service. Un vaste chantier !&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/dyRuhfs2nsE&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;par-baptiste-candellier&quot;&gt;Par @Baptiste Candellier&lt;/h3&gt;

&lt;p&gt;Comme tous les ans, Android Makers nous propose des talks variés, des dernières nouveautés de Jetpack Compose au management d’équipe, en passant par l’habituelle keynote humoristique de Romain Guy et Chet Haase. J’ai sélectionné pour vous mes talks préférés.&lt;/p&gt;

&lt;p&gt;Le talk &lt;strong&gt;90s Website … in 2023 on mobile in Compose … for science&lt;/strong&gt; de &lt;a href=&quot;https://androiddev.social/@maiatoday&quot;&gt;Maia Grotepass&lt;/a&gt; a été pour moi le plus original, intriguant et intéressant de la conférence. Maia nous a guidé à travers son projet de cœur : reproduire, grâce à Jetpack Compose, le &lt;em&gt;look-and-feel&lt;/em&gt; d’un site web des années 90. Un mélange de technologique moderne, qui est écrit pour tourner à la fois sur Android mais également sur desktop, grâce &lt;a href=&quot;https://github.com/JetBrains/compose-jb/&quot;&gt;aux efforts de Jetbrains sur le multi-plateforme&lt;/a&gt;. Un projet qui pourrait sembler futile au premier abord, mais Maia nous plonge dans son parcours nostalgique tout en nous expliquant de manière pédagogique les APIs d’animation et de dessin de Compose, que nous avons assez peu souvent l’occasion d’utiliser dans des projets professionnels, qui se reposent souvent sur des composants pré-conçus. À voir, que vous soyez amateur·ice de web old-school ou de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Canvas&lt;/code&gt;.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/yF8Z0tK3CFE&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Forging the path from monolith to multi-module app&lt;/strong&gt;, par &lt;a href=&quot;https://androiddev.social/@marcogom&quot;&gt;Marco Gomiero&lt;/a&gt;, séduira les adeptes d’architecture. Ce talk vante non seulement les avantages d’un projet Gradle multi-modules, mais nous détaille tous les choix architecturaux qui en découlent, de façon subjective. Un retour d’expérience sur ce sujet, qui est une trend relativement récente dans l’écosystème Android, est très intéressant et permet non seulement de guider nos décisions d’avenir, mais aussi de regarder d’un nouvel œil nos propres décisions architecturales. Marco nous propose un apercu de sujets tels que les types de modules, la gestion de la navigation, les version catalogs, les convention plugins — autant de sujets qui sont à l’état de l’art des projets Gradle, et qui mérient bien un partage d’expérience !&lt;/p&gt;

&lt;p&gt;Marco apporte un bon équilibre en nous montrant le travail de son équipe sur l’app Tier, tout en nuançant sur le fait que l’architecture n’est pas une science exacte. On retiendra cette citation frappante :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sometimes the “best decision™” is not the best one&lt;/p&gt;
&lt;/blockquote&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/VsU7hsnSN5A&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;p&gt;On termine pour ma part avec un talk qui parle encore d’architecture, mais cette fois en ce qui concerne la migration vers Compose. &lt;strong&gt;Un Design System, ça se Compose !&lt;/strong&gt;, avec Jean-Baptiste Vincey et Julie Gléonnec, nous présente la direction prise par les équipes de Deezer en ce qui concerne la migration de leur design system vers Jetpack Compose. C’est un sujet d’actualité et qui aura très certainement des ramifications sur les années à venir — Bedrock a entamé cette année, j’étais donc curieux de connaître les approches prises par d’autres équipes travaillant sur de grosses applications avec des design systems basés sur des vues XML.&lt;/p&gt;

&lt;p&gt;Les équipes de Deezer ont choisi de réécrire entièrement leur implémentation du design system en Compose, et de migrer leur app écran par écran. Un choix qui a des avantages - la facilité de migration des nouveaux écrans, l’absence de legacy dans les nouveaux composants, mais aussi des inconvénients comme la nécessité de garder à jour deux versions des composants jusqu’à la migration complète de l’app. Deezer nous expose dans cette présentation passionnante leurs choix et leur chemin vers Compose.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/eEcYpImy_XY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>[&quot;b_candellier&quot;, &quot;a_pitel&quot;]</name></author><category term="android" /><category term="mobile" /><category term="conference" /><category term="makers" /><summary type="html">Il y a quelques semaines déjà, nous avons pu nous rendre à LA conférence annuelle Android en France : Android Makers. Conférence qui s’associe tout juste avec une initiative un peu plus internationale qui est DroidCon (cf. notre précédent article, par exemple). L’occasion d’assister à des conférences de speakers du monde entier mais également de networker et revoir avec plaisir beaucoup de têtes connues !</summary></entry><entry><title type="html">Bedrock à l’AFUP Day Lyon (2023)</title><link href="https://tech.bedrockstreaming.com/2023/06/06/afup-day-lyon-2023.html" rel="alternate" type="text/html" title="Bedrock à l’AFUP Day Lyon (2023)" /><published>2023-06-06T00:00:00+00:00</published><updated>2023-06-06T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2023/06/06/afup-day-lyon-2023</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2023/06/06/afup-day-lyon-2023.html">&lt;p&gt;Comme à l’accoutumée, les équipes backend de Bedrock étaient présentes le 12 mai 2023 à CPE (au Campus Lyontech) pour une nouvelle édition de l’AFUP Day.&lt;/p&gt;

&lt;p&gt;Pour suivre les conférences qui gravitaient autour de PHP bien sûr, mais aussi pour soutenir notre collègue Pauline Rambaud qui était la star du jour (pour Bedrock du moins) 🤩 !&lt;/p&gt;

&lt;p&gt;Et nous n’oublions pas non plus, les âmes braves de Bedrock qui ont revêti le maillot bleu de l’AFUP et qui ont donné de leur personne pour nous accueillir dans d’excellentes conditions.&lt;/p&gt;

&lt;p&gt;Enfin &lt;strong&gt;bref&lt;/strong&gt; (🐘), voici le petit récap habituel des différentes conférences de cette journée 👇&lt;/p&gt;

&lt;h2 id=&quot;tirer-parti-du-composant-expressionlanguage-de-symfony-laissez-les-utilisateurs-finaux-être-créatifs-&quot;&gt;Tirer parti du composant ExpressionLanguage de Symfony, laissez les utilisateurs finaux être créatifs !&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conférence présentée par Florian MERLE et Mathias ARLAUD&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dans leur talk, Florian et Mathias nous parlent du composant Symfony Expression Language. 
Ce composant fournit au développeur un moteur d’expressions et permet l’utilisation de ces dernières dans la configuration d’un projet ou bien encore comme fondation d’un moteur de règles métiers. 
Si ce composant vous est inconnu, sachez qu’il est lui-même utilisé par Symfony : par exemple pour la sécurité sur les règles de validation des routes.&lt;/p&gt;

&lt;p&gt;Florian et Mathias nous familiarisent avec le fonctionnement du composant : on peut définir des expressions simples qui ne requièrent pas d’être compilées en PHP (ex : “1+1”) et à l’inverse des expressions compilées en PHP qui vont correspondre à des règles personnalisées définies au sein de notre projet (“est_eligible_a_une_promo(client)”). 
Pour mieux comprendre comment tout cela fonctionne en interne, nous avons ensuite une présentation de comment les expressions sont interprétées grâce à de l’analyse lexicale et le principe d’arbre syntaxique.&lt;/p&gt;

&lt;p&gt;Pour finir ce talk, nous avons le droit à une démonstration du composant comme moteur de règles métiers. 
On nous présente un petit site e-commerce où les administrateurs peuvent, via un formulaire, utiliser les règles métiers définies dans le projet et les ajuster pour correspondre au mieux à leurs besoins.&lt;/p&gt;

&lt;h2 id=&quot;mentors--super-héros-ou-super-vilains-&quot;&gt;Mentors : super-héros ou super-vilains ?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conférence présentée par Pauline RAMBAUD&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On a choisi de ne rien vous dévoiler sur cette conférence donnée par notre collègue Pauline, il fallait être présent pour savourer l’instant 😉… 
Ceci dit, Pauline sera sûrement ravie d’en parler avec vous &lt;a href=&quot;https://twitter.com/pauinegu&quot;&gt;sur Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;monades--paradigme-unique-pour-la-programmation&quot;&gt;Monades : paradigme unique pour la programmation&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conférence présentée par Baptiste LANGLADE&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dans cette &lt;a href=&quot;https://baptouuuu.github.io/talks/monads%20a-sync%20programming/&quot;&gt;conférence&lt;/a&gt;, Baptiste nous a fait un rapide tour d’horizon des solutions existantes pour faire de l’asynchrone en PHP. 
Le conférencier nous a expliqué qu’il était difficile aujourd’hui de faire du synchrone et de l’asynchrone de la même manière, facilement.&lt;/p&gt;

&lt;p&gt;C’est pour cela que le speaker a développé le composant &lt;a href=&quot;https://github.com/Innmind/Immutable#sequence&quot;&gt;Sequence&lt;/a&gt;. 
Grâce à ce projet et sa &lt;a href=&quot;https://www.youtube.com/watch?v=RwCJwKfbDhE&quot;&gt;démo&lt;/a&gt;, nous avons pu voir comment, sans changer le code (hormis une dépendance), nous pouvons faire des appels synchrones ou asynchrones.&lt;/p&gt;

&lt;p&gt;Nous avons, au passage, eu la présentation du composant &lt;a href=&quot;https://github.com/Innmind/Filesystem&quot;&gt;Filesystem&lt;/a&gt; qui apporte des outils intéressants pour la manipulation de fichiers.&lt;/p&gt;

&lt;h2 id=&quot;le-zéro-downtime-deployment-en-pratique&quot;&gt;Le Zéro Downtime Deployment en pratique&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conférence présentée par Smaïne MILIANNI&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Smaïne nous a présenté la logique à avoir lorsque l’on veut faire du ZDD avec deux exemples et les limites de cette pratique.&lt;/p&gt;

&lt;p&gt;Les deux règles d’or à respecter concernant les changements sont :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;être rétrocompatibles, c’est-à-dire que les nouvelles modifications doivent fonctionner avec l’existant. 
Si le déploiement fail cela ne doit pas empêcher la version actuelle de fonctionner.&lt;/li&gt;
  &lt;li&gt;être livré par release&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cela implique de repenser la façon de construire une nouveauté et pour illustrer cela, Smaïne a donné l’exemple de l’ajout d’une colonne not null dans une base de données.&lt;/p&gt;

&lt;p&gt;Objectif : ajouter une colonne not null dans une table&lt;/p&gt;

&lt;p&gt;Découpage en deux releases :&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Release 1
    &lt;ul&gt;
      &lt;li&gt;ajout d’une colonne A null dans la table&lt;/li&gt;
      &lt;li&gt;mise à jour de l’entité concernée dans le code initialisé à null&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Release 2
    &lt;ul&gt;
      &lt;li&gt;mettre à jour les lignes sans valeur dans la colonne A avec une valeur par défaut&lt;/li&gt;
      &lt;li&gt;ajouter la contrainte NOT NULL sur la colonne A&lt;/li&gt;
      &lt;li&gt;mettre à jour l’entité en spécifiant l’attribut comme non nullable&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Afin de s’assurer que chaque release peut fonctionner avec l’existant et anticiper les impacts que pourraient avoir les modifications, il ne faut pas hésiter à tester de façon automatique ou manuelle.&lt;/p&gt;

&lt;p&gt;Suite à l’exemple, Smaïne a présenté les limites du ZDD qui sont :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;cette pratique a du sens si vous faites des releases fréquemment&lt;/li&gt;
  &lt;li&gt;un changement majeur nécessitera toujours une maintenance&lt;/li&gt;
  &lt;li&gt;tant que l’ensemble des releases prévues pour faire une modification ne sont pas en production, le système est considéré comme instable&lt;/li&gt;
  &lt;li&gt;cette pratique nécessite de penser et de concevoir différemment les releases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pour conclure, le speaker a donné quelques clés pour se lancer dans le ZDD :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;former ses équipes&lt;/li&gt;
  &lt;li&gt;documenter les processus mis en place&lt;/li&gt;
  &lt;li&gt;itérer et s’améliorer avec chaque expérience&lt;/li&gt;
  &lt;li&gt;tester et encore tester&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;démystifions-les-pratiques-du-software-craftsmanship-&quot;&gt;Démystifions les pratiques du Software craftsmanship !&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conférence présentée par Thomas BOILEAU&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Après une rapide présentation des différentes pratiques autour du &lt;em&gt;craftsmanship&lt;/em&gt; (Test Driven Development, Domain Driven Development, Clean Architecture, Architecture Hexagonale …), Thomas nous raconte comment il est tombé dans le piège du &lt;strong&gt;Gatekeeping&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Qu’est-ce que le &lt;strong&gt;Gatekeeping&lt;/strong&gt; ? D’après lui (cf. photo), c’est l’art de marquer son appartenance à un groupe en excluant les autres.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/afup-day-lyon-2023/gatekeeper.jpg&quot; alt=&quot;Gatekeeper&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tout commence avec une remarque lue sur Internet, du style “Si tu ne fais pas de TDD, alors tu n’es pas un vrai développeur”, qui le complexera au point de le pousser à étudier et appliquer cette pratique jusqu’à son tour devenir l’auteur de ce genre de remarque.&lt;/p&gt;

&lt;p&gt;En considérant le &lt;strong&gt;craftsmanship&lt;/strong&gt; comme la solution universelle et en l’appliquant de manière dogmatique, il se retrouve à proposer des solutions inadaptées à ses projets et donc à nuire à ses clients.&lt;/p&gt;

&lt;p&gt;L’objet de cette conférence sera donc de nous parler de comment il a su se remettre en question et sortir de l’impasse.&lt;/p&gt;

&lt;p&gt;Comment faire pour ne plus être un gatekeeper ? 
Thomas nous parle alors de prendre du recul sur soi, d’être pragmatique et bien sûr de savoir faire preuve d’humilité. 
Mais il existe aussi des pratiques reconnues dans notre milieu telles que l’&lt;em&gt;Egoless programming&lt;/em&gt;, le &lt;em&gt;Pair Programming&lt;/em&gt;, ou tout simplement reconnaître à chacun le droit à l’erreur et connaître ses propres limites.&lt;/p&gt;

&lt;h2 id=&quot;comment-refondre-un-legacy-sans-cris-et-sans-larmes---retour-dexpérience-et-bonnes-pratiques&quot;&gt;Comment refondre un legacy sans cris et sans larmes - Retour d’expérience et bonnes pratiques&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conférence présentée par Kevin BALICOT&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;À travers son retour d’expérience d’une refonte d’un très vieux projet PHP, Kevin BALICOT nous a offert sa recette d’une refonte progressive sans cris ni larmes :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Lister tous les problèmes de l’application&lt;/li&gt;
  &lt;li&gt;Définir une stratégie et des objectifs&lt;/li&gt;
  &lt;li&gt;Faire un inventaire de l’application&lt;/li&gt;
  &lt;li&gt;Mettre en place un Golden Master&lt;/li&gt;
  &lt;li&gt;Mettre des outils d’analyse de code&lt;/li&gt;
  &lt;li&gt;Implémenter des Design Pattern et des architectures&lt;/li&gt;
  &lt;li&gt;Consolider les choix avec des ADR et du Pair Programming&lt;/li&gt;
  &lt;li&gt;Tester !&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Si vous souhaitez approfondir un de ces points, vous pouvez sans doute lui demander directement &lt;a href=&quot;https://twitter.com/kevinbalicot&quot;&gt;sur Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;le-travail-invisible-en-entreprise--le-cas-du-glue-work&quot;&gt;Le travail invisible en entreprise : le cas du glue work&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conférence présentée par Camille CASTILLO&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nous avons découvert le concept du “glue work” lors de la première conférence de Camille.&lt;/p&gt;

&lt;p&gt;Enfin, nous avons un terme pour décrire cette idée que nous avions tous.tes en tête, mais qui manquait d’une définition concrète.&lt;/p&gt;

&lt;p&gt;Le “glue work” représente toutes ces tâches accomplies par les employé.e.s, notamment les développeur.euse.s, lors de leur travail quotidien, qui ne sont généralement pas facilement quantifiables et rarement valorisées par l’entreprise.&lt;/p&gt;

&lt;p&gt;Camille a identifié trois catégories de “glue work” : social, managérial et technique.&lt;/p&gt;

&lt;p&gt;Par exemple, organiser une sortie au restaurant favorise les liens sociaux. Planifier une réunion avec des clients renforce les relations professionnelles. Et effectuer une veille et proposer de nouveaux outils de développement relève de la dimension technique.&lt;/p&gt;

&lt;p&gt;Malheureusement, en effectuant ces tâches essentielles à la vie de l’entreprise et même à sa productivité, les employé.e.s consacrent logiquement moins de temps à leurs tâches principales, comme le développement.&lt;/p&gt;

&lt;p&gt;Cela peut devenir problématique si l’entreprise ne reconnaît pas la valeur de ces activités.&lt;/p&gt;

&lt;p&gt;Alors quelles solutions pour prendre en considération le glue work ?&lt;/p&gt;

&lt;p&gt;Tout d’abord, le repérer et se porter volontaire.&lt;/p&gt;

&lt;p&gt;Un manager peut aussi veiller à répartir ces tâches.&lt;/p&gt;

&lt;p&gt;Camille conclut en indiquant que le glue work est nécessaire à l’entreprise, qu’il faut l’identifier et être acteur.ice.s chacun à son niveau pour le faire reconnaître.&lt;/p&gt;

&lt;h2 id=&quot;transformer-efficacement-du-json-en-structure-php-fortement-typée&quot;&gt;Transformer efficacement du JSON en structure PHP fortement typée&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conférence présentée par Romain CANON&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Une chouette conférence qui présentait la librairie d’Object Mapping pour PHP &lt;a href=&quot;https://github.com/CuyZ/Valinor&quot;&gt;Valinor&lt;/a&gt;, permettant de tirer parti au maximum des types PHP au runtime.&lt;/p&gt;

&lt;p&gt;D’ailleurs suite à ça, certaines de nos équipes ont commencé à l’utiliser à Bedrock… Peut-être un prochain article de REX à prévoir 😉&lt;/p&gt;

&lt;h2 id=&quot;les-instruments-des-devs-augmentées&quot;&gt;Les instruments des devs augmenté·e·s&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conférence présentée par Gabriel PILLET&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On a fini cette journée en beauté, par une vue d’ensemble des différents outils permettant dès aujourd’hui d’épauler les développeurs dans leur travail quotidien.&lt;/p&gt;

&lt;p&gt;De PHPStan à GPT-4 en passant par GitHub Copilot, cette conférence, dont les slides étaient habillées d’images générées par une IA, nous a bien fait comprendre qu’on a tout intérêt à accueillir ces nouveaux outils, si on souhaite décupler notre productivité 🤞.&lt;/p&gt;

&lt;h2 id=&quot;à-lannée-prochaine-&quot;&gt;À l’année prochaine !&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/afup-day-lyon-2023/team.jpg&quot; alt=&quot;Team backend&quot; /&gt;&lt;/p&gt;</content><author><name>Backend teams</name></author><category term="conference" /><category term="lyon" /><category term="tech" /><category term="php" /><category term="afup" /><summary type="html">Comme à l’accoutumée, les équipes backend de Bedrock étaient présentes le 12 mai 2023 à CPE (au Campus Lyontech) pour une nouvelle édition de l’AFUP Day.</summary></entry><entry><title type="html">Célébrons nos réussites grâce au Brag Document ! #LFT 02/06/23</title><link href="https://tech.bedrockstreaming.com/brag-document" rel="alternate" type="text/html" title="Célébrons nos réussites grâce au Brag Document ! #LFT 02/06/23" /><published>2023-06-02T00:00:00+00:00</published><updated>2023-06-02T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/brag-document</id><content type="html" xml:base="https://tech.bedrockstreaming.com/brag-document">&lt;blockquote&gt;
  &lt;p&gt;« Quelles sont tes réussites du dernier sprint ? Qu’as-tu aimé faire? » Si, comme pour moi, vos réussites s’évaporent de votre mémoire comme un mojito au soleil, alors le Brag Document est fait pour vous.&lt;/p&gt;

  &lt;p&gt;Grâce au Brag Document, listez vos réussites, ce que vous avez appris, apprécié faire, bref, tout ce qui vous a semblé important. Il peut être partagé avec votre manager pour faire le point sur votre progression, ou tout simplement pour répondre à ces questions : « De quoi êtes-vous fier(e) ? Qu’est ce que vous aimeriez faire plus ? »&lt;/p&gt;

  &lt;p&gt;Regardons un exemple de template pour initier son propre Brag Document. Puis je vous proposerai un exemple de mise en place du Brag Document au sein d’une équipe (Picsou), auprès de chaque collègue mais aussi pour la team en elle-même. N’oublions plus nos réussites !&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Par &lt;a href=&quot;https://twitter.com/AnneLaure2B&quot;&gt;Anne-Laure de Boissieu&lt;/a&gt;.&lt;/p&gt;</content><author><name>Anne-Laure De Boissieu</name></author><category term="lft" /><category term="tech" /><summary type="html">« Quelles sont tes réussites du dernier sprint ? Qu’as-tu aimé faire? » Si, comme pour moi, vos réussites s’évaporent de votre mémoire comme un mojito au soleil, alors le Brag Document est fait pour vous. Grâce au Brag Document, listez vos réussites, ce que vous avez appris, apprécié faire, bref, tout ce qui vous a semblé important. Il peut être partagé avec votre manager pour faire le point sur votre progression, ou tout simplement pour répondre à ces questions : « De quoi êtes-vous fier(e) ? Qu’est ce que vous aimeriez faire plus ? » Regardons un exemple de template pour initier son propre Brag Document. Puis je vous proposerai un exemple de mise en place du Brag Document au sein d’une équipe (Picsou), auprès de chaque collègue mais aussi pour la team en elle-même. N’oublions plus nos réussites !</summary></entry><entry><title type="html">Créer son association #LFT 02/06/23</title><link href="https://tech.bedrockstreaming.com/creer-son-association" rel="alternate" type="text/html" title="Créer son association #LFT 02/06/23" /><published>2023-06-02T00:00:00+00:00</published><updated>2023-06-02T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/creer-son-association</id><content type="html" xml:base="https://tech.bedrockstreaming.com/creer-son-association">&lt;blockquote&gt;
  &lt;p&gt;Ça fait maintenant plus de deux ans que j’ai créé mon association sportive. J’aimerais à travers ce talk, faire un retour d’expérience sur mon aventure associative.&lt;/p&gt;

  &lt;p&gt;Le format serait axé autour d’un fil rouge concernant ma propre expérience avec mon association “Fit for All” Tout en généralisant des tips et des “choses à savoir/connaitre” pour monter un association.&lt;/p&gt;

  &lt;p&gt;Je fais ce talk sur toutes les choses que j’aurais aimé savoir avant de me lancer “dans le grand bassin”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Présenté par Guillaume Trémé.&lt;/p&gt;</content><author><name>Guillaume Trémé</name></author><category term="lft" /><category term="tech" /><summary type="html">Ça fait maintenant plus de deux ans que j’ai créé mon association sportive. J’aimerais à travers ce talk, faire un retour d’expérience sur mon aventure associative. Le format serait axé autour d’un fil rouge concernant ma propre expérience avec mon association “Fit for All” Tout en généralisant des tips et des “choses à savoir/connaitre” pour monter un association. Je fais ce talk sur toutes les choses que j’aurais aimé savoir avant de me lancer “dans le grand bassin”</summary></entry><entry><title type="html">OZINT - Vos traces vous trahissent ! #LFT 02/06/23</title><link href="https://tech.bedrockstreaming.com/ozint-lft" rel="alternate" type="text/html" title="OZINT - Vos traces vous trahissent ! #LFT 02/06/23" /><published>2023-06-02T00:00:00+00:00</published><updated>2023-06-02T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/ozint-vos-data</id><content type="html" xml:base="https://tech.bedrockstreaming.com/ozint-lft">&lt;blockquote&gt;
  &lt;p&gt;L’Open Source Intelligence (OSINT), ou le renseignement en sources ouvertes (ROSO) en français, est un ensemble de méthodologies et de pratiques destinés à la collecte et l’analyse d’informations publiques et légales en ayant pour objectif de répondre à des questions ou de faire des choix. L’OSINT est utilisé dans le monde du public comme dans le monde du privé, et dans plusieurs domaines, incluant : l’intelligence économique, le journalisme, les services de renseignement, la recherche scientifique, la cybersécurité, ou encore la lutte contre la criminalité.&lt;/p&gt;

  &lt;p&gt;L’objectif de cette conférence serait de mettre en lumière cette discipline mal connue, mais également d’utiliser les méthodes OSINT pour effectuer une démonstration de sensibilisation sur le sujet des données personnelles.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Par Alexis Martins&lt;/p&gt;</content><author><name>Alexis Martins</name></author><category term="lft" /><category term="tech" /><summary type="html">L’Open Source Intelligence (OSINT), ou le renseignement en sources ouvertes (ROSO) en français, est un ensemble de méthodologies et de pratiques destinés à la collecte et l’analyse d’informations publiques et légales en ayant pour objectif de répondre à des questions ou de faire des choix. L’OSINT est utilisé dans le monde du public comme dans le monde du privé, et dans plusieurs domaines, incluant : l’intelligence économique, le journalisme, les services de renseignement, la recherche scientifique, la cybersécurité, ou encore la lutte contre la criminalité. L’objectif de cette conférence serait de mettre en lumière cette discipline mal connue, mais également d’utiliser les méthodes OSINT pour effectuer une démonstration de sensibilisation sur le sujet des données personnelles.</summary></entry><entry><title type="html">Du CSS aux shaders WebGL : panorama des techniques d’animation en 2023 #LFT 02/06/23</title><link href="https://tech.bedrockstreaming.com/panorama-css-animations" rel="alternate" type="text/html" title="Du CSS aux shaders WebGL : panorama des techniques d’animation en 2023 #LFT 02/06/23" /><published>2023-06-02T00:00:00+00:00</published><updated>2023-06-02T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/panorama-animation-css-2023</id><content type="html" xml:base="https://tech.bedrockstreaming.com/panorama-css-animations">&lt;blockquote&gt;
  &lt;p&gt;Parfois subtiles, parfois proéminentes, les animations sont un élément essentiel pour une expérience utilisateur agréable. Mais une fois qu’on a imaginé des animations plus ou moins folles, vient la question fatidique du “comment fait-on ça ?”, à laquelle j’aimerais vous aider à répondre.&lt;/p&gt;

  &lt;p&gt;Pour pouvoir choisir la technique la mieux adaptée à chaque animation, il vaut mieux avoir une boîte à outils la plus complète possible. J’aimerais vous aider à construire la vôtre en vous présentant un panel le plus large possible de techniques d’animation sur le web : des APIs natives classiques (CSS, Web Animation API) aux plus complexes (Canvas API) en passant par les librairies spécialisées (FLIP, Lottie, Framer Motion, Rive…). Nous finirons avec WebGL et ses shaders GLSL, qui feraient trembler plus d’un développeur mais dont on retrouve les effets impressionnants sur tous les sites récompensés aux Awwwards.&lt;/p&gt;

  &lt;p&gt;Je passerai rapidement sur toutes ces techniques, en comparant leurs performances et utilisations possibles, afin de vous laisser la liberté d’explorer plus en profondeur celles qui vous intéressent.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Présenté par &lt;a href=&quot;https://github.com/jsulpis&quot;&gt;Julien Sulpis&lt;/a&gt;.&lt;/p&gt;</content><author><name>Julien Sulpis</name></author><category term="lft" /><category term="tech" /><summary type="html">Parfois subtiles, parfois proéminentes, les animations sont un élément essentiel pour une expérience utilisateur agréable. Mais une fois qu’on a imaginé des animations plus ou moins folles, vient la question fatidique du “comment fait-on ça ?”, à laquelle j’aimerais vous aider à répondre. Pour pouvoir choisir la technique la mieux adaptée à chaque animation, il vaut mieux avoir une boîte à outils la plus complète possible. J’aimerais vous aider à construire la vôtre en vous présentant un panel le plus large possible de techniques d’animation sur le web : des APIs natives classiques (CSS, Web Animation API) aux plus complexes (Canvas API) en passant par les librairies spécialisées (FLIP, Lottie, Framer Motion, Rive…). Nous finirons avec WebGL et ses shaders GLSL, qui feraient trembler plus d’un développeur mais dont on retrouve les effets impressionnants sur tous les sites récompensés aux Awwwards. Je passerai rapidement sur toutes ces techniques, en comparant leurs performances et utilisations possibles, afin de vous laisser la liberté d’explorer plus en profondeur celles qui vous intéressent.</summary></entry><entry><title type="html">Situations conflictuelles : et si vous sortiez de la spirale infernale ? #LFT 02/06/23</title><link href="https://tech.bedrockstreaming.com/situations-conflictuelles" rel="alternate" type="text/html" title="Situations conflictuelles : et si vous sortiez de la spirale infernale ? #LFT 02/06/23" /><published>2023-06-02T00:00:00+00:00</published><updated>2023-06-02T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/situations-conflictuelles</id><content type="html" xml:base="https://tech.bedrockstreaming.com/situations-conflictuelles">&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Persécuteur, victime, sauveur… lequel êtes-vous ?&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;La situation suivante vous parle ?&lt;/p&gt;

  &lt;p&gt;“J’en ai marre ! Quand je demande de la revue sur mon travail, les gens de mon équipe ne me donnent jamais de retours et je dois toujours les relancer au moins 10 fois avant d’obtenir une réponse… Heureusement que Michel, mon ancien collègue super sympa qui est maintenant dans l’équipe Warrior continue à me répondre, lui !”&lt;/p&gt;

  &lt;p&gt;Oui ? C’est normal. Inconsciemment, nous jouons les rôles de persécuteur, victime ou sauveur. Et nos interactions en souffrent : rien de constructif ne peut émerger de cette spirale infernale.&lt;/p&gt;

  &lt;p&gt;Apprenons à identifier ces rôles pour comprendre leurs effets sur nos relations avec nos collègues, puis nous explorerons comment en sortir pour des interactions plus constructives et positives. Mettons fin à cette spirale infernale !&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Par Elodie Perrin&lt;/p&gt;</content><author><name>Élodie Perrin</name></author><category term="lft" /><category term="tech" /><summary type="html">Persécuteur, victime, sauveur… lequel êtes-vous ? La situation suivante vous parle ? “J’en ai marre ! Quand je demande de la revue sur mon travail, les gens de mon équipe ne me donnent jamais de retours et je dois toujours les relancer au moins 10 fois avant d’obtenir une réponse… Heureusement que Michel, mon ancien collègue super sympa qui est maintenant dans l’équipe Warrior continue à me répondre, lui !” Oui ? C’est normal. Inconsciemment, nous jouons les rôles de persécuteur, victime ou sauveur. Et nos interactions en souffrent : rien de constructif ne peut émerger de cette spirale infernale. Apprenons à identifier ces rôles pour comprendre leurs effets sur nos relations avec nos collègues, puis nous explorerons comment en sortir pour des interactions plus constructives et positives. Mettons fin à cette spirale infernale !</summary></entry><entry><title type="html">Et si vos prochaines vacances se passaient à vélo ? #LFT 02/06/23</title><link href="https://tech.bedrockstreaming.com/vacances-a-velo" rel="alternate" type="text/html" title="Et si vos prochaines vacances se passaient à vélo ? #LFT 02/06/23" /><published>2023-06-02T00:00:00+00:00</published><updated>2023-06-02T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/vacances-velo-lft</id><content type="html" xml:base="https://tech.bedrockstreaming.com/vacances-a-velo">&lt;blockquote&gt;
  &lt;p&gt;La randonnée à vélo, c’est économique, écologique, relaxant, dépaysant et c’est plus facile d’accès que ce que vous pourriez pensez. Alors on y va ? Un talk pour bien démarrer, faire découvrir, chasser les idées reçues, partager des astuces et donner l’envie de pédaler !&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Par &lt;a href=&quot;https://github.com/tom32i&quot;&gt;Thomas Jarrand&lt;/a&gt;&lt;/p&gt;</content><author><name>Thomas Jarrand</name></author><category term="lft" /><category term="tech" /><summary type="html">La randonnée à vélo, c’est économique, écologique, relaxant, dépaysant et c’est plus facile d’accès que ce que vous pourriez pensez. Alors on y va ? Un talk pour bien démarrer, faire découvrir, chasser les idées reçues, partager des astuces et donner l’envie de pédaler !</summary></entry><entry><title type="html">Bedrock à MiXiT Lyon (2023)</title><link href="https://tech.bedrockstreaming.com/2023/04/25/mixit-lyon-2023.html" rel="alternate" type="text/html" title="Bedrock à MiXiT Lyon (2023)" /><published>2023-04-25T00:00:00+00:00</published><updated>2023-04-25T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2023/04/25/mixit-lyon-2023</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2023/04/25/mixit-lyon-2023.html">&lt;p&gt;Nous étions présent les 13 et 14 avril 2023 à CPE pour l’édition de MiXiT 2023, pour suivre les 
conférences bien sûr et pour soutenir les collègues qui donnaient une conférence !&lt;/p&gt;

&lt;h2 id=&quot;et-si-vos-prochaines-vacances-se-passaient-à-vélo-&quot;&gt;Et si vos prochaines vacances se passaient à vélo ?&lt;/h2&gt;

&lt;p&gt;Conférence présentée par Thomas Jarrand&lt;/p&gt;
&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;720&quot; mozallowfullscreen=&quot;&quot; src=&quot;https://player.vimeo.com/video/819907216&quot; title=&quot;Et si vos prochaines vacances se passaient à vélo ? - Thomas JARRAND - MiXiT23&quot; webkitallowfullscreen=&quot;&quot; width=&quot;1280&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;jay-z-maths-and-signals--how-to-clone-shazam-&quot;&gt;Jay-Z, Maths and Signals ! How to clone Shazam 🎧&lt;/h2&gt;

&lt;p&gt;Conférence présentée par Moustapha Agack&lt;/p&gt;
&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;720&quot; mozallowfullscreen=&quot;&quot; src=&quot;https://player.vimeo.com/video/819908055&quot; title=&quot;Jay-Z, Maths and Signals! How to clone Shazam - Moustapha AGACK - MiXiT23&quot; webkitallowfullscreen=&quot;&quot; width=&quot;1280&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;bienvenue-dans-le-monde-merveilleux-des-systèmes-distribués-&quot;&gt;Bienvenue dans le monde merveilleux des systèmes distribués !&lt;/h2&gt;

&lt;p&gt;Conférence présentée par Pascal Martin&lt;/p&gt;
&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;720&quot; mozallowfullscreen=&quot;&quot; src=&quot;https://player.vimeo.com/video/826105619&quot; title=&quot;Bienvenue dans le monde merveilleux des systèmes distribués - Pascal MARTIN - MiXiT23&quot; webkitallowfullscreen=&quot;&quot; width=&quot;1280&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;remotion--le-7ème-art-à-portée-de-composants-web-et-dapi-&quot;&gt;Remotion : le 7ème art à portée de composants web et d’API 🎬&lt;/h2&gt;

&lt;p&gt;Conférence présentée par Antoine Caron et Mickael Alves&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/mixit-2023/antoine-mickael.jpg&quot; alt=&quot;Mickael et Antoine&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conversations-avec-chatgpt-illusion-ou-réalité&quot;&gt;Conversations avec ChatGPT: illusion ou réalité?&lt;/h2&gt;

&lt;p&gt;Conférence présentée par Marie-Alice Blete&lt;/p&gt;

&lt;p&gt;Marie-Alice a pris le temps de réexpliquer ce qu’est ChatGPT et pourquoi ce générateur de texte 
ne garantira jamais la véracité des informations fournies. En effet, si les réponses de ChatGPT 
peuvent être très crédibles, le contenu proposé n’est en aucun cas vérifié 
puisqu’il s’agit d’une suite de mots les plus probables. 
En guise d’illustration, Marie-Alice a demandé à ChatGPT de se rendre sur son terminal Linux, et 
de taper des commandes afin de cloner le projet chatGPT 4. Celui-ci s’exécute. Mais la 
retranscription n’est pas la réalité, c’est ce qu’il y aurait probablement eu dans le terminal. Un 
exemple bluffant !
Pour Marie-Alice, tout le monde peut être trompé. De nouveau à titre d’exemple, elle cite le cas 
d’un expert en IT qui a demandé à ChatGPT de résumer un article d’une revue scientifique. 
ChatGPT a proposé un résumé imaginé à partir du titre - il n’a pas accès à l’article. Ce résumé 
était si convaincant que l’expert a cru que ChatGPT avait accès à l’article.&lt;/p&gt;

&lt;p&gt;Cette conférence a remis en place les attentes qu’on pouvait avoir à propos de ChatGPT, qui n’est qu’un outil avec ses limites.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/MarieAliceBlete/conversations-avec-chatgpt-illusion-ou-ralit&quot;&gt;Voir les slides&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;fresque-anti-sexisme&quot;&gt;Fresque anti-sexisme&lt;/h2&gt;

&lt;p&gt;Atelier présenté par &lt;a href=&quot;https://twitter.com/ComSaraDufour&quot;&gt;Sara Dufour&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cet atelier, à l’image de la fresque du climat, nous a permis de construire, en plusieurs étapes,
et par groupe de 5-6 personnes, un tableau dépeignant la vie actuelle.
Les débats étaient constructifs et les faits, appuyés par les statistiques de l’INSEE, étaient effrayants.
L’atelier était très intéressant, mais un peu démoralisant de voir qu’en 2023,
il y a encore beaucoup à faire pour diminuer le sexisme aussi bien dans le milieu professionnel que privé.&lt;/p&gt;

&lt;h2 id=&quot;lego-flow-game--le-waterfall-le-scrum-et-le-kanban-tu-différencieras-&quot;&gt;Lego Flow Game : le Waterfall, le Scrum et le Kanban tu différencieras !&lt;/h2&gt;

&lt;p&gt;Atelier présenté par &lt;a href=&quot;https://twitter.com/klf37&quot;&gt;Fanny Klauk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cet atelier nous a permis de (re)voir les différentes organisations suivantes : le Waterfall, le Scrum, le Kanban.
Nous avons formé des équipes de 5 personnes et utilisé des Lego :heart_eyes: pour illustrer les taches de constructions.
Chaque personne jouait un rôle particulier qui représente les différents rôles d’une équipe de 
développement standard.&lt;/p&gt;

&lt;p&gt;L’objectif était de construire le plus de modèles d’un calendrier de l’avent Lego, donc des 
modèles petits et (en général) assez simples, nous avions 6 minutes par type d’organisation. Les 
rôles étaient les suivants :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Analyste : Prend une porte (du calendrier de l’avent), note le numéro de la porte (jour où le calendrier sera ouvert) sur une carte et accroche avec un trombone la carte sur le trombone. Il gère la priorité en fonction du numéro de la carte.&lt;/li&gt;
  &lt;li&gt;Fournisseur : Prend la carte et va chercher le sachet correspondant. Il n’y a aucune indication sur le sachet qui permet de savoir lequel prendre&lt;/li&gt;
  &lt;li&gt;Réalisateur : Construit le modèle&lt;/li&gt;
  &lt;li&gt;Testeur : Vérifie que tout est ok&lt;/li&gt;
  &lt;li&gt;Pilote : Remplit un tableau de suivi des différents postes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Première étape, le Waterfall : chaque rôle devait finir son travail pour 5 cartes avant de passer au suivant.
Bilan, au bout des 6 minutes, l’analyste a fini son travail, le fournisseur est toujours en train de chercher des sachets, et les autres attendent et sont frustrés, car ils ne peuvent rien faire d’autre.&lt;/p&gt;

&lt;p&gt;Deuxième étape, le Scrum : chaque rôle peut faire passer une carte au prochain dès que son 
travail sur celle-ci est finie.
3 itérations de 2 minutes seront faites pour illustrer les sprints et une estimation est faite avant chaque itération.
Bilan : entre chaque itération, nous avions une petite rétrospective, celle-ci permettait de nous améliorer au tour d’après.
Au final, nous avons pu terminer 4 cartes sur 5.&lt;/p&gt;

&lt;p&gt;Dernière étape, le Kanban : comme pour le Scrum, une carte peut passer à l’étape d’après, dès 
qu’elle est terminée.
Pas d’estimation par contre, pas le droit d’avoir plus de 2 cartes à la même étape (pas de stock).
Bilan : là aussi, nous avons fait des petites rétrospectives pour nous améliorer entre chaque itération.
Au final, nous avons pu terminer 6 cartes (un bug est survenu en cours de route). Le Kanban a 
permis une avancée plus importante, mais le suivi par le pilote était plus compliqué, car les cartes bougeaient très vite.&lt;/p&gt;

&lt;p&gt;Personnellement, j’ai apprécié travailler en Kanban et suis content de travailler avec la méthode ScrumBan chez Bedrock, cette dernière mélangeant le Scrum et le Kanban.&lt;/p&gt;

&lt;h2 id=&quot;a-lannée-prochaine-&quot;&gt;A l’année prochaine !&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/mixit-2023/bedrock-mixit.jpg&quot; alt=&quot;Bedrock à MiXiT&quot; /&gt;
&lt;img src=&quot;/images/posts/mixit-2023/bedrock-mixit-2.jpg&quot; alt=&quot;Bedrock à MiXiT&quot; /&gt;&lt;/p&gt;</content><author><name>Anne-Laure De Boissieu</name></author><category term="conference" /><category term="lyon" /><category term="tech" /><category term="agilité" /><summary type="html">Nous étions présent les 13 et 14 avril 2023 à CPE pour l’édition de MiXiT 2023, pour suivre les conférences bien sûr et pour soutenir les collègues qui donnaient une conférence !</summary></entry></feed>