<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://tech.bedrockstreaming.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://tech.bedrockstreaming.com/" rel="alternate" type="text/html" /><updated>2022-09-02T08:50:03+00:00</updated><id>https://tech.bedrockstreaming.com/feed.xml</id><title type="html">Bedrock Tech Blog</title><subtitle>Blog technique de Bedrock</subtitle><entry><title type="html">Using a circuit breaker to spare the API we are calling</title><link href="https://tech.bedrockstreaming.com/2022/09/02/backend-circuit-breaker.html" rel="alternate" type="text/html" title="Using a circuit breaker to spare the API we are calling" /><published>2022-09-02T00:00:00+00:00</published><updated>2022-09-02T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2022/09/02/backend-circuit-breaker</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2022/09/02/backend-circuit-breaker.html">&lt;p&gt;Hi! We’re going to start our &lt;a href=&quot;#from-the-same-series&quot;&gt;fourth article&lt;/a&gt; about Bedrock’s API gateway.
Today we will talk about the circuit breaker pattern, what it is, and how we’re using it.&lt;/p&gt;

&lt;h2 id=&quot;the-circuit-breaker-pattern&quot;&gt;The Circuit Breaker Pattern&lt;/h2&gt;

&lt;p&gt;With this pattern, our API Gateway detects errors when calling its dependencies.
It will stop calling them if a given threshold (ratio of errors) is crossed.&lt;/p&gt;

&lt;p&gt;The circuit breaker allows us to spare the dependencies in difficulty, but also avoid taking time to do something that will most likely fail.&lt;/p&gt;

&lt;p&gt;You’ll find a more detailed explanation about the circuit breaker on Martin FOWLER’s &lt;a href=&quot;https://martinfowler.com/bliki/CircuitBreaker.html&quot;&gt;blog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;where-to-use-it&quot;&gt;Where to use it?&lt;/h2&gt;

&lt;p&gt;As soon as a service call is not mandatory for our BFF to answer something that a frontend application can read, then we can use the circuit breaker pattern.&lt;/p&gt;

&lt;p&gt;If an API cannot handle a sudden increase in traffic (for example: it’s not scaling fast enough or its database starts to throttle), it’s better to stop calling it temporarily.
When the right timeouts are configured, an API throttling will result in an error, as seen &lt;a href=&quot;/2022/08/25/backend-errors-connections.html&quot;&gt;in the previous article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are some examples:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Video progress information&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Displaying a video progress bar is useful for end users, but it’s better to not display this information instead of risking the entire page to not be displayed!
If the service that stores video viewing sessions is (slowing) down, we can stop asking for this information and stop displaying the video progress bar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2022-09-02-backend-circuit-breaker/progress-bar.png&quot; alt=&quot;a video with a progress bar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;User geolocation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The geolocation service allows us to know where the end user is in the world. Based on this information we lock some area restricted contents.
If this service goes down for some reason, we will stop calling it, and instead use a default area matching the area of our customer as it’s the majority case.&lt;/p&gt;

&lt;h2 id=&quot;implementation-and-configuration&quot;&gt;Implementation and configuration&lt;/h2&gt;

&lt;p&gt;So far we’re only using the circuit breaker pattern with HTTP calls.
This is made possible thanks to the &lt;a href=&quot;https://github.com/ackintosh/ganesha&quot;&gt;Ganesha library&lt;/a&gt;, and its Guzzle middleware.&lt;/p&gt;

&lt;p&gt;The Guzzle middleware is created as a service within the Symfony service definitions.
It’s then injected into our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpClientFactory&lt;/code&gt; that will handle the creation of all the different clients.
The responsibility of using the circuit breaker falls on each service that will create a http client.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;Ackintosh\Ganesha\GuzzleMiddleware&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@...Infrastructure\HttpClient\CircuitBreaker\CircuitBreakerMiddlewareFactory&apos;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;buildWithRateStrategy&apos;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;$timeWindow&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;$failureRateThreshold&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;$minimumRequests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;$intervalToHalfOpen&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;monitoring-the-circuit-breaker&quot;&gt;Monitoring the circuit breaker&lt;/h2&gt;

&lt;p&gt;At Bedrock, we’re used to monitor everything. The circuit breaker makes no exception to this rule.
Usually we store time spent and response code for every outgoing http call.
To see when the circuit breaker is open, we catch the ganesha’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RejectedException&lt;/code&gt; to save a dedicated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;666&lt;/code&gt; http status.&lt;/p&gt;

&lt;p&gt;This allows us to look for the exact number of calls avoided.
Below lies an example of a monitoring chart showing some errors happening during a usual night.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2022-09-02-backend-circuit-breaker/monitoring-1.png&quot; alt=&quot;monitoring excluding less reliable services&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We also have to query slower services that often trigger our circuit breaker because they cannot answer in the short timeout we impose.
Thereafter, the same monitoring chart including such services.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2022-09-02-backend-circuit-breaker/monitoring-2.png&quot; alt=&quot;monitoring including less reliable service&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;going-further&quot;&gt;Going further&lt;/h2&gt;

&lt;p&gt;So far, we have identified two areas for improvements described below.&lt;/p&gt;

&lt;h3 id=&quot;different-configurations&quot;&gt;Different configurations&lt;/h3&gt;

&lt;p&gt;We’re only using a single configuration for the circuit breaker.
We should allow each service to choose from a named list of configurations when creating a client, &lt;a href=&quot;/2022/08/25/backend-errors-connections.html&quot;&gt;similarly to the different guzzle configuration we are using&lt;/a&gt;.
The main obstacle is a lack of hindsight which prevent us to have fine-tuned values.
This is something that will definitively be improved over time as we monitor over long period.&lt;/p&gt;

&lt;h3 id=&quot;staled-cache-when-the-circuit-breaker-is-open&quot;&gt;Staled cache when the circuit breaker is open&lt;/h3&gt;

&lt;p&gt;For many editorial contents, we’re using a staled cache version of the data as a fallback.
To do so, we’re using &lt;a href=&quot;https://github.com/Kevinrob/guzzle-cache-middleware&quot;&gt;another guzzle middleware&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sadly, the two middlewares don’t work together. We have to chose which one to use based on the criticality of the content and the API behind. 
This is something that we aim at solving with a bit of R&amp;amp;D.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In today’s post we’ve seen our usage of the circuit breaker pattern.
It allows us to spare the services we are calling, and avoid slowing us down in case of throttling.&lt;/p&gt;

&lt;p&gt;Next time, we will talk about our ultimate layer of protection to ensure the BFF always responds something readable to frontend applications.&lt;/p&gt;

&lt;h2 id=&quot;from-the-same-series&quot;&gt;From the same series&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/2022/06/10/backend-bff.html&quot;&gt;What’s a BFF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2022/06/12/backend-fallbacks.html&quot;&gt;Handling API failures in a gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2022/08/25/backend-errors-connections.html&quot;&gt;What’s an error, and handling connexion to multiple APIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2022/09/02/backend-circuit-breaker.html&quot;&gt;Using a circuit breaker&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Valentin CLARAS</name></author><category term="backend" /><category term="php" /><category term="api" /><category term="api-gateway" /><category term="back-for-front" /><category term="resiliency" /><category term="circuit-breaker" /><summary type="html">Hi! We’re going to start our fourth article about Bedrock’s API gateway. Today we will talk about the circuit breaker pattern, what it is, and how we’re using it.</summary></entry><entry><title type="html">Prescaling pods in Kubernetes, we open source our solution</title><link href="https://tech.bedrockstreaming.com/2022/09/01/kubernetes-prescaling-we-open-source-our-solution.html" rel="alternate" type="text/html" title="Prescaling pods in Kubernetes, we open source our solution" /><published>2022-09-01T00:00:00+00:00</published><updated>2022-09-01T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2022/09/01/kubernetes-prescaling-we-open-source-our-solution</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2022/09/01/kubernetes-prescaling-we-open-source-our-solution.html">&lt;p&gt;Previously we &lt;a href=&quot;https://tech.bedrockstreaming.com/2022/02/03/prescaling.html&quot;&gt;discussed&lt;/a&gt; how we manage the load of our Kubernetes clusters and how we can anticipate our needs with prescaling. Today, we are here to share our solution that we have reworked and open sourced! 
&lt;img src=&quot;/images/posts/2022-09-01-kubernetes-prescaling-we-open-source-our-solution/br-opensource.png&quot; alt=&quot;BedrockStreaming Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At &lt;a href=&quot;https://www.bedrockstreaming.com/&quot;&gt;Bedrock Streaming&lt;/a&gt;, we provide streaming platforms to our customers (6play, Salto, Videoland and many others), we have a good knowledge of the daily load peaks and we know in advance the programs that are likely to generate a lot of traffic. We can therefore rely not only on reactive scaling, which has its limits (cf. &lt;a href=&quot;https://tech.bedrockstreaming.com/2022/02/03/prescaling.html&quot;&gt;prescaling article&lt;/a&gt;) but also on prescaling.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;gt; &lt;strong&gt;Prescaling&lt;/strong&gt; consists of increasing the number of critical application pods in our clusters in advance in order to be ready to face a sudden traffic peak.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Initially, we developed an in-house solution in Python for a simple reason: it was the language that most people in the team knew. Since we had time to test our solution, we thought it would be great to share it with everyone. But to do so, we had to make some adjustments.&lt;/p&gt;

&lt;h2 id=&quot;we-rewrote-everything-in-go&quot;&gt;We rewrote everything in go&lt;/h2&gt;

&lt;p&gt;Many open source projects we use are written in Golang. In addition, the DevOps/Cloud world is mostly focused on Go. So, we decided to rewrite our prescaling solution in Go in order to make our teams more skilled in this language. The other goal was to make it cloud agnostic. In the Python version, we had an API part that stored prescaling events in a DynamoDB table, which made the solution dependent on AWS. Since prescaling is Kubernetes oriented, we had thought in the first versions in Python to store these events in Custom Resources (CRD) but due to lack of time, we did not implement it. We took advantage of the redesign to implement it and remove the dependency with AWS DynamoDB.&lt;/p&gt;

&lt;p&gt;We also wanted to simplify the project. In the first versions, we had two bricks: one containing the exporter and another the API. We merged the two applications into one monolith. The API is CRUD and can handle CRD events.&lt;/p&gt;

&lt;h2 id=&quot;here-we-go-we-open-source-it&quot;&gt;Here we go, we open source it&lt;/h2&gt;

&lt;p&gt;The great moment has come. Our prescaling solution is now available on GitHub in its alpha version: &lt;a href=&quot;https://github.com/BedrockStreaming/prescaling-exporter&quot;&gt;https://github.com/BedrockStreaming/prescaling-exporter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the version we currently use in all our clusters. Let’s quickly see how to implement the solution (you can find more details in the repo README).&lt;/p&gt;

&lt;p&gt;The prescaling-exporter is distributed with helm charts in order to install it in kubernetes cluster.&lt;/p&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;

&lt;p&gt;The following bricks must be installed in the k8s cluster:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Prometheus&lt;/code&gt; Stack or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Victoria Metrics Stack&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Prometheus Adapter&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is possible to use another metrics stack but we do not provide an example at this time.&lt;/p&gt;

&lt;p&gt;Clone the repo and run the following command with Helm3:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;helm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;prescaling-exporter ./helm/prescaling-exporter &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; prescaling-exporter &lt;span class=&quot;nt&quot;&gt;--create-namespace&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s required to add the following configuration to Prometheus adapter:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- &quot;metricsQuery&quot;: &quot;avg(&amp;lt;&amp;lt;.Series&amp;gt;&amp;gt;{&amp;lt;&amp;lt;.LabelMatchers&amp;gt;&amp;gt;})&quot;
    &quot;name&quot;:
      &quot;as&quot;: &quot;prescale_metric&quot;
    &quot;resources&quot;:
      &quot;overrides&quot;:
        &quot;namespace&quot;:
          &quot;resource&quot;: &quot;namespace&quot;
    &quot;seriesQuery&quot;: &quot;prescale_metric&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;daily-prescaling-event&quot;&gt;Daily prescaling event&lt;/h3&gt;

&lt;p&gt;We have chosen to manage the configuration of daily events directly on the HPA (HorizontalPodAutoscaler) of the applications. Here is how to activate it, through annotations:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;autoscaling/v2beta1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;HorizontalPodAutoscaler&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;annotations.scaling.exporter.replica.min&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;annotations.scaling.exporter.time.end&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;annotations.scaling.exporter.time.start&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;metrics&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;External&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;external&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;metricName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;prescaling_metric&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;metricSelector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;deployment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;targetValue&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are able to control the start and end time of the prescaling and the minimum number of pods we want during this window. Please note that if the number of pods we want for prescaling is less than the current number of pods, the solution will not downscale the application and the HPA will continue to behave as usual.&lt;/p&gt;

&lt;h3 id=&quot;one-time-events&quot;&gt;One-time events&lt;/h3&gt;

&lt;p&gt;We can also record one-off events. For example, at Bedrock Streaming, during an important soccer match, we will record a special event in a Custom Resource Definition. 
One-time events allow to prescale all applications having annotations on their HPA by multiplying their prescaling minimum replicas (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;annotations.scaling.exporter.replica.min&lt;/code&gt;) by the multiplier of the event in question.&lt;/p&gt;

&lt;p&gt;To record a one-time event, an OpenAPI UI (formerly known as Swagger) is exposed by the prescaling exporter at the url &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/swagger/index.html&lt;/code&gt;. We can also register a new event from here or directly by making an api call to the following address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/api/v1/events/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2022-09-01-kubernetes-prescaling-we-open-source-our-solution/post-prescaling-event.png&quot; alt=&quot;Screenshot POST prescaling event&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;We will continue to improve the solution. For example, we are thinking about removing annotations on HPAs and replacing them with a new dedicated CRD.&lt;/p&gt;

&lt;p&gt;All contributions are welcome, don’t hesitate to come and exchange with us on GitHub if you want to use the solution, we would be delighted.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Authors:&lt;a href=&quot;https://www.linkedin.com/in/jeremy-planckeel-44426112b/&quot;&gt; Jérémy Planckeel&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/in/valentin-chabrier-180937142/&quot;&gt;Valentin Chabrier&lt;/a&gt;&lt;/p&gt;</content><author><name>[&quot;j_planckeel&quot;, &quot;v_chabrier&quot;]</name></author><category term="k8s" /><category term="kubernetes" /><category term="pods" /><category term="prometheus" /><category term="scaling" /><category term="hpa" /><category term="resiliency" /><category term="go" /><category term="prescaling" /><category term="opensource" /><summary type="html">Previously we discussed how we manage the load of our Kubernetes clusters and how we can anticipate our needs with prescaling. Today, we are here to share our solution that we have reworked and open sourced!</summary></entry><entry><title type="html">BFF’s error definition, and handling connections to multiple API</title><link href="https://tech.bedrockstreaming.com/2022/08/25/backend-errors-connections.html" rel="alternate" type="text/html" title="BFF’s error definition, and handling connections to multiple API" /><published>2022-08-25T00:00:00+00:00</published><updated>2022-08-25T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2022/08/25/backend-errors-connections</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2022/08/25/backend-errors-connections.html">&lt;p&gt;A &lt;em&gt;quick&lt;/em&gt; sidetrack in &lt;a href=&quot;#from-the-same-series&quot;&gt;our series&lt;/a&gt; about Bedrock’s API gateway.
This piece defines what are we talking about when we say “an error”, and explains how we handle the numerous connections to services we are calling.&lt;/p&gt;

&lt;h2 id=&quot;definition&quot;&gt;Definition&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;/2022/08/12/backend-fallbacks.html&quot;&gt;the previous article&lt;/a&gt;, we’ve seen how we handle errors.
This was mainly from a business point of view, and how it’s done in our domain.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But what is “an error”?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This term is a bit generic, and the definition will be too: &lt;em&gt;an error is anything unexpected by the application&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In our context of an API Gateway, we are restricting this to the services we are calling.&lt;/p&gt;

&lt;p&gt;This can be, but not exhaustively, a service not responding because:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;it’s offline;&lt;/li&gt;
  &lt;li&gt;it’s taking too much time to answer;&lt;/li&gt;
  &lt;li&gt;it’s responding with a 5** error (when talking about an API);&lt;/li&gt;
  &lt;li&gt;it’s giving us an invalid or unexpected content.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-are-the-consequences-of-those-errors&quot;&gt;What are the consequences of those errors?&lt;/h2&gt;

&lt;p&gt;The first issue is: we won’t be able to display some part of the application as intended.
We’ve &lt;a href=&quot;https://tech.bedrockstreaming.com/2022/08/12/backend-fallbacks.html#handling-failures&quot;&gt;talked about this previously&lt;/a&gt; already.&lt;/p&gt;

&lt;p&gt;The second error, more insidious, is that it can slow down our BFF terribly.&lt;/p&gt;

&lt;p&gt;The BFF response time is, on average, equals to the slowest service the BFF is calling.
If a service that usually responds in 200ms starts slowing down to an average response time of 1s and also times out half the time, it will increase the BFF response time to 1,5s (1s average, and 50% retry).&lt;/p&gt;

&lt;p&gt;That’s why we must be careful when configuring those timeouts.
The BFF exposes a response-time Service Level Objective (SLO), and frontend applications will cut any connection that takes too long.
Losing some parts of the responses is better than slowing the BFF down to a point where frontend won’t get any response at all.&lt;/p&gt;

&lt;h2 id=&quot;how-are-we-mitigating-the-errors&quot;&gt;How are we mitigating the errors?&lt;/h2&gt;

&lt;p&gt;For any remote service, we configure short timeouts, and retry when we must.
A short timeout is a timeout that usually match the SLO of the called services, and that will match 99% of our calls.
When the SLO of the called service is higher than ours, we use a shorter timeout and accept that a larger parts of the calls will be cut.
The values are tailored according to our usages.
We use our monitoring to adapt those values in order to reduce the number of errors, while minimizing the impact on the BFF response time.
We are also constantly challenging our colleagues to improve the average response time of their services that we are calling.&lt;/p&gt;

&lt;p&gt;The choice of using retries is based on the information criticality.
For example, retrieving the user’s previous viewing sessions, is important for his/her experience, so we’re using a retry here.
On the opposite, analytics are less important, so we don’t use any retry there.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;na&quot;&gt;app.http_client_configs.best_effort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;retry&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.6&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;connect_timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app.http_client_configs.fast_fail&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;retry&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.6&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;connect_timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app.http_client_configs.long_fail&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;retry&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;connect_timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app.http_client_configs.reliant&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;retry&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;connect_timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Above, you can see the yaml configuration our Symfony application uses to build its Guzzle clients.&lt;/p&gt;

&lt;p&gt;Each configuration can cascade onto the clients, making variants available for our Symfony services.&lt;/p&gt;

&lt;p&gt;Below lies a Symfony configuration example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We have an interface &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BFF\Domain\Content\Repository&lt;/code&gt; from the domain for a content repository.&lt;/li&gt;
  &lt;li&gt;The interface is linked to an implementation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BFF\Infra\HttpContentClient&lt;/code&gt; inside the infrastructure.&lt;/li&gt;
  &lt;li&gt;The implementation is built with variants (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;best_effort&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fast_fail&lt;/code&gt;) from a factory using the matching Guzzle configurations.&lt;/li&gt;
  &lt;li&gt;Other services use a chosen repository &lt;em&gt;according to their needs and criticality&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;# Service definition with its aliases.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;BFF\Domain\Content\Repository&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@BFF\Domain\Content\Repository.fast_fail&apos;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;BFF\Domain\Content\Repository.best_effort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@BFF\Infra\HttpContentClient.best_effort&apos;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;BFF\Domain\Content\Repository.fast_fail&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@BFF\Infra\HttpContentClient.fast_fail&apos;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Concrete implementations&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;BFF\Infra\HttpContentClient.best_effort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;BFF\Infra\HttpContentClient&apos;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@BFF\Infra\ContentClientFactory&apos;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;create&apos;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;$clientConfig&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%app.http_client_configs.best_effort%&apos;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;BFF\Infra\HttpContentClient.fast_fail&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;BFF\Infra\HttpContentClient&apos;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@BFF\Infra\ContentClientFactory&apos;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;create&apos;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;$clientConfig&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%app.http_client_configs.fast_fail%&apos;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Other services using the Repository&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;BFF\Domain\Navigation\NavBarResolver&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;$content&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@BFF\Domain\Content\Repository.best_effort&apos;&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;BFF\Domain\Layout\BlockResolver&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;$content&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@BFF\Domain\Content\Repository.fast_fail&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;This is an over simplified example as we have more layers and wrappers used for things like caching, monitoring, logging, etc.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we’ve clarified what an error is, and explained that we cannot generalize the configuration and usage of our APIs. Timeouts and retries, especially, must be tailored depending on the criticality of each call.&lt;/p&gt;

&lt;p&gt;This was a deviation on the road to our next article, where we will talk about monitoring the errors and stopping calls to failing APIs by implementing the circuit-breaker pattern.&lt;/p&gt;

&lt;h2 id=&quot;from-the-same-series&quot;&gt;From the same series&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/2022/06/10/backend-bff-intro.html&quot;&gt;What’s a BFF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2022/08/12/backend-fallbacks.html&quot;&gt;Handling API failures in a gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2022/08/25/backend-errors-connections.html&quot;&gt;What’s an error, and handling connection to multiple APIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2022/09/02/backend-circuit-breaker.html&quot;&gt;Using a circuit breaker&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Valentin CLARAS</name></author><category term="backend" /><category term="php" /><category term="api" /><category term="api-gateway" /><category term="back-for-front" /><category term="error" /><category term="timout" /><category term="retry" /><category term="slo" /><category term="guzzle" /><summary type="html">A quick sidetrack in our series about Bedrock’s API gateway. This piece defines what are we talking about when we say “an error”, and explains how we handle the numerous connections to services we are calling.</summary></entry><entry><title type="html">Les spikes : quand, comment, pour quoi faire ?</title><link href="https://tech.bedrockstreaming.com/how-to-spike" rel="alternate" type="text/html" title="Les spikes : quand, comment, pour quoi faire ?" /><published>2022-08-23T00:00:00+00:00</published><updated>2022-08-23T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/how-to-spike</id><content type="html" xml:base="https://tech.bedrockstreaming.com/how-to-spike">&lt;p&gt;C’est une histoire bien connue, dans la vie de n’importe quel développeur : un ticket arrive dans le backlog, décrivant une problématique relativement complexe. C’est parfois une question de technologie inconnue, ou parfois simplement un chantier un peu trapu. Je pense que toutes les équipes ont, au moins une fois dans leur vie, fait face à ce genre de tâche impossible : c’est l’occasion des regards désespérés, alors qu’un junior se lamente en disant « Mais par où est-ce qu’il faut commencer ? ». Et c’est là qu’on répond : « Essaye de faire un spike ».&lt;/p&gt;

&lt;p&gt;Faire un spike ? Quelle excellente idée ! Encore faudrait-il savoir ce qu’est un spike, comment ça marche, et à quoi ça sert.&lt;/p&gt;

&lt;p&gt;Je vous propose donc ensemble de voir dans cet article : qu’est-ce qu’un spike, quand l’utiliser, et comment considérer qu’il est réussi ?&lt;/p&gt;

&lt;h1 id=&quot;spike-help-&quot;&gt;spike –help 📚&lt;/h1&gt;

&lt;p&gt;Si je devais citer &lt;a href=&quot;https://en.wikipedia.org/wiki/Spike_(software_development)&quot;&gt;Wikipedia&lt;/a&gt;, je dirais qu’un Spike, c’est “une méthode de développement de produit, dérivée de l’extrême programming, et qui cherche à créer le code le plus simple possible pour obtenir des solutions potentielles”.&lt;/p&gt;

&lt;p&gt;En gros, le but d’un spike, c’est de répondre à la question &lt;em&gt;“Comment on fait ?”&lt;/em&gt; avec un prototype de code réalisé grâce à une série de petites étapes simples. Un spike n’est pas une formule magique qui va vous permettre de réaliser la tâche impossible que votre client vous a donné. En revanche, le spike va vous permettre de savoir si la tâche impossible ou compliquée à première vue est en fait possible, et si oui, comment.
Il arrivera également que votre spike vous permette de constater qu’une tâche donnée peut être réalisée de plusieurs manières : que ce soit en passant par des librairies différentes, avec une implémentation changeante, ou autre chose encore. Dans ces cas, le spike va également vous servir à essayer ces différentes possibilités, et à choisir celle qui est la plus appropriée !&lt;/p&gt;

&lt;p&gt;Le moyen le plus simple est de procéder morceau par morceau. Alors je vous propose qu’on s’y mette maintenant, et qu’on regarde quoi faire !&lt;/p&gt;

&lt;h1 id=&quot;kowalski-analysis--&quot;&gt;“kowalski, analysis !” 📊&lt;/h1&gt;

&lt;p&gt;Avant toute chose, il faut savoir exactement ce que vous souhaitez faire. Rien ne sert de mettre la charrue avant les bœufs.&lt;/p&gt;

&lt;p&gt;Si ce n’est pas fait, écrivez noir sur blanc les lignes exactes qui vont définir votre tâche comme finie. Que ce soit connecter votre utilisateur de façon sécurisée, afficher une vidéo sans heurt, ou juste avoir une page qui clignote en blanc et bleu, il faut que vous ayez une liste de &lt;em&gt;bullet points&lt;/em&gt;, qui définit précisément ce que vous voulez faire.&lt;/p&gt;

&lt;p&gt;Votre objectif final est de réaliser tout ce que vous avez sur cette liste : strictement rien de moins, mais aussi strictement rien de plus ! Pas de demande implicite de type “Ah mais je voulais aussi que l’image soit visible en noir et blanc” : si ce n’est pas sur la liste, ce n’est pas à faire.&lt;/p&gt;

&lt;p&gt;Cette liste peut être écrite selon votre format favori : un cahier des charges, une série de directives &lt;em&gt;Gherkin&lt;/em&gt;, l’important c’est qu’elle soit écrite, claire et précise. En d’autres termes, vous définissez ici votre propre cahier des charges.&lt;/p&gt;

&lt;p&gt;Le résultat final doit donc être quelque chose dans ce style :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;As a client
I want to see my product in 3 dimensions
So that I can know what it looks like

As a client
I want to be able to rotate my product using the arrow keys
So that I can check it out entirely

As a client
I want to be able to zoom on my product
So that I can see even the smallest details
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Une fois que vous savez quoi faire, on peut vraiment commencer à mettre la main dans le code !&lt;/p&gt;

&lt;h1 id=&quot;-todo--make-the-code-below-work-&quot;&gt;// TODO : make the code below work 💻&lt;/h1&gt;

&lt;p&gt;Stop. Lâchez tout.&lt;/p&gt;

&lt;p&gt;Je vous vois déjà, votre liste de points en main, à tenter de la faire rentrer dans votre gros projet à grands coups de burin, de vous gratter la tête à comprendre pourquoi ça ne rentre pas, et qu’est-ce qui a bien pu casser, cette fois.&lt;/p&gt;

&lt;p&gt;Un peu de calme : le but d’un spike n’est pas de faire tout fonctionner, pas du tout. Prenez de la distance, et on va y aller en douceur.&lt;/p&gt;

&lt;p&gt;Pour commencer, isolez une partie de votre projet et de vos points objectifs. Il existe plusieurs moyens de s’y prendre : créer un nouveau projet, créer une nouvelle page avec seulement quelques composants, décharger votre backend… On veut un environnement le plus propre possible.
Beaucoup de projets sont vieux, et si mal conçus qu’il &lt;a href=&quot;/2021/09/01/bonnes-pratiques-web&quot;&gt;aurait fallu les jeter au bout de deux ans&lt;/a&gt;. On cherche ici à se détacher au maximum de cette dette technique.&lt;/p&gt;

&lt;p&gt;N’hésitez pas à utiliser des &lt;em&gt;mocks&lt;/em&gt;, des faux appels et résultats au reste de votre application :  en simulant comment se comporte le reste de votre projet sans véritablement y faire appel, vous diminuez au maximum votre marge d’erreur, et vous assurez que vous contrôlez la moindre information qui transite par votre code.&lt;/p&gt;

&lt;p&gt;Maintenant seulement, vous pouvez prendre votre clavier, et coder. Regardez comment implémenter chacun de ces points dans votre code propre de manière épurée.
Ça fonctionne du premier coup ? Génial, notez comment vous avez fait ! Ça ne marche pas ? Dommage, mais ce n’est pas une raison pour Ctrl+Z et recommencer. Notez bien ce qui n’a pas marché, avant de retenter ! Si ça ne marche toujours pas au bout de 2/3 essais, pas de soucis, n’hésitez pas à laisser ce point de côté et passer à un autre. Mais écrivez tout, car cela va vous servir très bientôt !&lt;/p&gt;

&lt;h1 id=&quot;ifbug--true--deletebug-consolelogit-works---&quot;&gt;if(bug == true) { delete(bug); console.log(“It works !”); } 🤖&lt;/h1&gt;

&lt;p&gt;Il peut cependant arriver que, parfois, tous vos efforts ne mènent à rien. Vous avez déjà passé plusieurs jours sur les différents sujets du spike, et vous n’avez pas encore identifié de solution pour faire fonctionner le tout.
Dans ce cas-là, pas de panique ! Il s’agit également d’un des objectifs du spike. Après tout, si vous n’avez pas pu réaliser votre objectif dans un cadre réduit, il est bien probable que vous n’auriez jamais pu le faire fonctionner dans votre projet lui-même.&lt;/p&gt;

&lt;p&gt;Les mêmes points qu’indiqués ci-dessus continuent de s’appliquer : notez ce que vous avez tenté et les soucis rencontrés avec chaque implémentation. Puis, continuez le processus détaillé ici : ce n’est pas parce que votre code n’as pas fonctionné qu’il ne doit surtout pas être présenté. Peut-être un de vos collègues trouvera-t-il la ligne qui vous manque, ou le point-virgule que vous avez oublié : mais peut-être aussi qu’il vous aidera à comprendre ensemble pourquoi la solution ne fonctionne pas dans votre cadre.
Et puis, vous pourrez alors vous poser la question : est-ce qu’il faut bien faire comprendre que la tâche demandée est irréalisable, ou est-ce qu’il faut prévoir un chantier pour réussir à trouver un moyen de remplir la requête ?&lt;/p&gt;

&lt;h1 id=&quot;linstant-doc-&quot;&gt;L’instant doc 📝&lt;/h1&gt;

&lt;p&gt;Une fois que vous avez terminé de coder, il est temps pour vous de poser votre IDE, et de sortir votre outil de documentation favori : Confluence, Jira, que sais-je. 
Puis, écrivez un compte-rendu de votre aventure. Présentez l’origine de votre spike (Le &lt;strong&gt;Pourquoi&lt;/strong&gt;), ce que vous avez tenté (Le &lt;strong&gt;Comment&lt;/strong&gt;). Expliquez ce qui a marché et ce qui n’a pas marché : cela vous servira lorsque vous implémenterez vraiment la feature !
Enfin, écrivez également les étapes qu’il faudrait suivre pour terminer la feature : ajoutez un maximum de détails techniques. Ce sera autant de problématiques en moins pour le pauvre dev qui va récupérer les US après vous.&lt;/p&gt;

&lt;p&gt;Je vous suggère donc de faire un plan de ce type :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Problème&lt;/strong&gt; - Expliquez ici l’état initial. Qu’est-ce qui était demandé ? Pourquoi avoir choisi de faire un spike ? Quel en est l’objectif ?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Observations&lt;/strong&gt;  - Indiquez là vos réflexions et le code que vous avez produit. Expliquez ce que vous avez tenté, les problèmes rencontrés et les solutions établies, vos pistes de réflexion. N’hésitez surtout pas à détailler !&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Actions&lt;/strong&gt; - Enfin, détaillez dans cette dernière partie ce qu’il restera à faire afin de transformer ce spike en une feature fonctionnelle. Quels bugs corriger ? Quels points n’ont pas encore été réalisés, et comment faire pour les réaliser ?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Pour la dernière étape, je vous conseille de réaliser un tableau d’actions &lt;em&gt;SMART&lt;/em&gt; afin de définir au mieux les tâches à réaliser.
Le principe SMART suppose qu’une tâche doit être composées des cinq caractéristiques suivantes afin d’être pertinente :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Elle doit être &lt;strong&gt;Spécifique&lt;/strong&gt;, afin que l’objectif soit clair et concis (Qu’est-ce que je dois faire ? Exemple de réponse : « Il faut que l’image d’un objet soit en 3D »)&lt;/li&gt;
  &lt;li&gt;Elle doit être &lt;strong&gt;Mesurable&lt;/strong&gt;, pour définir un objectif quantifiable (Quant est-ce que ma tâche sera finie ? Exemple de réponse : « Il faut que je puisse faire tourner l’image avec les flèches gauches et droites du clavier  »))&lt;/li&gt;
  &lt;li&gt;Elle doit être &lt;strong&gt;Atteignable&lt;/strong&gt;, sans demander de décrocher les étoiles (Comment réaliser ma tâche ? Exemple de réponse : « Utiliser la méthode &lt;em&gt;Get3D&lt;/em&gt; de la librairie &lt;em&gt;Easy3D&lt;/em&gt; »))&lt;/li&gt;
  &lt;li&gt;Elle doit être &lt;strong&gt;Réaliste&lt;/strong&gt; au sujet en cours, donc nécessaire à l’accomplissement final (Est-ce qu’il est pertinent de prendre du temps pour faire ça ? Exemple de réponse : « Afin que notre client puisse voir l’avant et l’arrière de nos produits »)&lt;/li&gt;
  &lt;li&gt;Elle doit être définie de façon &lt;strong&gt;Temporelle&lt;/strong&gt;, afin de ne pas pouvoir s’éterniser (Pour quand ma tâche doit-elle être réalisée ? Exemple de réponse : « A réaliser avant que la feature soit considérée terminée »)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dans le cas où une des tâches que vous avez devisé ne peut pas répondre à un de ces cinq points, alors il est probable qu’elle ne soit pas suffisamment précise : peut-être la tâche manque-t-elle de cadre ou de contexte, ou le temps nécessaire pour la réaliser ne peut que difficilement être justifié. Je vous invite alors à la supprimer, ou à la fusionner avec une autre jusqu’à enfin pouvoir répondre à ces cinq questions !&lt;/p&gt;

&lt;p&gt;Bien entendu, n’hésitez pas à modifier le plan de cette documentation comme vous l’entendez : vous êtes celui qui allez l’utiliser, après tout !&lt;/p&gt;

&lt;p&gt;La doc est finie ? Il ne reste plus que deux étapes, puis on pourra enfin considérer ce spike comme fini !&lt;/p&gt;

&lt;h1 id=&quot;presentation_spikeppt-&quot;&gt;Presentation_Spike.ppt 🎬&lt;/h1&gt;

&lt;p&gt;Avant de pouvoir clôturer ce spike, il serait bien d’avoir des retours extérieurs. Pour ça, rien de mieux que de le présenter à votre équipe !
Organisez ensemble une réunion, pas très longue. Au sein de mon équipe, une demi-heure suffit. Il vous faudra peut-être un peu moins ou un peu plus de temps.&lt;/p&gt;

&lt;p&gt;Utilisez cette présentation afin de montrer, étape par étape, ce que vous avez réalisé. Rappelez tout d’abord les objectifs du spike, avant d’expliquer votre analyse du problème et les objectifs que vous avez identifiés. Puis, présentez les différentes implémentations que vous avez tentées, avant de conclure en montrant votre documentation et en expliquant les tâches qui restent à accomplir pour réaliser la feature objectif.&lt;/p&gt;

&lt;p&gt;Il est très important que vous ne présentiez pas uniquement le code que vous avez réussi à faire fonctionner, mais aussi vos tentatives échouées, et ce pour plusieurs raisons. Tout d’abord, il est tout à fait possible qu’un de vos collègues, en voyant votre présentation, réalise une de vos erreurs et vous l’indique. Mais surtout, si quelqu’un d’autre que vous récupère une des tâches restantes, il risque de tenter les mêmes pistes que vous, et rencontrer les mêmes problématiques que vous !&lt;/p&gt;

&lt;p&gt;Une fois votre présentation terminée, débattez avec le reste de votre équipe. S’ils sont d’accord avec vous sur le plan d’action que vous avez établi grâce à votre tableau SMART, il vous reste une toute dernière étape à accomplir !&lt;/p&gt;

&lt;h1 id=&quot;happily-ever-after-&quot;&gt;“Happily ever after…” 💭&lt;/h1&gt;

&lt;p&gt;Maintenant que tous vos coéquipiers ont pu constater et valider votre travail, il ne vous reste plus qu’à acter la mise en place : et pour ça, rien de mieux que, aux côtés de votre &lt;em&gt;Product Owner&lt;/em&gt; (Ou de l’équivalent dans votre équipe) de créer des tâches, &lt;em&gt;User Story&lt;/em&gt;, post-its, ou quoi que ce soit, pour que les étapes restantes soient visibles et accessibles par tous !&lt;/p&gt;

&lt;p&gt;N’hésitez pas à le guider pour ajouter encore une fois des détails techniques dans ces US ou tâches : vous avez réalisé l’analyse, il serait dommage de ne pas l’utiliser, et ce sera autant de temps gagné pour votre équipe. Tant que vous y êtes, pensez aussi à ajouter un lien vers votre documentation, ou vers une vidéo de votre présentation… Plus il y aura de détails, mieux ça sera !&lt;/p&gt;

&lt;p&gt;Il est également possible, comme indiqué plus haut, que la tâche qui a entraîné la réalisation de ce spike se découvre être impossible à implémenter. Il s’agit là également d’un point à faire avec votre &lt;em&gt;Product Owner&lt;/em&gt;, afin de décider ensemble de la procédure à suivre : peut-être faudra-t-il redéfinir les critères d’acceptation, ou bien laisser tomber complètement cette idée.&lt;/p&gt;

&lt;h1 id=&quot;return-0&quot;&gt;return 0;&lt;/h1&gt;

&lt;p&gt;Vous avez fini votre spike ! Ce qui était à l’origine une tâche complexe, confuse ou impossible à prévoir, est désormais divisée en une série d’étapes, qui sera désormais bien plus aisée à réaliser pour votre équipe. Alors, satisfait ?&lt;/p&gt;</content><author><name>Etienne Doyon</name></author><category term="spike" /><category term="methodologie" /><category term="cytron" /><category term="tech" /><summary type="html">C’est une histoire bien connue, dans la vie de n’importe quel développeur : un ticket arrive dans le backlog, décrivant une problématique relativement complexe. C’est parfois une question de technologie inconnue, ou parfois simplement un chantier un peu trapu. Je pense que toutes les équipes ont, au moins une fois dans leur vie, fait face à ce genre de tâche impossible : c’est l’occasion des regards désespérés, alors qu’un junior se lamente en disant « Mais par où est-ce qu’il faut commencer ? ». Et c’est là qu’on répond : « Essaye de faire un spike ».</summary></entry><entry><title type="html">Handling dependencies failures in an API gateway</title><link href="https://tech.bedrockstreaming.com/2022/08/12/backend-fallbacks.html" rel="alternate" type="text/html" title="Handling dependencies failures in an API gateway" /><published>2022-08-12T00:00:00+00:00</published><updated>2022-08-12T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2022/08/12/backend-fallbacks</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2022/08/12/backend-fallbacks.html">&lt;p&gt;Welcome to our second article about the backend architecture and its api gateway.
In &lt;a href=&quot;/2022/06/10/backend-bff-intro.html&quot;&gt;the first part&lt;/a&gt;, we talked about the BFF and all services it depends on.
Today we’re going to take a look at what to do when one of them (or many), fails to respond.&lt;/p&gt;

&lt;h2 id=&quot;service-dependencies&quot;&gt;Service dependencies&lt;/h2&gt;

&lt;p&gt;As seen previously, the BFF uses multiple data sources and services to create a full layout.&lt;/p&gt;

&lt;p&gt;Those services are used to gather the contents to be displayed in the application:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;getting user personalisation data;&lt;/li&gt;
  &lt;li&gt;advertising and analytics configuration;&lt;/li&gt;
  &lt;li&gt;asking if the user has some authorizations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we don’t want our BFF to become one giant SPOF &lt;a href=&quot;#notes&quot;&gt;(1)&lt;/a&gt;, we need to be resilient to the death &lt;a href=&quot;#notes&quot;&gt;(2)&lt;/a&gt; of those dependencies, any of them, at any time!
You must keep in mind that &lt;strong&gt;our top priority is to always be able to answer something readable&lt;/strong&gt; to the frontend applications.&lt;/p&gt;

&lt;h2 id=&quot;ddd&quot;&gt;DDD&lt;/h2&gt;

&lt;p&gt;First thing first, we are using a DDD &lt;a href=&quot;#notes&quot;&gt;(3)&lt;/a&gt; approach for our modeling.
This means that we focus on the business, as described by our Product Owner. We try not to worry about the various implementation of our backend’s friends and their different services.&lt;/p&gt;

&lt;p&gt;A picture is always easier to understand.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2022-08-12-backend-fallbacks/ddd-page-min.png&quot; alt=&quot;asking for a layout to the domain means asking a interface for&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Above, we can see that when a user ask for a layout A, we are looking to resolve who is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;.
From the domain point of view, the page collection is only an interface.&lt;/p&gt;

&lt;p&gt;In the picture below, we see the “Page collection implem (Infra)”.
It’s a layer implementing the interface defined in the domain. It uses multiple clients that call the services behind.
It’s its responsibility to chose which service to look on for the page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2022-08-12-backend-fallbacks/ddd-page-full.png&quot; alt=&quot;page collection implementation chose the correct data source&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DDD is a too large subjects to be perfectly defined in this article. If you want to dig deeper into it, there are multiple great reads, feel free to check them out!
Now, how does this help us?&lt;/p&gt;

&lt;h2 id=&quot;handling-failures&quot;&gt;Handling failures&lt;/h2&gt;

&lt;p&gt;Failures handling is done by the middle layer seen in the previous example.
Its goal is to catch error &lt;a href=&quot;#notes&quot;&gt;(4)&lt;/a&gt;, and convert them to something expected and defined by the interface.&lt;/p&gt;

&lt;p&gt;That said, its responsibility is not to know what the expected answer is. To do that, we use the domain.&lt;/p&gt;

&lt;p&gt;Let’s see with a small code sample.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: The following example is not a real use-case, but it’s representative and simple enough to illustrate how it works.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the code below, we see a class that represents the subscribing status of a user, which has two properties:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hasAccess&lt;/code&gt; controls whether the user can read protected contents;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isSubscribed&lt;/code&gt; is used in analytics, and to show subscription pages.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SubscribeStatus&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$hasAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$isSubscribed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createAnonymous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createSubscribed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To create such an object, we use either one of the two static functions, depending on the status we get from the subscriptions API.
This is done in the middle layer, but the business is kept in the domain.&lt;/p&gt;

&lt;p&gt;To handle the failure, we add a new named constructor, dedicated to this specific case.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    public static function createUnknown(): self
    {
        return new self(true, false);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When an error happens and we can’t retrieve the user subscription status, we now have a fallback option.
With this fallback option, the user will:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;be able to access any content, it’s better to let an anonymous user access a content it should not, that blocking a paying customer;&lt;/li&gt;
  &lt;li&gt;still be reported as not subscribed and will see all available offers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of the time, the answer is even simpler than this one.&lt;/p&gt;

&lt;p&gt;Another example would be user’s viewing statuses. If we can’t retrieve them, we don’t display any progress bar.
Users won’t be able to tell if they have seen a content, but they will still be able to navigate the application.&lt;/p&gt;

&lt;h2 id=&quot;infrastructure-solution-the-stale-cache&quot;&gt;Infrastructure solution, the stale cache&lt;/h2&gt;

&lt;p&gt;In some cases, the above solution doesn’t work.
For example, contents information cannot be replaced by default values. If we don’t know about a video or a program, we cannot guess what it is.&lt;/p&gt;

&lt;p&gt;Luckily, we can rely on the stale cache.
Stale cache is an old cache entry which is expired. When the cache finds such entry, it usually ignores it and asks for a new version of the response.
In case of failure, we can use the available staled version.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2022-08-12-backend-fallbacks/stale-cache-usage.png&quot; alt=&quot;following first example, when the http fails to answer, we use the stale cached response&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The limitation is that a response must have been cached at least once, in order to have a staled version.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When there is no stale cache, we don’t display the content &lt;a href=&quot;#notes&quot;&gt;(5)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So far, we are only using it with http implementation:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;called API must answers with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stale-if-error&lt;/code&gt; cache directive, it allows for the response to be used while stale when an error happens;&lt;/li&gt;
  &lt;li&gt;called API can answer with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stale-while-revalidate&lt;/code&gt; cache directive, for better performances;&lt;/li&gt;
  &lt;li&gt;calling API can query with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max-stale&lt;/code&gt; cache directive, to use stale response see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#cache_directives&quot;&gt;the mdn for more on those headers&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;on the client side, we are using the &lt;a href=&quot;https://github.com/Kevinrob/guzzle-cache-middleware&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kevinrob/guzzle-cache-middleware&lt;/code&gt;&lt;/a&gt; to do the job.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For an entry cached for up to 10 minutes (answered with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max-age&lt;/code&gt;), we allow up to 4 hours of stale cache (with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stale-if-error&lt;/code&gt;).
Since we are using a shared cache, we are using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max-stale&lt;/code&gt; when querying, with a random value up to 1 hour.
This makes most requests use the last stale response while one of them ask for a fresher response.
Those values are chosen according to our platform usages where peak visitor last for about 2 to 3 hours at night.&lt;/p&gt;

&lt;p&gt;We plan to expand its usage to other kinds of cached entries, such as manually saved data, and database queries.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In today’s post, we have seen how we handle the loss of our dependencies by anticipating their potential failures and preparing default acceptable behaviours.&lt;/p&gt;

&lt;p&gt;Next time, we will see how we can spare some traffic on those dependencies when they’re struggling with traffic.&lt;/p&gt;

&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;SPOF, as &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_point_of_failure&quot;&gt;single point of failure&lt;/a&gt; since all frontend applications have to rely on the BFF, I cannot resist linking this excellent &lt;a href=&quot;https://xkcd.com/2347/&quot;&gt;xkcd&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;By “death”, we mean anything unexpected. It can be a 500 error code, a timeout, a wrong content. We will talk a bit more about this in the next article.&lt;/li&gt;
  &lt;li&gt;DDD, as domain driven design, you can read more about it on &lt;a href=&quot;https://martinfowler.com/bliki/DomainDrivenDesign.html&quot;&gt;Martin FOWLER’s website&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Throwing errors is still allowed, but restricted to domain exceptions, and must be specified in the method’s declaration in the interface (i.e. via a comment).&lt;/li&gt;
  &lt;li&gt;There will be a dedicated article on partial rendering.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;from-the-same-series&quot;&gt;From the same series&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/2022/06/10/backend-bff-intro.html&quot;&gt;What’s a BFF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2022/08/12/backend-fallbacks.html&quot;&gt;Handling API failures in a gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2022/08/25/backend-errors-connections.html&quot;&gt;What’s an error, and handling connection to multiple APIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2022/09/02/backend-circuit-breaker.html&quot;&gt;Using a circuit breaker&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;p&gt;In the meantime, feel free to have a look at other articles available on this blog:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;🇺🇸 &lt;a href=&quot;/2022/07/08/encrypt-aws-amis.html&quot;&gt;Encrypt AWS AMIs: one way to do it wrong&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;🇫🇷 &lt;a href=&quot;/2022/06/13/kubecon-2022-part-1.html&quot;&gt;Bedrock à la kubecon 2022 (4 articles)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Valentin CLARAS</name></author><category term="backend" /><category term="php" /><category term="api" /><category term="api-gateway" /><category term="back-for-front" /><category term="resiliency" /><summary type="html">Welcome to our second article about the backend architecture and its api gateway. In the first part, we talked about the BFF and all services it depends on. Today we’re going to take a look at what to do when one of them (or many), fails to respond.</summary></entry><entry><title type="html">How to ingest 400GB of logs per hour?</title><link href="https://tech.bedrockstreaming.com/2022/08/08/private-cdn-logs.html" rel="alternate" type="text/html" title="How to ingest 400GB of logs per hour?" /><published>2022-08-08T00:00:00+00:00</published><updated>2022-08-08T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2022/08/08/private-cdn-logs</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2022/08/08/private-cdn-logs.html">&lt;p&gt;Bedrock Streaming is a company that sells a white labeled streaming and live platform. Our customers are media groups, TV channels, and streaming companies. Our goal is to deliver a state-of-the-art streaming platform to our customers.&lt;/p&gt;

&lt;p&gt;To achieve this goal, we have our own Content Delivery Network (CDN), made of several bare metal servers racked in our Data Centers. Those servers run Nginx and are designed to output hundreds of Gbps (several tens of Pb per month) to end-users. We use them to cache video content at our infrastructure’s edge.&lt;/p&gt;

&lt;p&gt;This increases efficiency of the platform 96 times out of 100, as video traffic doesn’t have to flow all the way through our infrastructure, and improves user experience as it serves video faster. Also, it diminishes the cost of our Video On Demand (VOD) infrastructure as we need less servers in VOD Stack.&lt;/p&gt;

&lt;p&gt;This in-turn increases end-users (clients of our customers) satisfaction with the service.&lt;/p&gt;

&lt;h2 id=&quot;who-needs-to-ingest-400gb-of-logs-per-hour-anyway&quot;&gt;Who needs to ingest 400GB of logs per hour anyway?&lt;/h2&gt;
&lt;p&gt;Every time someone watches a video, it generates traffic on our CDN, resulting in a lot of access logs. Without filtering, it averages to 400GB uncompressed logs per hour.&lt;/p&gt;

&lt;p&gt;This is why, at first, we chose to not log 2XX or 3XX HTTP codes. We had too many of them, and we considered them not as worth it as 4XX and 5XX. The 4XX and 5XX can be especially useful for debugging a particular situation or, from a broader perspective, improving the user experience.&lt;/p&gt;

&lt;p&gt;This was the kind of Nginx configuration we had deployed:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;map $status $loggable {
    ~^[23]  0;
    default 1;
}
access_log /path/to/access.log combined if=$loggable;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;giving-autonomy-for-all-teams-on-logs&quot;&gt;Giving autonomy for all teams on logs&lt;/h2&gt;

&lt;p&gt;At the end of 2021, the finance team approached us with a challenge: how to bill our customers based on their end-users CDN usage?
This was in fact a need we already anticipated, we tried the nginx module &lt;a href=&quot;https://www.nginx.com/resources/wiki/modules/traffic_accounting/&quot;&gt;Traffic_accounting&lt;/a&gt;, but it did not satisfy us fully. This module calculates and exposes metrics on-the-fly, which is CPU and memory intensive, especially above 50Gbps of traffic per server.&lt;/p&gt;

&lt;p&gt;We also had another objective that wasn’t addressed with the nginx module. We needed to give autonomy to QA, Video, Data, and Finance teams. We wanted to allow them to use CDN logs when they needed without having to ask for it, and ideally in a practical and unified way.&lt;/p&gt;

&lt;p&gt;The company philosophy states that we are user obsessed and that we do not finger point. We work as a team to offer the best user experience, this is why we make all our logs available to all teams. We didn’t come around to do it for the CDN as the volume of logs was too much of a constraint.&lt;/p&gt;

&lt;h2 id=&quot;technical-solution&quot;&gt;Technical Solution&lt;/h2&gt;

&lt;p&gt;At Bedrock, we like to keep things simple. We think our CDN main mission is to serve video as efficiently as possible. Our CDN’s servers can’t keep PetaBytes of logs on their disks. This is why we chose to output logs to Amazon S3.&lt;/p&gt;

&lt;p&gt;The real benefit to using S3 is that you can easily plug it into Glue and Athena which allows you to request TeraBytes of data easily.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2022-08-08-privateCdnLogs/image1.png&quot; alt=&quot;technical Solution&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;sending-logs-to-s3-vector&quot;&gt;Sending logs to S3: Vector&lt;/h3&gt;

&lt;p&gt;To send logs from our CDN servers to Amazon S3 bucket, we had many options, but chose to test two approaches: &lt;a href=&quot;https://www.fluentd.org/&quot;&gt;Fluentd&lt;/a&gt; and &lt;a href=&quot;https://vector.dev/&quot;&gt;Vector&lt;/a&gt;. Fluentd is the legacy one, and Vector the new rusty one.&lt;/p&gt;

&lt;p&gt;After a quick evaluation, we decided to go with &lt;a href=&quot;https://medium.com/ibm-cloud/log-collectors-performance-benchmarking-8c5218a08fea&quot;&gt;Vector as it seemed more memory efficient&lt;/a&gt; and output more Logs Per Second under heavy load than Fluentd.&lt;/p&gt;

&lt;center&gt;&lt;img alt=&quot;Log per second&quot; src=&quot;/images/posts/2022-08-08-privateCdnLogs/image4.png&quot; /&gt;&lt;/center&gt;
&lt;center&gt;Source: &lt;a href=&quot;https://medium.com/ibm-cloud/log-collectors-performance-benchmarking-8c5218a08fea&quot; target=&quot;blank&quot;&gt;Who is the winner — Comparing Vector, Fluent Bit, Fluentd performance from Ajay Gupta&lt;/a&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We have Nginx and Vector installed on the CDN servers. Nginx now outputs all the access logs to a file. Vector reads the file, compresses logs to GZIP format and every 10Mb sends the logs to S3. Nginx may generate at peak 600GB of logs; we only send 10GB.&lt;/p&gt;

&lt;p&gt;Those logs are then locally cleaned by Logrotate.&lt;/p&gt;

&lt;h3 id=&quot;storing-logs-s3&quot;&gt;Storing logs: S3&lt;/h3&gt;
&lt;p&gt;We chose to store logs on an S3 bucket. We figured it was the most scalable and time efficient. S3 buckets can grow to PetaBytes easily. It is a few terraform lines away, this is convenient as we handle all our infrastructure with Terraform.&lt;/p&gt;

&lt;p&gt;We configured our bucket to use several lifecycle policies. One to automatically clean logs after 365 days, another to remove incomplete uploads, and another one to immediately remove files with a delete marker. Also, we configured the storage class in &lt;em&gt;intelligent tiering mode&lt;/em&gt; to store logs according to their access frequency.&lt;/p&gt;

&lt;p&gt;This will permit us to diminish the cost of our S3 bucket and not have an ever-increasing S3 bill.&lt;/p&gt;

&lt;h3 id=&quot;partitioning-logs-on-s3-lambda-stack&quot;&gt;Partitioning logs on S3: Lambda stack&lt;/h3&gt;

&lt;p&gt;Once logs are stored in S3 bucket, we need to classify and sort them in order to extract valuable intel. At Bedrock, we already use a modified version of a lambda stack, that does just that. Originally designed for Cloudfront, we have been using it also for Fastly and now for our Private CDN. You can find the original version at &lt;a href=&quot;https://github.com/aws-samples/amazon-cloudfront-access-logs-queries&quot;&gt;AWS Sample Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We have 2 different parts in this lambda stack.&lt;/p&gt;

&lt;center&gt;&lt;img alt=&quot;Move Acess Logs&quot; src=&quot;/images/posts/2022-08-08-privateCdnLogs/image3.png&quot; /&gt;&lt;/center&gt;
&lt;center&gt;source: &lt;a href=&quot;https://github.com/aws-samples/amazon-cloudfront-access-logs-queries/blob/mainline/images/moveAccessLogs.png&quot; target=&quot;blanck&quot;&gt;moveAccessLogs&lt;/a&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
The first part is called by S3 Event when a new file is pushed to a specific path. This lambda moves the file to a path assigned per server and per hour. This way, logs are stored for each server, each month, each day and each hour in a separate prefix.&lt;/p&gt;

&lt;center&gt;&lt;img alt=&quot;Transform Partition&quot; src=&quot;/images/posts/2022-08-08-privateCdnLogs/image2.png&quot; /&gt;&lt;/center&gt;
&lt;center&gt;source: &lt;a href=&quot;https://github.com/aws-samples/amazon-cloudfront-access-logs-queries/blob/mainline/images/transformPartition.png&quot; target=&quot;blank&quot;&gt;transformPartition&lt;/a&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
Then, another lambda transforms logs into &lt;a href=&quot;https://parquet.apache.org/&quot;&gt;Parquet format&lt;/a&gt;. Parquet is an open source format from the Apache Foundation. It is commonly used in big data. It takes up little space and is very effective.&lt;/p&gt;

&lt;p&gt;We chose to use AWS glue in order to create a database of our logs. The columns of the table are based on our log format. We can then request everything we want in Athena.&lt;/p&gt;

&lt;center&gt;&lt;img alt=&quot;Athena Query&quot; src=&quot;/images/posts/2022-08-08-privateCdnLogs/image5.png&quot; /&gt;&lt;/center&gt;

&lt;p&gt;We are now capable of extracting the bytes sent from a particular virtual host and sum it over a month for all CDN servers to bill our customers.
Those logs are now available for all the teams who may need them to improve their application or to debug an issue they are facing.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We chose &lt;a href=&quot;https://vector.dev/&quot;&gt;Vector&lt;/a&gt; to transport our private CDN logs to an S3 Bucket. Then, we chose to reuse an AWS Stack using Lambda and Glue to extract information from these logs, asynchronously. This stack is used in production for several months on other projects.
All the teams that needed to extract value from our CDN logs are now autonomous to do so. We are now able to bill our customers based on their CDN usage.&lt;/p&gt;</content><author><name>Arthur Zinck</name></author><category term="onprem" /><category term="cdn" /><category term="logs" /><category term="aws" /><category term="cloud" /><category term="nginx" /><category term="vector" /><category term="lambda" /><category term="s3" /><category term="glue" /><category term="athena" /><summary type="html">At Bedrock, we have a CDN that outputs on average 400GB of uncompressed logs per hour. In this article, we present the architecture we have setup to collect these logs and extract value from them.</summary></entry><entry><title type="html">Retour sur la conférence MiXiT 2022</title><link href="https://tech.bedrockstreaming.com/2022/07/28/retour-sur-mixit-2022.html" rel="alternate" type="text/html" title="Retour sur la conférence MiXiT 2022" /><published>2022-07-28T00:00:00+00:00</published><updated>2022-07-28T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2022/07/28/retour-sur-mixit-2022</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2022/07/28/retour-sur-mixit-2022.html">&lt;p&gt;&lt;img src=&quot;/images/posts/mixit-crepes.jpg&quot; alt=&quot;&amp;quot;MiXiT, la conférence avec des crêpes et du cœur&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mixitconf.org/&quot;&gt;MiXiT&lt;/a&gt; est une conférence “avec des crêpes et du cœur” qui se déroule à Lyon. Les sujets sont assez variés abordant autant l’agilité, que la programmation, le droit ou encore l’histoire de l’informatique.&lt;/p&gt;

&lt;p&gt;Voici un résumé des conférences de l’édition 2022 qui nous ont le plus marquées.&lt;/p&gt;

&lt;h2 id=&quot;how-to-build-the-alert-system-that-france-deserves&quot;&gt;How to build the alert system that France deserves?&lt;/h2&gt;

&lt;p&gt;Gaël Musquet nous a d’abord expliqué le rôle de Gustave Ferrié, qu’il considère comme le premier hacker, qui a installé des mâts de télégraphe sans fil en 1902, entre les émetteurs en Martinique, pour remplacer le câble télégraphique, détruit lors de la catastrophe de la montagne Pelée du 8 mai 1902. Cet homme avait saisi l’intérêt d’avoir un système de communication fiable.&lt;/p&gt;

&lt;p&gt;Gaël Musquet nous explique ce qu’on est en droit d’attendre en 2022 d’un pays moderne, concernant les alertes sur les risques majeurs, qui varient selon notre emplacement (du tsunami à la rupture de barrage artificiel).&lt;/p&gt;

&lt;p&gt;Il nous incite à lire le DICRIM de notre ville (&lt;a href=&quot;https://www.lyon.fr/sites/lyonfr/files/content/documents/2021-02/risque-majeurs-DICRIM-ALEX-25-01-2021.pdf&quot;&gt;celui de Lyon&lt;/a&gt;) ainsi qu’à nous procurer un poste de radio à piles, car dans l’éventualité d’un moment catastrophique sans Internet et sans satellites, comment ferons-nous pour nous tenir au courant de ce qu’il faut faire pour rester en vie ?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mixitconf.org/2022/how-to-build-the-alert-system-that-france-deserves-&quot;&gt;Page du talk sur le site de MiXiT et voir le replay&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;meet-null-the-unknown&quot;&gt;Meet NULL the UNKNOWN&lt;/h2&gt;

&lt;p&gt;Dans cette conférence, Laëtiia Avrot entame un rappel de la norme SQL, que PostgresQL implémente au plus près, sur la valeur de NULL en SQL. Et la valeur UNKNOWN est également abordée. Notamment la complexité induite par le fait qu’un champ de type Boolean peut se retrouver avec comme valeurs possibles : True, False, UNKNOWN et NULL. Cela donne un système à quadruple valeur. Pour un champ typé.&lt;/p&gt;

&lt;p&gt;NULL est plus facile à définir par ce qu’il n’est pas qu’en expliquant ce qu’il est.
Une option intéressante pour mettre en évidence la valeur NULL dans PostgresQL est d’en définir nous-même une valeur affichée.&lt;/p&gt;

&lt;p&gt;Ensuite, Laëtitia nous propose un Quizz. Sur une base de données qu’on connaît, chaque fois la même question est posée sur “Combien de lignes vont être retournées par la requête SQL ?”&lt;/p&gt;

&lt;p&gt;C’est intéressant, car chaque question comporte un degré de complexité élevé impliquant l’usage de la valeur NULL, tout en suivant la logique de la norme SQL. Cerise sur le gâteau, Laëtitia propose en “Réponse D”, le nom d’une scientifique célèbre et nous en donne une courte biographie à chaque question.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Liens&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mydbanotebook.org/&quot;&gt;Blog de l’oratrice, Laëtitia Avrot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mixitconf.org/2022/meet-null-the-unknown&quot;&gt;Page du talk sur le site de MiXiT et voir le replay&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;parlez-de-vous-faites-des-feedbacks&quot;&gt;Parlez de vous, faites des feedbacks&lt;/h2&gt;

&lt;p&gt;Le feedback est un outil communicationnel qui permet de formuler un avis sur une situation passée dans le but de gérer les situations futures.&lt;/p&gt;

&lt;p&gt;On peut trouver plusieurs formes de feedbacks :
le feedback est à destination de la personne, pour l’aider à s’améliorer. Elle peut décider de le suivre ou non,
la demande que l’on fait à quelqu’un est à notre bénéfice (on demande à la personne de changer un comportement qui nous gêne) en laissant la possibilité à la personne de décider si elle veut ou non répondre favorablement à cette demande,
l’exigence qui est aussi à notre bénéfice, mais pour laquelle on ne laisse pas le choix (dans le cadre d’une relation hiérarchique)&lt;/p&gt;

&lt;p&gt;Julie Quillié propose un modèle de feedbacks basé sur la CNV (Communication Non Violente) et qui peut se résumer de la manière suivante.&lt;/p&gt;

&lt;h3 id=&quot;feedback-basé-sur-la-cnv-communication-non-violente&quot;&gt;Feedback basé sur la CNV (Communication Non Violente)&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;On vérifie la disponibilité de la personne en lui demandant si elle est d’accord pour qu’on lui fasse des feedbacks et sous quelle forme.&lt;/li&gt;
  &lt;li&gt;On formule le feedback :
  Décrire une Observation, les faits (= pas de jugement)
  Exprimer le Sentiment que cette situation a engendré
  Expliquer le Besoin qui est la source du sentiment ressenti
  et finir par faire une Demande (= réalisable, formulée positivement, précise)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Un exemple :&lt;/strong&gt;
  Nous avions rendez-vous à 12h et il est 12h30 = observation, factuel.
  Je suis très fâché car je m’étais organisé pour être à l’heure = le sentiment
  C’est important pour moi de ne pas perdre de temps et de pouvoir rester libre dans mon organisation = le besoin
  La prochaine fois que tu sais que tu seras en retard, peux-tu stp m’appeler dès que possible pour me le signaler ? De cette manière, je peux me réorganiser facilement. = la demande&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;On vérifie ce qui a été reçu par la personne. On lui propose de nous reformuler ce qu’elle en a retenu. Cela permet de vérifier que le message que l’on voulait faire passer a bien été entendu.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;2ème-possibilité-pour-faire-un-feedback--le-feedback-en-4-temps&quot;&gt;2ème possibilité pour faire un feedback : le feedback en 4 temps&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;On demande à la personne ce qu’elle a aimé dans ce qu’elle vient de faire&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On lui demande ensuite ce qu’elle aurait aimé faire différemment&lt;/p&gt;

    &lt;p&gt;On lui demande si elle veut qu’on lui donne notre feedback&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;“Moi, j’ai aimé …, parce que … ”&lt;/em&gt; : on parle de ce que ça nous a apporté (clarté, motivation, inspiration, soutien, etc.)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;“Et j’aurais aimé …  de différent, parce que … ”&lt;/em&gt; on parle de ce que ça nous apporterait (clarté, motivation, inspiration, soutien, etc.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Et en bonus : “Peux-tu me dire comment tu reçois ce que je te dis ?”&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mixitconf.org/2022/parlez-de-vous-faites-des-feedbacks-&quot;&gt;Page du talk sur le site de MiXiT et voir le replay&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;arrêtez-lauto-sabotage-et-sortez-de-la-boucle-systémique&quot;&gt;Arrêtez l’auto-sabotage et sortez de la boucle (systémique)&lt;/h2&gt;

&lt;p&gt;Dans cet atelier, Albane Veyron nous explique que nous avons tous des croyances sur nous-mêmes et sur les autres. Les croyances sont des pensées qui sont des vérités, pour nous. Elles ont plusieurs origines : l’enfance, notre cercle social et notre expérience de vie.&lt;/p&gt;

&lt;p&gt;Les croyances peuvent être aidantes ou limitantes.&lt;/p&gt;

&lt;p&gt;L’atelier commence par une première phase qui consiste à reconnaître une de ses croyances limitantes :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;les généralisations : personne, tout le monde, toujours, tout le temps, jamais, trop, je dois, il faut, pas assez&lt;/li&gt;
  &lt;li&gt;les barrières infinies aka les bonnes excuses pour ne pas passer à l’action : j’aimerais, mais … / je pourrais, mais …&lt;/li&gt;
  &lt;li&gt;les sensations de déjà vu : les blocages et les situations récurrentes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Une fois qu’on a repéré une de ses croyances limitantes, on l’écrit sur une feuille et on va ensuite décomposer cette croyance et réfléchir à :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;son origine : d’où nous vient cette croyance ? depuis combien de temps fait-elle partie de nous ? nous vient-elle de notre éducation ?&lt;/li&gt;
  &lt;li&gt;les bénéfices : quels bénéfices nous apporte cette croyance ? qu’est-ce qu’elle nous permet ?&lt;/li&gt;
  &lt;li&gt;les inconvénients / les freins : en quoi cette croyance nous gêne et quels sont les impacts sur notre vie (pro ou perso) ?&lt;/li&gt;
  &lt;li&gt;les contradictions : a-t-on déjà fait quelque chose ou été dans une situation qui vient contredire cette croyance ?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On va ensuite venir agrémenter notre croyance avec tous ces éléments puis, pour finir, transformer notre croyance limitante en une croyance aidante.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mixitconf.org/2022/-arretez-l-auto-sabotage-et-sortez-de-votre-boucle-systemique-&quot;&gt;Page du talk sur le site de MiXiT et voir le replay&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;comment-fonctionne-un-gestionnaire-de-mots-de-passe&quot;&gt;Comment fonctionne un gestionnaire de mots de passe&lt;/h2&gt;

&lt;p&gt;Les mots de passe sont partout. Ils nous permettent d’accéder à nos photos, nos comptes bancaires, nos documents de santé et bien d’autres données sensibles que l’on ne souhaite pas voir aux mains d’individus que l’on ne connaît pas.
Tout le monde sait que l’on doit avoir des longs mots de passe mais comment tous les retenir ? C’est là que les gestionnaires de mot de passe entrent en jeu. Mais peut-on leur faire confiance ? Comment ça marche au juste ? C’est à cette question qu’a souhaité répondre Eric Daspet pendant sa conférence.&lt;/p&gt;

&lt;p&gt;Le rôle d’un gestionnaire de mots de passe est de permettre à son utilisateur d’utiliser qu’un seul mot de passe pour ensuite laisser l’outil générer et mémoriser tous les autres mots de passe. On a plus qu’à retenir un seul mot de passe qui peut donc être long et complexe. L’exercice de mémoire sera alors moins compliqué que si on en avait plusieurs à retenir.&lt;/p&gt;

&lt;p&gt;À travers son exposé, on découvre un peu plus tous les procédés de cryptographie utilisés afin de gérer les mots de passe que l’on va créer ou modifier en utilisant ces outils.
Grâce à de nombreux schémas, il explique clairement les différentes étapes de chiffrements utilisées que ce soit pour la création du mot de passe maître, la création et le changement des mots de passe, l’affichage des mots de passe et même le fonctionnement du partage de mots de passe (lorsque celui-ci existe dans l’outil).&lt;/p&gt;

&lt;p&gt;On découvre pendant cette heure que les gestionnaires de mots de passe ne cherchent pas à réinventer la roue en matière de cryptographie mais s’appuient sur des concepts déjà éprouvés et robustes. On apprend aussi que tout est chiffré de bout en bout et que seul celui qui détient le mot de passe maître (l’utilisateur donc, même l’outil ne le connaît pas et n’en a pas besoin) peut interagir avec les mots de passe créés. Rassurant, non ? En tout cas, me voilà maintenant prêt à expliquer autour de moi pourquoi il est grand temps de passer à un gestionnaire de mot de passe !&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mixitconf.org/2022/comment-fonctionne-un-gestionnaire-de-mots-de-passe-&quot;&gt;Page du talk sur le site de MiXiT et voir le replay&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;optimiser-votre-revue-de-code-avec-le-rebase-interactif&quot;&gt;Optimiser votre revue de code avec le rebase interactif&lt;/h2&gt;

&lt;p&gt;GIT est un outil bien connu des développeurs de nos jours, mais dès qu’on s’écarte des commandes traditionnelles (checkout, commit et push), on sait bien moins ce que l’on peut faire d’autre avec.&lt;/p&gt;

&lt;p&gt;Sonia Seddiki nous explique ici comment rendre la revue de code, souvent longue et fastidieuse, plus simple et agréable pour nos collègues avec quelques astuces qu’elle a partagées avec nous lors d’un live coding.
Contrairement à l’idée que j’en avais, le rebase interactif n’est pas là que pour nettoyer les noms de commit sans aucun sens que j’avais mis dans la précipitation mais que c’est un outil bien plus puissant.&lt;/p&gt;

&lt;p&gt;Elle nous a ainsi montré comment elle utilise cette commande afin d’organiser et de donner une chronologie à son travail rendant ainsi la revue de code plus facile. Elle a ainsi, devant nos yeux, changé des fichiers de commits, réorganisé l’ordre des commits et tout ça sans altérer le code produit.&lt;/p&gt;

&lt;p&gt;Évidemment, c’est une habitude à prendre, elle-même le souligne que ce n’est pas facile d’exporter cette bonne pratique au sein des équipes avec qui elle travaille. Mais la démonstration m’a convaincu, je vais m’essayer à cette pratique et qui sait, un jour j’arriverai peut-être à mon tour à convaincre des gens de mon équipe à en faire de même.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mixitconf.org/2022/optimisez-vos-revues-de-code-avec-le-rebase-interactif-&quot;&gt;Page du talk sur le site de MiXiT et voir le replay&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;violence-herméneutique---comment-éviter-le-malaise&quot;&gt;Violence Herméneutique - Comment éviter le malaise&lt;/h2&gt;

&lt;p&gt;Le MiXiT est aussi un évènement nous permettant d’ouvrir notre esprit à des connaissances qui sortent de notre quotidien. Cette conférence animée par Romeu Moura et Sara Dufour en fait partie. Ce talk nous fait découvrir le concept d’herméneutique, défini en début de présentation comme étant “La connaissance d’un concept permettant l’interprétation”. Si vous n’avez rien compris à cette définition à ce stade, c’était également mon cas.&lt;/p&gt;

&lt;p&gt;Malgré cette introduction confuse, petit à petit, en allant de plus en plus dans le détail, des sujets apparaissent et donnent sens à ce concept. On y parle de systémisme, de charge mentale, de patriarcat et autres systèmes de notre société dont l’exercice de compréhension va plus loin que leur simple mot ou leur définition. L’herméneutique consiste à comprendre les fondements et rouages d’un système, qu’on y appartienne ou non.&lt;/p&gt;

&lt;p&gt;Mais notre société, et l’humain, tend à compliquer cet exercice de compréhension de concept. C’est là qu’on arrive à la notion de violence herméneutique, à savoir tous les mécanismes conscients et inconscients, systémiques ou non, internes ou externes, qui vont venir entraver et contraindre l’herméneutique. De réels freins à la compréhension d’un système. Ils peuvent prendre plusieurs formes, comme la notion de norme, le fait de nier l’existence d’un système ou de réfuter un sujet du simple fait qu’il soit considéré tabou. On y retrouve également la déformation de mots, et le fameux “wokisme”.&lt;/p&gt;

&lt;p&gt;Il s’agit d’une conférence passionnante, dérangeante et éclairante que je conseille à tous. Le début piétine un peu, mais le voyage en vaut la peine.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mixitconf.org/2022/violence-hermeneutique-comment-eviter-le-malaise-&quot;&gt;Page du talk sur le site de MiXiT et voir le replay&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;designer-pour-le-service-public&quot;&gt;Designer pour le service public&lt;/h2&gt;

&lt;p&gt;Cela peut faire un peu peur dit comme ça, mais je suis allé sceptique à cette conférence d’Anne-Sophie Tranchet. J’étais rattaché à une image peu flatteuse des outils du service public, alors que ces derniers ont connu une vraie progression ces dernières années. Anne-Sophie fait partie du programme beta.gouv qui intervient auprès des administrations pour les services numériques.&lt;/p&gt;

&lt;p&gt;C’est armé des bonnes pratiques de nos métiers que Beta.gouv a la mission de transformer et d’accompagner les services publics. On y apprendra le parcours d’Anne-Sophie, ce que travailler pour le service public veut dire, ainsi que les projets et challenges qui en découlent. Leur méthodologie centrée utilisateur leur permet de travailler en itération, et de délivrer de la valeur, en incubation d’abord, puis jusqu’à un développement national en fonction des retours sur le service.&lt;/p&gt;

&lt;p&gt;On peut citer quelques réalisations Beta.gouv comme la plateforme dossierfacile.com, qui facilite la création de dossier pour une location, ou 1000 Premiers Jours, qui délivre des informations et un accompagnement sur la grossesse et les 2 premières années de l’enfant&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mixitconf.org/2022/designer-pour-le-service-public&quot;&gt;Page du talk sur le site de MiXiT et voir le replay&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;nos-autres-conférences-coup-de-coeur&quot;&gt;Nos autres conférences coup de coeur&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mixitconf.org/2022/ma-vie-est-un-ticket-eloge-de-la-communication-paresseuse-et-enjeux-pour-l-agilite-du-futur&quot;&gt;Ma vie est un ticket&lt;/a&gt; de Romain Couturier, une conférence raconté avec dessins légère et qui donne des idées pour lutter contre la mauvaise utilisation des outils de ticketing&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mixitconf.org/2022/tout-ce-que-l-on-ne-vous-dit-pas-sur-l-intelligence-artificielle-ia-&quot;&gt;Tout ce que l’on ne vous pas dit sur l’IA&lt;/a&gt; de Amélie Cordier, une conférence pleine d’humour sur ce qu’est et n’est pas une IA&lt;/li&gt;
&lt;/ul&gt;</content><author><name>[&quot;s_haim&quot;, &quot;e_perrin&quot;, &quot;j_mastounga&quot;, &quot;s_zoccarato&quot;]</name></author><category term="conference" /><category term="agile" /><summary type="html"></summary></entry><entry><title type="html">Comment appliquer automatiquement des modifications sur une codebase JS 🤖</title><link href="https://tech.bedrockstreaming.com/refactorer-avec-jscodeshift" rel="alternate" type="text/html" title="Comment appliquer automatiquement des modifications sur une codebase JS 🤖" /><published>2022-07-26T00:00:00+00:00</published><updated>2022-07-26T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/refactorer-avec-jscodeshift</id><content type="html" xml:base="https://tech.bedrockstreaming.com/refactorer-avec-jscodeshift">&lt;p&gt;Dans cet article, je vais vous présenter &lt;a href=&quot;https://github.com/facebook/jscodeshift&quot;&gt;JSCodeshift&lt;/a&gt;, une libraire qui va vous permettre d’analyser et appliquer automatiquement des modifications sur du code Javascript ou Typescript.&lt;/p&gt;

&lt;h1 id=&quot;cas-décole-&quot;&gt;Cas d’école 👨‍🎓&lt;/h1&gt;

&lt;p&gt;Maintenir à jour les dépendances de nos projets JS est l’une des règles primordiales que nous nous efforçons de bien respecter pour &lt;a href=&quot;/2021/09/01/bonnes-pratiques-web&quot;&gt;ne pas avoir à jeter nos applications tous les deux ans. 🗑&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cette tâche exige souvent d’un développeur plus de travail que de simplement changer les versions des libraires dans le &lt;em&gt;package.json&lt;/em&gt;.
Si une dépendance est utilisée dans différentes parties du code et qu’un breaking-change est introduit, on peut vite se retrouver avec &lt;strong&gt;des centaines&lt;/strong&gt; de fichiers à modifier manuellement.&lt;/p&gt;

&lt;center&gt;
&lt;a href=&quot;https://www.monkeyuser.com/2018/implementation/&quot;&gt;&lt;img src=&quot;/images/posts/refactorer-avec-jscodeshift/102-implementation.png&quot; alt=&quot;Caricature de projet avec ses dependencies&quot; /&gt;&lt;/a&gt;
&lt;br /&gt;
ℹ️ &lt;em&gt;Exemple d&apos;un project Javascript qui ne respecte pas cette règle&lt;/em&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;C’est un problème de ce genre que nous avons rencontré lors de la mise à jour de &lt;a href=&quot;https://github.com/BedrockStreaming/i18n-tools&quot;&gt;notre librairie d’internationalisation&lt;/a&gt; sur notre web app React en JS.&lt;/p&gt;

&lt;p&gt;Après mise à jour, l’appel à l’API de la librairie change de forme :&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//Before&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;translationKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// All options are passed as parameters&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Data used for interpolation&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Amount used for plural form&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;general&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Use general plural form&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;renderers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// JSX renderers&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//After&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;translationKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Object containing all options&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Data used for interpolation&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Amount used for plural form&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;general&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Use general plural form&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;renderers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// JSX renderers&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Plus simplement, quelques exemples de transformations :&lt;/p&gt;
&lt;div class=&quot;language-tsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Before&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;translationKeyExample&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;labelKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;translationKeyExample&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// After&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;translationKeyExample&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Basic usecase with only one argument, nothing changed on this one&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;labelKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aNumber&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;translationKeyExample&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dans le cas le plus basique sans les arguments optionnels &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t(‘translationKey’)&lt;/code&gt; nous n’avons rien à modifier, mais dans les autres cas, il y a du changement à faire. 🧹&lt;/p&gt;

&lt;h2 id=&quot;les-solutions-que-nous-avons-écartées-&quot;&gt;Les solutions que nous avons écartées ❌&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Avec un &lt;strong&gt;Find All&lt;/strong&gt;, trouver toutes les utilisations de la librairie et modifier les appels problématiques à la main.
    &lt;ul&gt;
      &lt;li&gt;Cette solution est la plus simple, mais peut être très répétitive, ce qui augmente la probabilité de faire une erreur. On aura du mal à uniquement filtrer les cas spécifiques qui nous intéressent.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Utiliser des RegExp pour mieux cibler les cas spécifiques
    &lt;ul&gt;
      &lt;li&gt;Cela nous a permis de faire rapidement une estimation approximative du nombre de cas qu’il nous faudrait modifier, mais nous avons eu du mal à cibler correctement tous les appels et la modification se fait toujours à la main.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Créer un fichier de définition TypeScript pour la librairie, et laisser le Language Server Protocol ou son IDE trouver les appels problématiques
    &lt;ul&gt;
      &lt;li&gt;La solution la plus rapide et la plus fiable pour la partie détection, mais qui demande toujours de faire les modifications à la main.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mais il nous restait encore un Joker pour cette tâche. 🃏&lt;/p&gt;

&lt;h1 id=&quot;jscodeshift-&quot;&gt;JSCodeshift 🪄&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/jscodeshift&quot;&gt;Cette librairie&lt;/a&gt; permet d’exposer facilement &lt;a href=&quot;https://fr.wikipedia.org/wiki/Arbre_de_la_syntaxe_abstraite&quot;&gt;&lt;em&gt;l’Abstract Syntax Tree&lt;/em&gt;&lt;/a&gt;, autrement dit la représentation du code après le parsing des fichiers.
Nous pouvons ainsi écrire des scripts qui nous permettent de parcourir cet arbre, de le modifier facilement, d’appliquer les modifications et de les formater.
Ces scripts s’appellent des &lt;em&gt;codemods&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Pour en savoir un peu plus sur &lt;em&gt;l’Abstract Syntax Tree&lt;/em&gt;, je vous conseille de jeter un coup d’œil à &lt;a href=&quot;https://astexplorer.net/&quot;&gt;ASTExplorer&lt;/a&gt; qui vous permet de visualiser l’AST d’un fichier facilement pour en comprendre le fonctionnement.&lt;/p&gt;

&lt;p&gt;Quelques librairies ont proposé des &lt;em&gt;codemods&lt;/em&gt; lors de leurs grosses mises à jour, par exemple &lt;a href=&quot;https://github.com/reactjs/react-codemod&quot;&gt;React avec react-codemod&lt;/a&gt;.&lt;/p&gt;

&lt;center&gt;
&lt;a href=&quot;https://astexplorer.net/&quot;&gt;&lt;img src=&quot;/images/posts/refactorer-avec-jscodeshift/astexplorer.png&quot; alt=&quot;Capture d&apos;écran du site ASTExplorer&quot; /&gt;&lt;/a&gt;
&lt;br /&gt;
ℹ️ &lt;em&gt;Capture d&apos;écran du site ASTExplorer&lt;/em&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;en-application-&quot;&gt;En application 💪&lt;/h2&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FileInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jscodeshift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// If we don&apos;t find any &quot;Translate&quot; string inside our file, we can assume that it&apos;s safe to skip it&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Translate[(]&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CallExpression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filterOutSimpleUsages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mutatePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dans la fonction principale du script, j’ai utilisé une expression régulière pour filtrer les fichiers qui ne possèdent pas la chaîne de caractères &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Translate(&lt;/code&gt;.
Ceci permet de gagner un peu de temps sur l’exécution. ⌛️&lt;/p&gt;

&lt;p&gt;Ensuite, je cherche dans le fichier une ou plusieurs variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t&lt;/code&gt;. Si aucune n’est présente, on peut passer au fichier suivant, sinon on continue le raffinage.&lt;/p&gt;

&lt;p&gt;On passe dans un filtre qui va nous permettre d’enlever les usages de la fonction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t&lt;/code&gt; avec un seul argument qui ne posent pas de problème.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requiredPropertiesKeys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;general&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;renderers&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Filter function to ensure that we enter the mutation function only if needed&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filterOutSimpleUsages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ASTPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CallExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// If we only have the translation key, we don&apos;t need to refactor this usage&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// More than 2 arguments is an absolute sign of an old usage&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// If second argument is not an object, we need to manually fix this case&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ObjectExpression&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// If none of the above properties is found in second argument, we can say that this is an old usage&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requiredPropertiesKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;every&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requiredPropertyKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ObjectExpression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// I needed to do some TS trickery to avoid getting warnings everywhere, sorry for that&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ObjectProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requiredPropertyKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finalement, on peut passer dans la fonction de mutation, qui va nous permettre de modifier directement le code des fichiers.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Mutation function, we apply our modification to the AST&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mutatePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSCodeshift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ASTPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CallExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;objectProperties&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requiredPropertiesKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;propertyKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// If no argument or argument is a spread type, we don&apos;t take it in consideration&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;SpreadElement&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// If argument is undefined, we skip it&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// We create a new object property with an identifier (the object key) and put our argument inside&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;objectProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;propertyKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ObjectProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Finally, we keep our translation key in first position and our newly created object in second argument&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;objectExpression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;objectProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On récupère les arguments déjà existants, on crée un nouvel objet et on y place nos arguments !&lt;/p&gt;

&lt;h2 id=&quot;résultats-&quot;&gt;Résultats ✨&lt;/h2&gt;

&lt;p&gt;⏱ Pour à peu près &lt;strong&gt;2900 fichiers&lt;/strong&gt;, le script a mis moins de &lt;strong&gt;5,9 secondes&lt;/strong&gt; à s’exécuter &lt;em&gt;(Macbook Pro 13” 2019)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;JSCodeshift nous a permis de cibler très rapidement 99 % des cas problématiques et de les corriger automatiquement.&lt;/p&gt;

&lt;p&gt;Le pourcentage restant concerne des cas où il était généralement difficile de cibler la fonction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t&lt;/code&gt; (passée en props à un autre composant sous un autre nom). Ces quelques cas ont pu être corrigés rapidement à la main et détectés grâce à nos nombreux tests (heureusement qu’on a &lt;a href=&quot;/2021/09/01/bonnes-pratiques-web#tester-tester-tester&quot;&gt;une règle de bonne pratique&lt;/a&gt; pour ça 😇).&lt;/p&gt;

&lt;h1 id=&quot;tldr--conclusion-&quot;&gt;tl;dr &amp;amp; conclusion 🏃&lt;/h1&gt;

&lt;p&gt;Vous pouvez retrouver la source du codemod &lt;a href=&quot;https://gist.github.com/martinschneider01/40e0f340cf2ed549a875e8de00475b97&quot;&gt;ici même&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Si vous êtes mainteneur d’une librairie, il peut être très intéressant de livrer des &lt;em&gt;codemods&lt;/em&gt; en même temps que les breaking-changes pour faciliter l’adoption des mises à jour par exemple !&lt;/p&gt;

&lt;p&gt;Avec une prise en main relativement facile pour un résultat très rapide, nous avons été très satisfaits de JSCodeshift et nous n’hésiterons pas à réutiliser cette librairie dans le futur. 👊&lt;/p&gt;

&lt;p&gt;Merci à tous pour la lecture de mon premier article et JSCodeshiftez bien. 😘&lt;/p&gt;</content><author><name>Martin SCHNEIDER</name></author><category term="javascript" /><category term="outil" /><category term="cytron" /><category term="frontend" /><category term="react" /><category term="refactor" /><category term="js" /><summary type="html">Dans cet article, je vais vous présenter JSCodeshift, une libraire qui va vous permettre d’analyser et appliquer automatiquement des modifications sur du code Javascript ou Typescript.</summary></entry><entry><title type="html">Bedrock Dev Facts #17</title><link href="https://tech.bedrockstreaming.com/2022/07/22/bedrock-dev-facts-17.html" rel="alternate" type="text/html" title="Bedrock Dev Facts #17" /><published>2022-07-22T00:00:00+00:00</published><updated>2022-07-22T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2022/07/22/bedrock-dev-facts-17</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2022/07/22/bedrock-dev-facts-17.html">&lt;p&gt;L’été arrive, les vacances, le repos.&lt;br /&gt;
Et vu les derniers devfacts des équipes Bedrock, il semblerait qu’il soit temps.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/tags/#devfacts&quot;&gt;Les autres articles de cette série sont disponibles ici.&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;cest-presque-fini&quot;&gt;C’est presque fini&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;C’est fait à 80%.&lt;br /&gt;
J’ai fait tout le code, mais il ne marche pas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;la-potion-magique&quot;&gt;La potion magique&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Je n’ai plus de cerveau, je vais aller au bar&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;cest-dommage-ils-allaient-le-faire-&quot;&gt;C’est dommage, ils allaient le faire !&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Notre stratégie, c’est d’être à la bourre pour que d’autres fassent le travail&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;lenvers-du-décor-du-télétravail&quot;&gt;L’envers du décor du télétravail&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Quand il y a du vent chez moi la connexion est instable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;ah-&quot;&gt;Ah !&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;J’ai tiré toute mon inspiration de manager des Shadocks&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;les-conséquences-du-management-à-la-shadock&quot;&gt;Les conséquences du management à la Shadock&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Je ne vais tout de même pas faire ma sieste pendant des heures de repos&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;auto-critique-du-manager-shadock-on-est-sauvé-&quot;&gt;Auto-critique du manager Shadock. On est sauvé !&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tout le monde s’en fout de ce que je fais&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;quand-tout-le-monde-le-fait-mais-que-personne-ne-comprend-pourquoi&quot;&gt;Quand tout le monde le fait, mais que personne ne comprend pourquoi&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;En parlant du TimeSheet, de manière naïve&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“Mais il y a vraiment quelqu’un dans la boite qui fait ça correctement ?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;est-ce-que-je-peux-casser-à-moitié-&quot;&gt;Est-ce que je peux casser à moitié ?&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Est-ce qu’on peut faire un semi BC-break ⁉️&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;cest-pas-faux&quot;&gt;C’est pas faux&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;C’est connu et assumé, ça fonctionnera pas jusqu’au moment où ça fonctionnera&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;quand-tu-as-délaissé-la-review-toute-la-semaine&quot;&gt;Quand tu as délaissé la review toute la semaine&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Allez bon vendREVIEW à tous&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;🤔&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Les tests passent mais ça plante&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;le-détecteur-à-petit-dej&quot;&gt;Le détecteur à petit-dej&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;“je cherche X …”&lt;/li&gt;
    &lt;li&gt;“va voir à la cafete, il y a quelqu’un qui a ramené de la bouffe”&lt;/li&gt;
    &lt;li&gt;“c’est un honeypot à X ça !”&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;cest-beau-le-mob-programming&quot;&gt;C’est beau le mob programming&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dev-facts-17/mob-programming.png&quot; alt=&quot;Image d&apos;un commit de H disant &amp;quot;little bug for E&amp;quot;, puis d&apos;un commit de E disant &amp;quot;fix H&apos;s shit&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;meurs-un-autre-jour&quot;&gt;Meurs un autre jour&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Quand tu veux vraiment être sûr que ton code est exécuté mais que tu oublies de nettoyer l’historique&lt;/em&gt;
&lt;img src=&quot;/images/posts/dev-facts-17/die-to-test.png&quot; alt=&quot;Image du code PHP d&apos;un commit où il reste un `die(&apos;HEEEEERE&apos;)&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cest-pas-compliqué-linformatique&quot;&gt;C’est pas compliqué l’informatique&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Comment tu as fait ça ?&lt;/li&gt;
    &lt;li&gt;J’ai appuyé sur des touches de mon clavier&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dev-facts-17/type-30-keyboard.png&quot; alt=&quot;Image d&apos;un ticket où le développeur indique qu&apos;il a changé une valeur de 20 à 30 en expliquant le &amp;quot;comment&amp;quot; par &amp;quot;en appuyant sur le clavier&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;google-translate-nest-pas-toujours-ton-ami&quot;&gt;Google translate n’est pas toujours ton ami&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;“Tu peux traduire l’US en français quand tu la lis ?”&lt;/li&gt;
    &lt;li&gt;“Pas de souci, Alors… &lt;em&gt;il faut ajouter un message de grille pain d’erreur lors du …&lt;/em&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;si-ça-passait-cétait-beau&quot;&gt;Si ça passait, c’était beau&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Une personne qui parle à son écran sur lequel il y a du code :&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Dis moi que ça va marcher, s’il te plait 🙏&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;sur-un-malentendu-il-a-été-engagé&quot;&gt;Sur un malentendu, il a été engagé&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;L’essentiel de mes connaissances, c’est du bluff&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;et-on-fini-avec-un-instant-poésie&quot;&gt;Et on fini avec un instant poésie&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Mes p’tits chats, demain c’est démo infra,&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Pour l’instant il n’y a pas d’inscrits,&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;N’hésitez pas à venir présenter votre travail accompli !&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;D’ici à ce prochain rendez-vous,&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Des bisous 😘&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Bedrock</name></author><category term="devfacts" /><category term="humour" /><summary type="html">L’été arrive, les vacances, le repos. Et vu les derniers devfacts des équipes Bedrock, il semblerait qu’il soit temps.</summary></entry><entry><title type="html">Encrypt AWS AMIs: one way to do it wrong</title><link href="https://tech.bedrockstreaming.com/2022/07/08/encrypt-aws-amis.html" rel="alternate" type="text/html" title="Encrypt AWS AMIs: one way to do it wrong" /><published>2022-07-08T00:00:00+00:00</published><updated>2022-07-08T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2022/07/08/encrypt-aws-amis</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2022/07/08/encrypt-aws-amis.html">&lt;p&gt;At Bedrock, we build our own privately shared AMIs (&lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html&quot;&gt;Amazon Machine Images&lt;/a&gt;) for different parts of our stack: kubernetes platform, vod platform, etc. We build those AMIs to optimize kernel parameters,to embed some tools, and more. We have been using Packer for a couple of years, and everything has been working just fine.&lt;/p&gt;

&lt;p&gt;Concerned about following AWS best-practices, we recently added &lt;a href=&quot;https://aws.amazon.com/premiumsupport/knowledge-center/ebs-automatic-encryption/&quot;&gt;encryption by default to all new EBS volumes&lt;/a&gt; in all our accounts.&lt;/p&gt;

&lt;p&gt;We didn’t expect it, but this decision impacted our AMI creation process. We thus began to update our Packer workflow to integrate this new constraint. We were telling ourselves that more security was for the best and we didn’t take enough steps back to analyze drawbacks.&lt;/p&gt;

&lt;p&gt;You will find in this blog post multiple tips that may help you handle your AMIs encryption, but also why you shouldn’t handle it our way.&lt;/p&gt;

&lt;h2 id=&quot;build-an-encrypted-ami&quot;&gt;Build an encrypted AMI&lt;/h2&gt;

&lt;p&gt;To build our AMI, Packer launches an EC2 in a “builder” account, then a snapshot is created and copied in needed regions. To use this AMI, “user” accounts are listed in the &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sharingamis-explicit.html&quot;&gt;AMI allowed users&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With account EBS encryption enabled, snapshots are now encrypted. The default behavior is to use the account’s default KMS Key. Our first “easy” problem while trying to build new AMI with Packer was the following error message:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Error Copying AMI (ami-xxxxxx) to region (xx-xxx-x): InvalidRequest: Snapshot snap-xxxxxxx is encrypted. Creating an unencrypted copy from an encrypted snapshot is not supported.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To avoid that, we enabled AMI encryption with Packer, but it resulted in another error :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Error modify AMI attributes: InvalidParameter: Snapshots encrypted with the AWS Managed CMK can&apos;t be shared.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As our AMI has to be shared to other accounts, it was impossible to encrypt our AMI with the account default KMS Key. So we created a dedicated KMS Key for Packer encryption.&lt;/p&gt;

&lt;p&gt;And it worked! We had our beautiful encrypted AMI, ready to be used in all our accounts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2022-07-08-encrypt-aws-amis/build_encrypted_amis.png&quot; alt=&quot;How we build our encrypted AMIs&quot; /&gt;&lt;/p&gt;

&lt;center&gt;&lt;ins&gt;How we build our encrypted AMIs&lt;/ins&gt;&lt;/center&gt;

&lt;h2 id=&quot;run-an-encrypted-ami&quot;&gt;Run an encrypted AMI&lt;/h2&gt;

&lt;p&gt;This is where it gets complex.&lt;/p&gt;

&lt;p&gt;When we tried to launch an EC2 instance with our newly encrypted AMI, it failed with this error code :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Client.InternalError: Client error on launch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/troubleshooting-launch.html&quot;&gt;It means that AWS can’t use this AMI because it is encrypted.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First step was to authorize the KMS Key to be used for encryption in user (external) accounts.&lt;/p&gt;

&lt;p&gt;There are two methods to do that, for two different needs.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;policy-method&quot;&gt;Policy method&lt;/h3&gt;

&lt;p&gt;To authorize an external customer managed role (ours), we had to authorize our role in KMS Key dedicated policy to use it, then authorize KMS Key in our role policy to be used. It is some kind of symmetric reference hard to correctly maintain with IaC (Terraform). And we had to do the same for KMS Key replicas in other regions, because they have a dedicated policy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2022-07-08-encrypt-aws-amis/policy_method.png&quot; alt=&quot;Policy method&quot; /&gt;&lt;/p&gt;

&lt;center&gt;&lt;ins&gt;Policy method&lt;/ins&gt;&lt;/center&gt;

&lt;p&gt;One important thing to know here: some KMS Key permissions aren’t available for external account sharing. It means that when we try to add the permission &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kms:*&lt;/code&gt; to our role policy (for debug purposes only, we follow least privileges principles), it failed. You can find which permission is accessible in cross account use and which is not &lt;a href=&quot;https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;grant-method&quot;&gt;Grant method&lt;/h3&gt;

&lt;p&gt;To authorize an AWS managed role, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWSServiceRoleForAutoScaling&lt;/code&gt; (to launch our EC2), we also needed to allow it to use our key. It is impossible to add a new policy on an AWS Managed role. So instead of using a policy method like before, we had to create a grant on that role to use our key. We tried to create that grant from the source account (where the key is created), but it didn’t work. We had to create that grant from the destination account (where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWSServiceRoleForAutoScaling&lt;/code&gt; is), using a role in the destination account that is allowed to create a grant… So we had to allow a role from the destination account to create a grant with Policy method, then use the previous role to allow an AWS Managed Role to use our KMS Key with Grant method. Pretty fun, right?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2022-07-08-encrypt-aws-amis/grant_method.png&quot; alt=&quot;Grant method&quot; /&gt;&lt;/p&gt;

&lt;center&gt;&lt;ins&gt;Grant method&lt;/ins&gt;&lt;/center&gt;

&lt;hr /&gt;

&lt;p&gt;Once all needed roles were allowed, we tried to launch an EC2 with the allowed role attached as an instance role. It failed again, because we needed to also use the AMI KMS Key on root volume of our instance. By default, it was the account KMS Key that was used.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html&quot;&gt;We attached that key on our root volume&lt;/a&gt;, and it worked. We also could launch our EC2 with ASG. It was all good.&lt;/p&gt;

&lt;p&gt;But there was a big security vulnerability: instead of using one KMS key per account to encrypt our EBS volume, we were now using the same KMS key on all our accounts because of our encrypted AMI.&lt;/p&gt;

&lt;h2 id=&quot;kms-key-rotation&quot;&gt;KMS Key rotation&lt;/h2&gt;

&lt;p&gt;A short word about &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#kms-key-rotation&quot;&gt;Key rotation&lt;/a&gt;: it can easily be enabled to automatically rotate key materials each year. All new AMIs will be encrypted with new key material and nothing has to be changed to run encrypted AMIs.
But in case of a manual rotation: if a key is leaked for example, you will need to recreate a new KMS Key, its replicas, and all permissions and grants seen before.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Using privately shared encrypted AMI caused us multiple problems:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;higher complexity to maintain.&lt;/li&gt;
  &lt;li&gt;lower security in cross-account configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Furthermore, we checked all our AMIs to see if they contain sensitive data. It isn’t the case : all sensitive data is uploaded at startup by &lt;a href=&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-launch-template.html&quot;&gt;Launch Template&lt;/a&gt;. We had no interest in continuing to use encrypted AMI, and we would have spared so much time if we had seen that sooner.&lt;/p&gt;

&lt;p&gt;This is why we decided to disable encryption for all new EBS volume on our builder account and stop building encrypted AMI.&lt;/p&gt;

&lt;p&gt;Doing all the previous configuration took us several weeks. We are now more aware that doing security just for the beauty of it can be really counterproductive.&lt;/p&gt;

&lt;p&gt;If your AMIs contain sensitive data, a better way to handle encrypted AMI may be to stop creating privately shared AMIs. Instead, copy and encrypt a private AMI in each of your “user” accounts with a dedicated KMS Key per account. As a result, there will be a larger amount of AMI to handle (one AMI per account per region), KMS Key permissions will still be complex, but security should improved.&lt;/p&gt;

&lt;h4 id=&quot;logo-used-in-thumbnail&quot;&gt;Logo used in thumbnail&lt;/h4&gt;
&lt;h5 id=&quot;death-by-imogen-oh-from-nounprojectcom&quot;&gt;Death by Imogen Oh from NounProject.com&lt;/h5&gt;
&lt;h5 id=&quot;key-by-baboon-designs-from-nounprojectcom&quot;&gt;Key by Baboon designs from NounProject.com&lt;/h5&gt;
&lt;h5 id=&quot;gears-by-aybige-from-nounprojectcom&quot;&gt;Gears by Aybige from NounProject.com&lt;/h5&gt;</content><author><name>Tanguy Falconnet</name></author><category term="cloud" /><category term="aws" /><summary type="html">At Bedrock, we build our own privately shared AMIs (Amazon Machine Images) for different parts of our stack: kubernetes platform, vod platform, etc. We build those AMIs to optimize kernel parameters,to embed some tools, and more. We have been using Packer for a couple of years, and everything has been working just fine.</summary></entry></feed>