<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://tech.bedrockstreaming.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://tech.bedrockstreaming.com/" rel="alternate" type="text/html" /><updated>2023-12-01T18:47:01+00:00</updated><id>https://tech.bedrockstreaming.com/feed.xml</id><title type="html">Bedrock Tech Blog</title><subtitle>Blog technique de Bedrock</subtitle><entry><title type="html">Swift Concurrency in a Nutshell</title><link href="https://tech.bedrockstreaming.com/2023/11/14/swift-concurrency-in-a-nutshell.html" rel="alternate" type="text/html" title="Swift Concurrency in a Nutshell" /><published>2023-11-14T00:00:00+00:00</published><updated>2023-11-14T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2023/11/14/swift-concurrency-in-a-nutshell</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2023/11/14/swift-concurrency-in-a-nutshell.html">&lt;p&gt;As modern apps grow in complexity and features, the need for multitasking to enhance the user experience becomes evident. Whether processing large datasets or querying multiple systems over the network, concurrency is essential.&lt;/p&gt;

&lt;p&gt;This article presents a concise, yet comprehensive overview of Swift’s Concurrency, highlighting its key features and core concepts. Swift’s approach to concurrency provides several benefits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simplified code that’s easier to reason about and maintain&lt;/li&gt;
  &lt;li&gt;A noticeable reduction in bugs and performance issues&lt;/li&gt;
  &lt;li&gt;Ensured app responsiveness&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before delving into Swift’s concurrency paradigms,  let’s familiarize ourselves with foundational terminology.&lt;/p&gt;

&lt;h4 id=&quot;concurrency&quot;&gt;Concurrency&lt;/h4&gt;

&lt;p&gt;Concurrency is about structuring your code so that tasks can be executed independently. It provides mechanisms for synchronization, communication, and coordination between units of work to avoid race conditions and ensure proper execution. However, concurrency doesn’t imply parallel execution; the actual mode of execution is determined separately.&lt;/p&gt;

&lt;p&gt;Designing your code effectively for concurrency makes adding parallelism nearly free.&lt;/p&gt;

&lt;h4 id=&quot;parallelism&quot;&gt;Parallelism&lt;/h4&gt;

&lt;p&gt;Parallelism is the simultaneous execution of tasks across multiple processing units, guaranteeing genuine concurrent progression of operations. It’s a specific form of concurrency where tasks are actually executed at the same time.&lt;/p&gt;

&lt;h4 id=&quot;structured-concurrency&quot;&gt;Structured Concurrency&lt;/h4&gt;

&lt;p&gt;Traditionally, developers had to manually manage &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;threads&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locks&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;callbacks&lt;/code&gt;, leading to code that is difficult to manage and error prone. Even with a lot of discipline, it was really hard to get right as the cognitive load was so high.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Structured concurrency&lt;/strong&gt; is a programming paradigm providing a higher level of abstraction, allowing you to manage concurrency in a structured and organized way. It simplifies the task management and their dependencies, making it easier to write correct and efficient concurrent code.&lt;/p&gt;

&lt;h2 id=&quot;swift-concurrency&quot;&gt;Swift Concurrency&lt;/h2&gt;

&lt;p&gt;One prime objective of Swift is safety, by removing &lt;strong&gt;undefined behaviors&lt;/strong&gt; such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null pointer&lt;/code&gt;, array &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;out-of-bounds&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;integer overflows&lt;/code&gt;. Until recently, multithreading remained a weak spot in Swift’s safety features. Developers had to rely on &lt;a href=&quot;https://developer.apple.com/documentation/DISPATCH&quot;&gt;Grand Central Dispatch&lt;/a&gt;, which wasn’t inherently designed to help with concurrency-related pitfalls like &lt;a href=&quot;https://tclementdev.com/posts/what_went_wrong_with_the_libdispatch.html&quot;&gt;thread explosion&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Swift Concurrency&lt;/strong&gt; fills this gap, enhancing the language’s overall safety by integrating the &lt;strong&gt;Task&lt;/strong&gt; abstraction from Structured Concurrency, the &lt;strong&gt;async/await&lt;/strong&gt; pattern and &lt;strong&gt;Actors&lt;/strong&gt; for data isolation.&lt;/p&gt;

&lt;h3 id=&quot;task&quot;&gt;Task&lt;/h3&gt;

&lt;p&gt;With Swift Concurrency, Tasks become the primary unit of work and offer three core functionalities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Carry scheduling information such as priority&lt;/li&gt;
  &lt;li&gt;Act as handles for task management&lt;/li&gt;
  &lt;li&gt;Hold user-defined and task-local data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These attributes make tasks the cornerstone that guides the execution model in running, prioritizing, and suspending or canceling jobs. &lt;strong&gt;Every asynchronous function operates within a task&lt;/strong&gt;. Tasks also serve as the entry point for synchronous functions to execute asynchronous code.&lt;/p&gt;

&lt;h4 id=&quot;child-tasks&quot;&gt;Child Tasks&lt;/h4&gt;

&lt;p&gt;A child task is a task spawned by another task, known as the parent task. Child tasks inherit some properties from their parent, such as priority levels, but are their own individual units of work that can be scheduled independently. One important characteristic of child tasks is their lifetime is tied to their parent task; if the parent task is cancelled, all its child tasks are also cancelled. This ensures a structured way to manage and reason about concurrent tasks in your code. However, cancellations do not propagate upward, requiring parent tasks to manually check the status of their child tasks.&lt;/p&gt;

&lt;p&gt;Child Tasks are created using &lt;strong&gt;Task Groups&lt;/strong&gt; as we will see later.&lt;/p&gt;

&lt;h3 id=&quot;async--await&quot;&gt;async / await&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; pattern simplifies asynchronous code development, allowing a sequential-like structure, akin to traditional synchronous functions.&lt;/p&gt;

&lt;p&gt;Use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt; keyword to mark functions that perform asynchronous work.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performRemoteOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ResultType&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; keyword indicates potential &lt;strong&gt;suspension points&lt;/strong&gt; in your code, which are necessary for running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt; functions. These markers also offer developers insight into the behavior and control flow of asynchronous operations. At these suspension points, the system can pause the current task to await the completion of an asynchronous operation.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processRemoteData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performRemoteOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// waiting for performRemoteOperation() to complete&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;error-propagation&quot;&gt;Error propagation&lt;/h4&gt;

&lt;p&gt;As you may have noticed in the previous examples, Swift’s concurrency model seamlessly integrates with the language’s native &lt;strong&gt;error-handling mechanism&lt;/strong&gt;. This brings several advantages over the old completion-based concurrency:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Clarity:&lt;/strong&gt; Errors are propagated in a way that is consistent with how they are handled in synchronous Swift code. This means you don’t have to learn a new error-handling paradigm when moving to concurrent code.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Safety:&lt;/strong&gt; Because errors can be propagated and caught, you can handle exceptional conditions gracefully, making your concurrent code more robust.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Maintainability:&lt;/strong&gt; With explicit error types and propagation, debugging and maintaining concurrent code becomes easier. You can clearly understand what types of errors your asynchronous functions can throw and handle them appropriately.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;actors&quot;&gt;Actors&lt;/h3&gt;

&lt;p&gt;Swift’s &lt;strong&gt;Structured Concurrency&lt;/strong&gt; is designed to address data races in concurrency for functions and closures. However, working concurrently usually involve dealing with &lt;strong&gt;shared mutable state&lt;/strong&gt;, requiring tedious manual synchronization.&lt;/p&gt;

&lt;p&gt;To address this, Swift introduces &lt;strong&gt;Actors&lt;/strong&gt;, a new &lt;strong&gt;reference type&lt;/strong&gt; designed to encapsulate states within a specific concurrency domain, ensuring &lt;strong&gt;data isolation&lt;/strong&gt; and &lt;strong&gt;thread-safe&lt;/strong&gt; operations. Actors not only enhances safety and efficiency but also align with Swift’s established patterns and features.&lt;/p&gt;

&lt;p&gt;To create an Actor, just use the keyword &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;actor&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MessageThread&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;playerTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;playerTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;previousMessages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playerTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playerTag&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previousMessages&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Actors are similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt;, the main difference is that they protect their mutable data from data races by implementing &lt;strong&gt;Actor Isolation&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;actor-isolation&quot;&gt;Actor Isolation&lt;/h4&gt;

&lt;p&gt;Actor Isolation enforces that any mutable properties managed by an actor can only be modified using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MessageThread&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MessageThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// error: trying to access another actor mutable property&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playerTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// works fine as read only&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the example above, the compiler complains when trying to modify the mutable property of another actor (cross-actor reference). However, accessing read-only properties poses no issue.&lt;/p&gt;

&lt;p&gt;To address this, you can introduce another function allowing the other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MessageThread&lt;/code&gt; actor to modify its own state.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MessageThread&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MessageThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With these modifications:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;send&lt;/code&gt; function is now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt;, because of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; suspension point required to call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;receive&lt;/code&gt; function in the other actor’s asynchronous context.&lt;/li&gt;
  &lt;li&gt;While the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;receive&lt;/code&gt; function isn’t explicitly marked as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt; (since it doesn’t have suspension points and operates synchronously), actor isolation in Swift ensures functions behave as implicitly &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt; when invoked from outside their own actor’s context.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Actors&lt;/strong&gt; ensure safe execution by maintaining their own dedicated serial &lt;strong&gt;executor&lt;/strong&gt; internally. Messages sent to an actor are termed &lt;strong&gt;partial tasks&lt;/strong&gt;. While processing these tasks, the order of their execution is not strictly guaranteed, as priorities of partial tasks influence the sequence in which they are tackled.&lt;/p&gt;

&lt;p&gt;Lastly, you can do a cross-actor reference on a mutable property with an asynchronous call as long as it’s read only.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMessages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MessageThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// works&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;sendable&quot;&gt;Sendable&lt;/h4&gt;

&lt;p&gt;Finally, to make Actors truly isolated we need to prevent cross-actor references from inadvertently sharing mutable state. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sendable&lt;/code&gt; protocol was introduced to ensure that types shared across actor boundaries don’t introduce data races. This protocol doesn’t provide or dictate specific code behavior, but is leveraged by the compiler to ensure the safety of the concurrent code.&lt;/p&gt;

&lt;p&gt;Here are types that can conform to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sendable&lt;/code&gt; (some implicitely do):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Value types&lt;/li&gt;
  &lt;li&gt;Actors&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;final&lt;/code&gt; classes with immutable and sendable properties (and without superclass).&lt;/li&gt;
  &lt;li&gt;Functions and closures when using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Sendable&lt;/code&gt; attribute.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a detailed explanation, please refer to the official &lt;a href=&quot;https://developer.apple.com/documentation/swift/sendable&quot;&gt;Apple documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;global-actor&quot;&gt;Global Actor&lt;/h4&gt;

&lt;p&gt;Global actors are Actors providing a way to extend actor isolation to &lt;strong&gt;global and static variables&lt;/strong&gt;, safeguarding them from concurrent access issues. Global actor can be referenced from anywhere in the program. A common global actor is the &lt;strong&gt;MainActor&lt;/strong&gt; which allows you to execute your code on the main thread.&lt;/p&gt;

&lt;h2 id=&quot;in-practice&quot;&gt;In Practice&lt;/h2&gt;

&lt;p&gt;Theory covered, let’s dive into practical use-cases.&lt;/p&gt;

&lt;h3 id=&quot;call-async-functions-sequentially&quot;&gt;Call Async Functions Sequentially&lt;/h3&gt;

&lt;p&gt;While calling functions sequentially is straightforward in synchronous code, achieving the same in asynchronous code used to be cumbersome, often leading to the &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md#problem-1-pyramid-of-doom&quot;&gt;Pyramid of doom&lt;/a&gt;. Swift’s concurrency model radically simplifies this by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async/await&lt;/code&gt; paradigm.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UserInfo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchImg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ProfileImage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchAct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UserActivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;saveDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ProfileImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UserActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;backupUserProfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchImg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;act&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchAct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;saveDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; ensures each async function completes before the next starts. This sequential execution offers the readability of synchronous code while retaining the benefits of asynchronicity.&lt;/p&gt;

&lt;h3 id=&quot;call-async-functions-in-parallel&quot;&gt;Call Async Functions in Parallel&lt;/h3&gt;

&lt;p&gt;When async functions are independent, running them in parallel can save time.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async let&lt;/code&gt; allows you to achieve this with minimal code changes. Consider the previous example, modified to execute tasks concurrently:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;backupUserProfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchImg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;act&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchAct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;saveDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Await the results of async let tasks&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async let&lt;/code&gt; spawns child tasks, sets placeholders on the variables, and allows the code to continue running until it needs the results, which are obtained using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; at the end of the function.&lt;/p&gt;

&lt;h3 id=&quot;call-async-functions-from-a-synchronous-function&quot;&gt;Call Async Functions from a Synchronous Function&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; serves as a bridge between synchronous and asynchronous code, enabling you to use async-await without requiring the entire function chain to be asynchronous.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onSavePressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;backupUserProfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error backing up profile: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localizedDescription&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;An alternative is &lt;a href=&quot;https://developer.apple.com/documentation/swift/task/detached(priority:operation:)-8a4p6&quot;&gt;Task.detached&lt;/a&gt;. This creates a new top-level task and decouples it from its originating context, allowing it to operate on a different Actor and with a different priority. A typical scenario involves initiating a task from the main thread to execute it on a different thread.&lt;/p&gt;

&lt;h4 id=&quot;terminology-unstructured-concurrency&quot;&gt;Terminology: Unstructured Concurrency&lt;/h4&gt;

&lt;p&gt;Creating a standalone &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; is known as an &lt;strong&gt;Unstructured Task&lt;/strong&gt;, as it lacks both a parent task and child tasks.&lt;/p&gt;

&lt;p&gt;Unstructured Tasks are useful for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Calling a task from a non-async context&lt;/li&gt;
  &lt;li&gt;Tasks that must persist beyond a specific scope&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: Swift’s use of the terms &lt;strong&gt;Structured&lt;/strong&gt; and &lt;strong&gt;Unstructured Concurrency&lt;/strong&gt; relates only to the hierarchy of Tasks and should not be confused with the broader concept of &lt;a href=&quot;#structured-concurrency&quot;&gt;Structured Concurrency&lt;/a&gt; described in the introduction.&lt;/p&gt;

&lt;p&gt;Quoting the &lt;a href=&quot;https://docs.swift.org/swift-book/documentation/the-swift-programming-language/concurrency/#Tasks-and-Task-Groups&quot;&gt;swift documentation&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Structured concurrency&lt;/strong&gt;: Tasks arranged in a hierarchy. Each task in a task group has the same parent task, and each task can have child tasks. Although you take on some of the responsibility for correctness, the explicit parent-child relationships between tasks let Swift handle some behaviors like propagating cancellation for you, and lets Swift detect some errors at compile time.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Unstructured concurrency&lt;/strong&gt;: Unlike tasks that are part of a task group, an &lt;em&gt;unstructured task&lt;/em&gt; doesn’t have a parent task. You have complete flexibility to manage unstructured tasks in whatever way your program needs, but you’re also completely responsible for their correctness.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;parallel-processing-with-task-groups&quot;&gt;Parallel Processing with Task Groups&lt;/h3&gt;

&lt;p&gt;While &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async let&lt;/code&gt; may suffice for handling a limited number of tasks, Task Groups are recommended when a structured approach to parallelism is desired. Here’s an example that employs Task Groups along with an accumulator to safely process an array of data in parallel.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;processedData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withTaskGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;returning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taskGroup&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 	
    &lt;span class=&quot;c1&quot;&gt;// Create a new Task within the Task Group for each item   &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;taskGroup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Create a new Task within the Task Group&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;allData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Asynchronously collect the task results as they complete&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taskGroup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;allData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allData&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code initializes a Task Group and spawns a child task for each item with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.background&lt;/code&gt; priority. Then an &lt;a href=&quot;https://developer.apple.com/documentation/swift/asyncsequence&quot;&gt;AsyncSequence&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for await&lt;/code&gt; loop asynchronously collects and stores the task results in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allData&lt;/code&gt; accumulator as they complete.&lt;/p&gt;

&lt;h4 id=&quot;cooperative-cancellation&quot;&gt;Cooperative Cancellation&lt;/h4&gt;

&lt;p&gt;To enable cancellation within Task Groups, tasks must be built for &lt;strong&gt;Cooperative Cancellation&lt;/strong&gt;, which means the task periodically checks whether it should terminate early. Two methods can be used to check if a task has been cancelled:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try Task.checkCancellation()&lt;/code&gt; throws an error if the current Task is cancelled..&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if Task.isCancelled { break }&lt;/code&gt; returns true if the Task is cancelled. Note that this approach might produce partial outputs, which should be documented.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;taskGroup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isCancelled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Return empty or default Data&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;reference-and-cancel-a-task&quot;&gt;Reference and Cancel a Task&lt;/h3&gt;

&lt;p&gt;Until now, we’ve only used tasks for running isolated asynchronous operations. However, there are scenarios where maintaining a task reference for potential cancellation is beneficial, as shown in the following static sales dashboard example.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SalesDataViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;processingTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Never&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewWillAppear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewWillAppear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processingTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;processingTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rawData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchSales&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
              	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;chartData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showChartData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chartData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;handleError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;processingTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidDisappear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidDisappear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;processingTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;processingTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesDataViewController&lt;/code&gt; class, we create and keep a reference to a new Task for fetching and processing sales data. If the user exits the view before the task completes, the task is canceled, preventing task accumulation during repeated view transitions.&lt;/p&gt;

&lt;h3 id=&quot;convert-completion-based-api-to-async-functions-with-continuation&quot;&gt;Convert completion based API to async functions with Continuation&lt;/h3&gt;

&lt;p&gt;Sometimes you encounter legacy APIs not designed to work with Swift’s Concurrency model, often the case with Objective-C-based APIs. Swift offers a solution via &lt;a href=&quot;https://developer.apple.com/documentation/swift/checkedcontinuation&quot;&gt;Continuation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Continuation wraps old-style block-based code and adapts it for use in an async function. This enables you to return values or throw errors within that function. Here’s how to apply this with HealthKit as an example:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HealthKit&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getWorkouts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HKWorkout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withCheckedThrowingContinuation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continuation&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HKSampleQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;sampleType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HKObjectType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;workoutType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;predicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HKObjectQueryNoLimit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;sortDescriptors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;continuation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;throwing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HealthError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HKWorkout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;continuation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;throwing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HealthError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrongType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;continuation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;returning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;HKHealthStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Always ensure to resume a Continuation &lt;strong&gt;exactly once&lt;/strong&gt;; failing to do so can lead to indefinite suspension of the task, resulting in a &lt;strong&gt;memory leak&lt;/strong&gt;, as per Apple’s guidelines. Resuming multiple times is considered &lt;strong&gt;undefined behavior&lt;/strong&gt; and should be avoided.&lt;/p&gt;

&lt;h3 id=&quot;executing-async-code-on-main-thread-with-mainactor&quot;&gt;Executing Async Code on Main Thread with MainActor&lt;/h3&gt;

&lt;p&gt;You can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MainActor&lt;/code&gt; to execute code on the main thread via three ways:&lt;/p&gt;

&lt;h4 id=&quot;annotate-your-code-with-mainactor&quot;&gt;Annotate your code with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@MainActor&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Apply the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@MainActor&lt;/code&gt; attribute to properties, functions and classes.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@MainActor&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Update occurs on the main thread&lt;/span&gt;
  
    &lt;span class=&quot;kd&quot;&gt;@MainActor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateUI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// this is now called on the main thread&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// class properties and functions are now run on the MainActor&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@MainActor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;
  
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateUI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;use-mainactor-in-task-closures&quot;&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@MainActor&lt;/code&gt; in Task closures&lt;/h4&gt;

&lt;p&gt;Incorporate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@MainActor&lt;/code&gt; within a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; to switch its execution context to the main thread.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@MainActor&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;// Code runs on the main thread&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;use-mainactorrun&quot;&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MainActor.run&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MainActor.run&lt;/code&gt; within any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; or asynchronous function to force main-thread execution.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchAndProcessData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MainActor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Executed on main thread&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateUI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;tips-and-pitfalls&quot;&gt;Tips and pitfalls&lt;/h2&gt;

&lt;h3 id=&quot;task-cheat-sheet&quot;&gt;Task Cheat sheet&lt;/h3&gt;

&lt;p&gt;For quick reference, here’s a table taken from &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2021/10134/&quot;&gt;Explore structured concurrency in Swift&lt;/a&gt; WWDC session.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Launched by&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Launchable from&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Lifetime&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Cancellation&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Inherits from origin&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;async-let tasks&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async let x&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;async functions&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;scoped to statement&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;automatic&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;priority, task-local values&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Group tasks&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;group.async&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;withTaskGroup&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;scoped to task group&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;automatic&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;priority, task-local values&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Unstructured tasks&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;anywhere&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;unscoped&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;priority, task-local values, actor&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Detached tasks&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task.detached&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;anywhere&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;unscoped&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;nothing&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;async-protocol-conformance&quot;&gt;Async Protocol Conformance&lt;/h3&gt;

&lt;p&gt;When defining a protocol with async functions, you can &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md#protocol-conformance&quot;&gt;conform to the protocol&lt;/a&gt; by implementing a synchronous function too.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TypeA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TypeB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// also valid&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;reentrancy&quot;&gt;Reentrancy&lt;/h3&gt;

&lt;p&gt;In Swift concurrency, &lt;a href=&quot;https://en.wikipedia.org/wiki/Reentrancy_(computing)&quot;&gt;Reentrancy&lt;/a&gt; refers to the situation where a suspended block of code resumes execution at a later time. Upon resumption, the mutable state of your code is not guaranteed to remain the same as it was before suspension, posing potential risks of unintended side effects.&lt;/p&gt;

&lt;h4 id=&quot;task-suspension-and-unowned-references&quot;&gt;Task Suspension and Unowned References&lt;/h4&gt;

&lt;p&gt;In Swift’s concurrency model, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; strongly retains any reference to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt;, potentially extending the object’s lifecycle unexpectedly, especially if tasks remain active after their parent objects have been deallocated. To mitigate this, developers often employ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;weak self&lt;/code&gt;. However, introducing a suspension point using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; within a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; can reintroduce issues associated with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unowned&lt;/code&gt; references.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unowned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dataStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DataStorage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;refreshData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// temporarily retains self&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadDataFromDisk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataStorage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newData&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Safe&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, the code behaves as expected because it executes atomically. If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt; is available, it is temporarily retained, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newData&lt;/code&gt; is updated synchronously.&lt;/p&gt;

&lt;p&gt;However, introducing a suspension point can lead to issues similar to those encountered when neglecting to check for a weak &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unowned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dataStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DataStorage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;refreshData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// temporarily retains self&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;downloadData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// suspension point&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataStorage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newData&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// random crash&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, if the task suspends during the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt;, nothing prevents &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dataStorage&lt;/code&gt;’s owner from being deallocated. When the task resumes, attempting to access the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unowned&lt;/code&gt; property can result in a fatal error since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dataStorage&lt;/code&gt; is no longer in memory.&lt;/p&gt;

&lt;h4 id=&quot;actor-reentrancy&quot;&gt;Actor Reentrancy&lt;/h4&gt;

&lt;p&gt;Actor Reentrancy is a complex behavior that occurs when an actor method makes an asynchronous call, and while waiting for that call to complete, the actor processes other tasks. This can lead to unexpected states within the actor due to interleaved execution of its methods.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doLongProcessing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// suspension point&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Unpredictable output (1?)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process()&lt;/code&gt; is awaiting the completion of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doLongProcessing()&lt;/code&gt;, there’s an opportunity for another task to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;increment()&lt;/code&gt;. This undermines the expectation that an actor’s state remains consistent within a given method. So, the second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print(value)&lt;/code&gt; may output an unpredictable result, illustrating the challenge of managing mutable state in an actor with reentrant behavior.&lt;/p&gt;

&lt;h3 id=&quot;unintentional-task-inheritance&quot;&gt;Unintentional Task Inheritance&lt;/h3&gt;

&lt;p&gt;In Swift’s concurrency model, child tasks inherit the properties of their parent tasks by default, including priority levels and task-local values. Lack of awareness about this behavior can lead to unexpected outcomes, particularly when generating Tasks through SwiftUI modifiers, as demonstrated below.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Inherits properties (e.g., priority, executor) from the parent Task&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// The long job will execute on the main thread&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;longJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;detached&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userInitiated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Unstructured Task: Does not inherit any properties from parent Task&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// The long job will execute outside the main thread&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;longJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As we have seen, Swift Concurrency is a huge step forward in terms of safety and code maintainability. I hope you enjoyed reading this article and learned a few tricks. Dive in, experiment, and harness the power of Swift concurrency. Happy coding!&lt;/p&gt;

&lt;h2 id=&quot;further-reading--references&quot;&gt;Further Reading &amp;amp; References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://swiftrocks.com/how-async-await-works-internally-in-swift&quot;&gt;How async/await works internally in Swift&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/HqjqwW12wpw?si=zTonWzxAatpTYfKr&quot;&gt;The Bleeding Edge of Swift Concurrency&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md&quot;&gt;Structured concurrency&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md&quot;&gt;Async/await&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/main/proposals/0317-async-let.md&quot;&gt;Async let&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/main/proposals/0306-actors.md&quot;&gt;Actors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/main/proposals/0316-global-actors.md&quot;&gt;Global Actors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/oV9rvDllKEg?si=kwXQULVlNNT3K6LS&quot;&gt;Concurrency is not Parallelism&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Damien Petrilli</name></author><category term="swift" /><category term="apple" /><category term="xcode" /><summary type="html">As modern apps grow in complexity and features, the need for multitasking to enhance the user experience becomes evident. Whether processing large datasets or querying multiple systems over the network, concurrency is essential.</summary></entry><entry><title type="html">Bedrock au Forum PHP 2023</title><link href="https://tech.bedrockstreaming.com/2023/10/20/forum-php-afup-2023.html" rel="alternate" type="text/html" title="Bedrock au Forum PHP 2023" /><published>2023-10-20T00:00:00+00:00</published><updated>2023-10-20T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2023/10/20/forum-php-afup-2023</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2023/10/20/forum-php-afup-2023.html">&lt;p&gt;Cette année encore, Bedrock était présent au Forum PHP pour cette édition 2023.&lt;/p&gt;

&lt;p&gt;Nous étions sept au total : trois organisateurs, trois visiteurs et une conférencière, Pauline Rambaud.&lt;/p&gt;

&lt;h2 id=&quot;les-conférences-que-lon-retient&quot;&gt;Les conférences que l’on retient&lt;/h2&gt;

&lt;h3 id=&quot;why-is-php-still-awesome-in-2023-&quot;&gt;Why is PHP still awesome in 2023 ?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conférence présentée par &lt;a href=&quot;https://twitter.com/fkarlitschek&quot;&gt;Frank Karlitschek&lt;/a&gt;, co-fondateur de &lt;a href=&quot;https://nextcloud.com&quot;&gt;NextCloud&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;La conférence s’est divisée en deux parties que l’on pourrait résumer de la
manière suivante :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Une présentation assez détaillée de ce qu’est &lt;em&gt;NextCloud&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Pourquoi le choix de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PHP&lt;/code&gt;🐘 pour &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NextCloud&lt;/code&gt; ?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;nextcloud&quot;&gt;NextCloud&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NextCloud&lt;/code&gt; est un outil comparable à &lt;em&gt;Google Workspace&lt;/em&gt;, car il permet la gestion
de fichiers partagés, de documents de type Office, et propose aussi des outils
de conversations textuelles et d’appels vidéos.&lt;/p&gt;

&lt;p&gt;Il existe en version desktop bien sûr, mais aussi en version mobile.
On peut noter qu’il est utilisé par le &lt;em&gt;Gouvernement Français&lt;/em&gt;, ou encore
&lt;em&gt;l’Union Européenne&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;En somme, il constitue aujourd’hui une alternative crédible à ses concurrents
Américains ou Chinois.&lt;/p&gt;

&lt;p&gt;Une de ses différences majeure toutefois est qu’il est &lt;em&gt;open-source&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&quot;pourquoi-choisir-php-pour-nextcloud-&quot;&gt;Pourquoi choisir PHP pour NextCloud ?&lt;/h4&gt;

&lt;p&gt;Les raisons que Frank nous donne sont les suivantes :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PHP&lt;/code&gt;🐘 est facile à déployer&lt;/li&gt;
  &lt;li&gt;Il est indépendant (il n’appartient pas à Google)&lt;/li&gt;
  &lt;li&gt;Son isolation des process garantie une bonne scalabilité&lt;/li&gt;
  &lt;li&gt;Il propose une bonne courbe d’apprentissage&lt;/li&gt;
  &lt;li&gt;Il évolue depuis longtemps et est donc robuste&lt;/li&gt;
  &lt;li&gt;Il a derrière lui une grosse communauté de développeur&lt;/li&gt;
  &lt;li&gt;Un important écosystème d’intégration et de frameworks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il évoque toutefois quelques limites qui subsistent à son sens :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;il reste (de moins en moins) facile d’écrire du code non sécurisé, malgré
le système de typehinting ou les enums&lt;/li&gt;
  &lt;li&gt;il reste des incohérences, par exemple dans les &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array functions&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;il reste très limité dans la programmation fonctionnelle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Toutefois, Franck conclura sur le fait que sans &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PHP&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NextCloud&lt;/code&gt; n’aurait
jamais été possible.&lt;/p&gt;

&lt;h3 id=&quot;augmentez-votre-couverture--supprimez-des-tests&quot;&gt;Augmentez votre couverture : supprimez des tests&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/forumphp2023/augmentez-votre-couverture.jpeg&quot; alt=&quot;Baptiste Langlade&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conférence présentée par &lt;a href=&quot;https://twitter.com/Baptouuuu&quot;&gt;Baptiste Langlade&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Avez-vous déjà été confronté à la problématique de l’augmentation exponentielle
du nombre de tests de votre projet, et par conséquent, de l’augmentation du temps
d’exécution de vos tests ?&lt;/p&gt;

&lt;p&gt;Ce fut le cas de Baptiste dans l’Application de gestion de Documents à laquelle
il a participé.&lt;/p&gt;

&lt;h4 id=&quot;vive-le-hasard&quot;&gt;Vive le hasard&lt;/h4&gt;

&lt;p&gt;Sa réponse à ce problème fut la suivante : &lt;em&gt;jouer des tests au hasard&lt;/em&gt;, autrement
dit faire du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Property Based Testing&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;L’idée est de générer aléatoirement des données pour couvrir le plus de cas
possible.&lt;/p&gt;

&lt;p&gt;Ensuite, on écrit un test si un bug survient.&lt;/p&gt;

&lt;p&gt;Cette approche se base sur la fameuse loi de Murphy qui veut que lorsqu’un problème
doit survenir, il arrive toujours trop tôt.&lt;/p&gt;

&lt;p&gt;On mise donc sur l’aléatoire pour faire remonter les bugs plus rapidement.
Ainsi, on détermine que pour tout ensemble de donnée X, l’ensemble des tests
doit être vrai.&lt;/p&gt;

&lt;h4 id=&quot;blackbox&quot;&gt;Blackbox&lt;/h4&gt;

&lt;p&gt;De cette approche est née &lt;a href=&quot;https://github.com/Innmind/BlackBox&quot;&gt;Blackbox&lt;/a&gt;, une
librairie compatible &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PHPUnit&lt;/code&gt; permettant de faciliter et d’automatiser la mise
en place de tests basée sur le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Property Based Testing&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Elle permet notamment de faire en sorte que les jeux de données que l’on va
insérer en input peuvent être vraiment divers et variés, et provoquer des
cas critiques non répertoriés.&lt;/p&gt;

&lt;p&gt;Résultat : plus on joue les tests, plus notre confiance grandit dans l’application.&lt;/p&gt;

&lt;h3 id=&quot;comment-contribuer-à-php-en-2023--georges-banyard&quot;&gt;Comment contribuer à PHP en 2023 ? Georges Banyard&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/forumphp2023/contribuer-a-php-en-2023.jpeg&quot; alt=&quot;Georges Banyard&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conférence présentée par &lt;a href=&quot;https://twitter.com/Girgias&quot;&gt;Georges Banyard&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tout d’abord Georges Banyard a introduit la notion de compilation minimale de PHP en C, pour cela il a utilisé son blog
et nous a présenté les choses importantes à connaitre.&lt;/p&gt;

&lt;p&gt;Puis, il a fait la présentation du code source de PHP et du moteur de recherche qu’il utilise.&lt;/p&gt;

&lt;p&gt;Ensuite, il a commencé à nous montrer quelques ressources auxquelles se réferer si nous désirons contribuer à PHP.&lt;/p&gt;

&lt;p&gt;Rappelons que PHP est un langage de programmation open-source et que toute personne désireuse de l’améliorer peut
proposer une implémentation.&lt;/p&gt;

&lt;p&gt;Les ressources que nous pourrions utiliser si notre souhait était de créer une nouvelle fonction dans PHP seraient :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;des articles sur Zend (https://www.zend.com/resources/writing-php-extensions)&lt;/li&gt;
  &lt;li&gt;le PHP internal books (https://www.phpinternalsbook.com/)&lt;/li&gt;
  &lt;li&gt;ou bien encore la “Room 11” sur Stackoverflow où se retrouve de nombreux contributeurs PHP.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Georges Banyard est ensuite passé à la pratique et a codé en direct une nouvelle fonction de tri dans un
tableau &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array_search&lt;/code&gt;. Le but de cette conférence était de démystifier la contribution à PHP et de montrer aux gens que
finalement ce n’est pas si compliqué, il suffit de plonger dedans !&lt;/p&gt;

&lt;h3 id=&quot;utilisez-la-bibliothèque-standard-php-spl-au-quotidien&quot;&gt;Utilisez la bibliothèque standard PHP (SPL) au quotidien&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/forumphp2023/bibliotheque-standard-psl.jpeg&quot; alt=&quot;Florian Merle&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conférence présentée par &lt;a href=&quot;https://twitter.com/florianm__&quot;&gt;Florian Merle&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;La bibliothèque &lt;a href=&quot;https://www.php.net/manual/fr/book.spl.php&quot;&gt;SPL&lt;/a&gt; ça vous dit quelque
chose ? En réalité, vous l’utilisez déjà au quotidien à travers les &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exceptions&lt;/code&gt;
ou bien la fonction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spl_autoload_register&lt;/code&gt; par exemple, mais Florian est venu
nous parler de certains aspects moins connus et pourtant très utiles.&lt;/p&gt;

&lt;h4 id=&quot;les-structures-de-données&quot;&gt;Les structures de données&lt;/h4&gt;

&lt;p&gt;La plus évidente et la plus connue, qui a sans doute contribué à la facilité
d’accès de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PHP&lt;/code&gt;🐘 est bien évidemment l’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array&lt;/code&gt;. Mais si son avantage majeur
est le fait qu’il soit multi-usage, il se révèle en réalité assez peu optimisé
pour les gros volumes de données.&lt;/p&gt;

&lt;p&gt;D’autres structures telles que les listes doublements chaînées
(&lt;a href=&quot;https://www.php.net/manual/fr/class.spldoublylinkedlist.php&quot;&gt;SplDoublyLinkedList&lt;/a&gt;),
ou les &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Heaps&lt;/code&gt; (&lt;a href=&quot;https://www.php.net/manual/fr/class.splheap.php&quot;&gt;SplHeap&lt;/a&gt;,
&lt;a href=&quot;https://www.php.net/manual/fr/class.splpriorityqueue.php&quot;&gt;SplPriorityQueue&lt;/a&gt; ont
été abordées, mais on constate rapidement qu’elles présentent l’inconvénient majeur
d’avoir de mauvaises performances par rapport à &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array&lt;/code&gt; et des nommages de méthode
peu intuitif.&lt;/p&gt;

&lt;h4 id=&quot;php-ds&quot;&gt;PHP DS&lt;/h4&gt;

&lt;p&gt;Une alternative intéressante est &lt;a href=&quot;https://www.php.net/manual/fr/book.ds.php&quot;&gt;DS&lt;/a&gt;,
qui ne présente pas de problème de gestion de priorité et de meilleures performances.&lt;/p&gt;

&lt;p&gt;Florian nous a présenté notamment &lt;a href=&quot;https://www.php.net/manual/en/class.ds-priorityqueue.php&quot;&gt;DS\PriorityQueue&lt;/a&gt;
et &lt;a href=&quot;https://www.php.net/manual/en/class.ds-vector&quot;&gt;DS\Vector&lt;/a&gt;, qui constitue une
alternative intéressante à &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;les-iterators&quot;&gt;Les iterators&lt;/h4&gt;

&lt;p&gt;Enfin, nous avons vu les iterators de la SPl avec :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/fr/class.iteratoraggregate&quot;&gt;IteratorAggregate&lt;/a&gt;
qui permet d’appliquer un traitement éventuel sur le tableau&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/fr/class.appenditerator&quot;&gt;AppendIterator&lt;/a&gt;
qui permet d’insérer d’autres itérateurs&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/fr/class.iteratoriterator.php&quot;&gt;IteratorIterator&lt;/a&gt;
qui renvoie un autre Iterator&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/fr/class.infiniteiterator.php&quot;&gt;InfiniteIterator&lt;/a&gt;
qui permet de boucler à l’infini (pensez à la fonction lecture en boucle de votre player audio)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/fr/class.callbackfilteriterator.php&quot;&gt;CallbackFilterIterator&lt;/a&gt;
qui permet de filtrer les données à l’aide d’une callback.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;apprendre-à-apprendre--petit-dev-deviendra-grand---aline-leroy&quot;&gt;Apprendre à apprendre : petit dev deviendra grand - Aline Leroy&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conférence présentée par Aline Leroy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Aline Leroy nous parle ici de sa reconversion, et des différentes expériences qu’elle a vécues au cours de son
apprentissage du code. Elle nous donne plein d’astuces et de clés pour améliorer notre façon d’apprendre et de
travailler notre plasticité cérébrale. Tout d’abord, il faut gérer son temps, alterner concentration et dispersion, et
comprendre qu’apprendre c’est créer des liens et des images mentales.&lt;/p&gt;

&lt;p&gt;Aline Leroy nous conseille de commencer par faire une introspection afin de déterminer quels sont nos points forts et
faibles, quels sont nos objectifs et puis pour comprendre son propre fonctionnement. Ensuite, il faut faire preuve de
curiosité et ne pas se limiter à un domaine (pensez création de lien, plus le champ est grand, plus vous allez faire
des connexions). Nous pourrons aussi choisir de travailler par découpage, une partie des choses à apprendre, nous allons
devoir travailler notre mémoire. Il est aussi important que l’apprentissage soit une démarche active, prise de notes,
recherche, ne pas catégoriser et surtout, c’est un processus qui demande de la régularité.&lt;/p&gt;

&lt;p&gt;Elle insiste sur l’aspect bien-être qui est très important pour apprendre, se mettre au calme, couper ses notifications
et puis on prend des pauses, car c’est là que tout le travail de liaison neuronale se fait. Une pause sportive et encore
plus recommandée, bien sûr ces temps de dispersion doivent être sur un temps maitrisé.&lt;/p&gt;

&lt;h3 id=&quot;you-build-it-you-run-it-lobservabilité-pour-les-devs&quot;&gt;You Build It, You Run It, l’observabilité pour les devs&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/forumphp2023/you-build-it-you-run-it.jpeg&quot; alt=&quot;Smaine Milianni&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conférence présentée par &lt;a href=&quot;https://twitter.com/SmaineDev&quot;&gt;Smaine Milianni&lt;/a&gt;, développeur chez Yousign&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;L’observabilité est quelque chose de très important chez Bedrock, c’est pourquoi cette conférence était très
intéressante.&lt;/p&gt;

&lt;p&gt;Smaine a découpé sa conférence en posant trois questions : pourquoi, comment et qui ?&lt;/p&gt;

&lt;h4 id=&quot;pourquoi-faire-de-lobservabilité-&quot;&gt;Pourquoi faire de l’observabilité ?&lt;/h4&gt;

&lt;p&gt;Une application va forcément planter à un moment, nous dit Smaine pour répondre à sa première question.&lt;/p&gt;

&lt;p&gt;L’observabilité permet non seulement de diminuer les risques que cela arrive, mais aussi d’anticiper les problèmes en
amont.&lt;/p&gt;

&lt;p&gt;Au-delà des plantages, l’observabilité ouvre la porte à d’autres formes d’analyses :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;détecter les problèmes/changements de performance&lt;/li&gt;
  &lt;li&gt;capter les comportements inhabituels&lt;/li&gt;
  &lt;li&gt;ou simplement s’assurer qu’un système fonctionne correctement&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;comment-fait-on-&quot;&gt;Comment fait-on ?&lt;/h4&gt;

&lt;p&gt;Habituellement, l’observabilité s’appuie sur trois piliers : les logs, les métriques et les traces, auxquels Smaine
ajoute un quatrième : les alertes.&lt;/p&gt;

&lt;p&gt;Pour résumer ces différents piliers :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;les logs doivent être lus, et donc être disponibles dans un outil dédié&lt;/li&gt;
  &lt;li&gt;les métriques permettent d’observer l’état de santé d’une application
    &lt;ul&gt;
      &lt;li&gt;elles peuvent être techniques (CPU, temps de réponse d’une URL, etc)&lt;/li&gt;
      &lt;li&gt;ou métier (nombre de ventes par jour, nombre d’inscriptions, etc)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;les traces permettent de suivre le comportement d’une application
    &lt;ul&gt;
      &lt;li&gt;par exemple pour une requête HTTP, on aurait le temps passé dans chaque couche technique (base de données, un
controller PHP, lecture de cache, etc)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Et enfin, les alertes
    &lt;ul&gt;
      &lt;li&gt;elles ne doivent être envoyées qu’en cas de problème (pour éviter de lasser les lecteurs)&lt;/li&gt;
      &lt;li&gt;elles peuvent se baser sur les métriques (même métier)&lt;/li&gt;
      &lt;li&gt;elles peuvent être liées aux logs et aux traces pour aider à les comprendre&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Smaine nous a également rapidement parlé des post mortems, qui sont essentiels après un incident pour apprendre des
erreurs et ne pas les reproduire.&lt;/p&gt;

&lt;h4 id=&quot;qui-est-responsable-de-la-mise-en-place-&quot;&gt;Qui est responsable de la mise en place ?&lt;/h4&gt;

&lt;p&gt;L’entreprise de Smaine, Yousign, a une organisation sous forme de squads.
Un squad est composé de plusieurs métiers : dev, devops, PO, designer, chef de projet, etc.&lt;/p&gt;

&lt;p&gt;Ils sont alors responsables à la fois de leur périmètre, mais aussi de son observabilité. En gardant cette
responsabilité au sein d’un squad, les équipes sont plus attentives et réactives en cas d’incident.&lt;/p&gt;

&lt;h3 id=&quot;les-femmes-et-le-numérique&quot;&gt;Les femmes et le numérique&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/forumphp2023/les-femmes-et-le-numerique.jpeg&quot; alt=&quot;Isabelle Collet&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conférence présentée par &lt;a href=&quot;https://twitter.com/colletisabelle4&quot;&gt;Isabelle Collet&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Isabelle Collet est ancienne développeuse et sociologue épanouie comme elle le dit elle-même. Ce qui lui donne matière à
nous expliquer beaucoup de choses sur “le choix des femmes de ne pas venir dans la tech”. Et bien, oui, pourquoi
sont-elles réticentes ?&lt;/p&gt;

&lt;p&gt;Tout d’abord, Isabelle Collet nous parle de pays qui sont des contre-exemples, comme en Malaisie où les femmes sont la
majorité des postes informatiques et de développement, elles sont aussi responsables d’Université. Globalement, dans
certains pays d’Asie, les femmes sont fortement représentées dans le secteur tertiaire, et pourquoi ?
Car ces métiers sont considérés comme des “métiers de femmes”, non salissant, pas physique et surtout possibilité de
télétravail ce qui leur permet de s’occuper de leur famille.&lt;/p&gt;

&lt;p&gt;Puis grâce à un petit retour dans le passé, nous découvrons que les femmes au départ étaient très présentes dans
l’informatique et plus précisément dans le développement. Les hommes étaient chargés de la conception des ordinateurs,
ce qui était bien vu dans la société, mais la programmation était un poste considéré comme inférieur. Ce qui va changer
cela est l’apparition du micro-ordinateur qui va inverser la tendance et les hommes vont devenir plus nombreux à coder
et les femmes vont progressivement “disparaître” du paysage informatique.&lt;/p&gt;

&lt;p&gt;Pour remédier à cela, Isabelle Collet nous présente deux initiatives universitaires où pour rééquilibrer le taux
hommes/femmes des quotas ont été imposés pendant une dizaine d’années. Aujourd’hui l’équilibre de candidats se fait
naturellement.&lt;/p&gt;

&lt;p&gt;En conclusion, les choses évoluent si on veut bien les faire évoluer. Il faut continuer les efforts d’inclusion et la
lutte pour que les femmes soient plus nombreuses dans la tech.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Cette année, la fresque LEGO a célébré la diversité des membres de l’AFUP et bien sûr le PHP.&lt;/p&gt;

&lt;p&gt;Ce forum fût l’occasion d’échanger avec de nombreuses personnes, de découvrir des sujets aussi bien techniques que
sociétaux. On ne peut que féliciter les conférencier·e·s et les bénévoles pour un Forum PHP encore très réussi !&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/forumphp2023/fresque-lego-communautaire.jpeg&quot; alt=&quot;La fresque LEGO communautaire&quot; /&gt;&lt;/p&gt;</content><author><name>Backend teams</name></author><category term="afup" /><category term="php" /><category term="forumphp" /><category term="conference" /><summary type="html">Cette année encore, Bedrock était présent au Forum PHP pour cette édition 2023.</summary></entry><entry><title type="html">Json au service des devs #LFT 29/09/23</title><link href="https://tech.bedrockstreaming.com/json-au-service-des-devs" rel="alternate" type="text/html" title="Json au service des devs #LFT 29/09/23" /><published>2023-09-29T00:00:00+00:00</published><updated>2023-09-29T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/json-au-service-des-devs</id><content type="html" xml:base="https://tech.bedrockstreaming.com/json-au-service-des-devs">&lt;blockquote&gt;
  &lt;p&gt;Éditer un CV, imprimer des fiches de recette, écrire une lettre de motivation, rédiger un rapport … Tant de choses fastidieuses à écrire et chiantes à mettre en page (surtout quand on ne sait pas utiliser Word). C’est pourquoi j’ai développé un outil pour m’aider à faire tout ça en utilisant uniquement du JSON !&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Par &lt;strong&gt;Julie Nginn&lt;/strong&gt;&lt;/p&gt;</content><author><name>Julie Nginn</name></author><category term="lft" /><category term="tech" /><summary type="html">Éditer un CV, imprimer des fiches de recette, écrire une lettre de motivation, rédiger un rapport … Tant de choses fastidieuses à écrire et chiantes à mettre en page (surtout quand on ne sait pas utiliser Word). C’est pourquoi j’ai développé un outil pour m’aider à faire tout ça en utilisant uniquement du JSON !</summary></entry><entry><title type="html">La traversée du Finnmarksvidda: carnet de bord d’une aventure glaciale #LFT 29/09/23</title><link href="https://tech.bedrockstreaming.com/la-traversee-du-finnmarksvidda-carnet-de-bord-d-une-aventure-glaciale" rel="alternate" type="text/html" title="La traversée du Finnmarksvidda: carnet de bord d’une aventure glaciale #LFT 29/09/23" /><published>2023-09-29T00:00:00+00:00</published><updated>2023-09-29T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/la-traversee-du-finnmarksvidda-carnet-de-bord-d-une-aventure-glaciale</id><content type="html" xml:base="https://tech.bedrockstreaming.com/la-traversee-du-finnmarksvidda-carnet-de-bord-d-une-aventure-glaciale">&lt;blockquote&gt;
  &lt;p&gt;Carnet de voyage de ma traversée en solitaire du plateau du Finnmarksvidda, en Norvège, entre Alta et Karasjok, en mars 2023.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Par &lt;strong&gt;Sylvain Guyon&lt;/strong&gt;&lt;/p&gt;</content><author><name>Sylvain Guyon</name></author><category term="lft" /><category term="tech" /><summary type="html">Carnet de voyage de ma traversée en solitaire du plateau du Finnmarksvidda, en Norvège, entre Alta et Karasjok, en mars 2023.</summary></entry><entry><title type="html">Le Don du Sang (et +) #LFT 29/09/23</title><link href="https://tech.bedrockstreaming.com/le-don-du-sang" rel="alternate" type="text/html" title="Le Don du Sang (et +) #LFT 29/09/23" /><published>2023-09-29T00:00:00+00:00</published><updated>2023-09-29T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/le-don-du-sang</id><content type="html" xml:base="https://tech.bedrockstreaming.com/le-don-du-sang">&lt;blockquote&gt;
  &lt;p&gt;Donner son sang, c’est unanimement considéré comme une bonne action&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mais pourquoi en fait ? Ça vient d’où ? Ça sert à quoi ? C’est dangereux ?? 
Et concrètement, ça se passe comment ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Dans ce talk, on va raconter un peu l’histoire du don du sang dans le monde, puis rentrer dans le concret avec le processus de don et les différents types de dons. Et surtout, on va voir à quoi ça sert de donner (pour soi, et pour les autres). Enfin on verra un peu à travers le monde comment ça se passe aussi !&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Par &lt;strong&gt;Quentin Nambot&lt;/strong&gt;&lt;/p&gt;</content><author><name>Quentin Nambot</name></author><category term="lft" /><category term="tech" /><summary type="html">Donner son sang, c’est unanimement considéré comme une bonne action</summary></entry><entry><title type="html">Mentors: super-héros ou super-vilains ? #LFT 29/09/23</title><link href="https://tech.bedrockstreaming.com/mentors-super-heros-ou-super-vilains" rel="alternate" type="text/html" title="Mentors: super-héros ou super-vilains ? #LFT 29/09/23" /><published>2023-09-29T00:00:00+00:00</published><updated>2023-09-29T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/mentors-super-heros-ou-super-vilains</id><content type="html" xml:base="https://tech.bedrockstreaming.com/mentors-super-heros-ou-super-vilains">&lt;blockquote&gt;
  &lt;p&gt;Développeuse junior, j’ai eu du mal à trouver ma place et faire mes preuves. Étudiante, vous m’aviez dit : “Deviens PO ou chef de projet !”. Je ne voulais pas d’un métier fonctionnel. Je me suis fixée un but, réussir là où vous, profs, maitres de stage, ne vouliez pas que j’aille. Des rencontres, cauchemardesques comme merveilleuses, tout au long de mon apprentissage, m’ont aidée à confirmer mon choix professionnel : être développeuse ! Comment mes mentors m’ont guidée ? Je partagerai des actions et des comportements qui m’ont incitée à lutter pour atteindre mes objectifs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Vous aussi, vous avez le pouvoir de changer une vie !&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Par &lt;strong&gt;Pauline Rambaud&lt;/strong&gt;&lt;/p&gt;</content><author><name>Pauline Rambaud</name></author><category term="lft" /><category term="tech" /><summary type="html">Développeuse junior, j’ai eu du mal à trouver ma place et faire mes preuves. Étudiante, vous m’aviez dit : “Deviens PO ou chef de projet !”. Je ne voulais pas d’un métier fonctionnel. Je me suis fixée un but, réussir là où vous, profs, maitres de stage, ne vouliez pas que j’aille. Des rencontres, cauchemardesques comme merveilleuses, tout au long de mon apprentissage, m’ont aidée à confirmer mon choix professionnel : être développeuse ! Comment mes mentors m’ont guidée ? Je partagerai des actions et des comportements qui m’ont incitée à lutter pour atteindre mes objectifs.</summary></entry><entry><title type="html">Nourrir nos IA #LFT 29/09/23</title><link href="https://tech.bedrockstreaming.com/nourrir-nos-ia" rel="alternate" type="text/html" title="Nourrir nos IA #LFT 29/09/23" /><published>2023-09-29T00:00:00+00:00</published><updated>2023-09-29T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/nourrir-nos-ia</id><content type="html" xml:base="https://tech.bedrockstreaming.com/nourrir-nos-ia">&lt;blockquote&gt;
  &lt;p&gt;ChatGPT, c’est magique. L’IA, c’est futur de l’homme. Les réseaux neuronaux, c’est la vie. Vraiment ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Je vous propose de voir un peu ce qui se cache derrière l’IA par le biais de celleux qui la construisent : les travailleur·se·s du digital. Oui, j’ai bien digital et vous verrez que ce terme n’a rien d’abusif.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;À la fin, vous aurez une vision plus précise de ce qui se trame dans le monde pas si magique des IA.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Par &lt;strong&gt;Nastasia Saby&lt;/strong&gt;&lt;/p&gt;</content><author><name>Nastasia Saby</name></author><category term="lft" /><category term="tech" /><summary type="html">ChatGPT, c’est magique. L’IA, c’est futur de l’homme. Les réseaux neuronaux, c’est la vie. Vraiment ?</summary></entry><entry><title type="html">Siteswap: jongler avec les maths #LFT 29/09/23</title><link href="https://tech.bedrockstreaming.com/siteswap-jongler-avec-les-maths" rel="alternate" type="text/html" title="Siteswap: jongler avec les maths #LFT 29/09/23" /><published>2023-09-29T00:00:00+00:00</published><updated>2023-09-29T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/siteswap-jongler-avec-les-maths</id><content type="html" xml:base="https://tech.bedrockstreaming.com/siteswap-jongler-avec-les-maths">&lt;blockquote&gt;
  &lt;p&gt;Présentation des concepts de base du Siteswap, la notation mathématique qui permet de décrire les patterns/figures de jonglerie. Définition, exemples basiques, limites, comment déterminer si une séquence est valide… avec démonstration en direct de certaines figures.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Par &lt;strong&gt;Damien Krieger&lt;/strong&gt;&lt;/p&gt;</content><author><name>Damien Krieger</name></author><category term="lft" /><category term="tech" /><summary type="html">Présentation des concepts de base du Siteswap, la notation mathématique qui permet de décrire les patterns/figures de jonglerie. Définition, exemples basiques, limites, comment déterminer si une séquence est valide… avec démonstration en direct de certaines figures.</summary></entry><entry><title type="html">GopherCon UK 2023 highlights</title><link href="https://tech.bedrockstreaming.com/2023/08/12/gophercon-uk-london-2023.html" rel="alternate" type="text/html" title="GopherCon UK 2023 highlights" /><published>2023-08-12T00:00:00+00:00</published><updated>2023-08-12T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2023/08/12/gophercon-uk-london-2023</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2023/08/12/gophercon-uk-london-2023.html">&lt;p&gt;Hello there! I’m Pierre-Alain, a senior back-end developer at Bedrock and I had the opportunity to go to London for the GopherCon UK.&lt;/p&gt;

&lt;p&gt;I travelled by train from Lyon to London, TGV and Eurostar. Train journey not only aligned with my commitment to minimize my carbon footprint for this trip, but is also a enjoyable travel choice. While the cost was higher than taking a plane, I would like to thank Bedrock for enabling me to take this option.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/gopherconuk2023/IMG_6877.jpeg&quot; alt=&quot;IMG_6877.jpeg&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-is-gophercon-uk-&quot;&gt;What is GopherCon UK ?&lt;/h1&gt;

&lt;p&gt;GopherCon UK 2023 spans three days, commencing with a workshop day on August 16th, followed by two conference days featuring multiple tracks on August 17th and 18th. The event takes place at The Brewery, at Barbican, situated in the heart of the City of London.
We were over 500 attendees, including delegates, speakers, and sponsors. This event is all about sharing the latest in Go programming with lots of networking, good food and drinks.&lt;/p&gt;

&lt;h1 id=&quot;workshop-day-practical-go-for-developers&quot;&gt;Workshop day (Practical GO for developers)&lt;/h1&gt;
&lt;p&gt;It was a first time for me to attend a workshop at an event like GopherCon. As a new Gopher, my exposure to writing Go code had been limited. However, I was looking forward to it.&lt;/p&gt;

&lt;p&gt;In the following lines, I’ll be sharing the insights I gained during the workshop — knowledge I’m excited to share to both you and my colleagues:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Because of some unicode characters, you should not use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len()&lt;/code&gt; on a string in case you have emojis, hieroglyph or symbol (£世界). It is better to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tf8.RuneCountInString()&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmt.Printf(...)&lt;/code&gt; for debugging
    &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%#v, %+v, (%T)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;// output : struct { E int; A string }{E:1, A:&quot;string&quot;},&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;//          {E:1 A:string},&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;//          (struct { E int; A string })&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;`http://site.name`&lt;/code&gt;  gives a raw string which can be useful when you have slashes in your string, to avoid having to escape them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;I liked this image which gives an idea of computer latency compared to a human.
    &lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Computer Latency at a Human Scale&lt;br /&gt;&lt;br /&gt;Source: &lt;a href=&quot;https://twitter.com/ProwessConsult?ref_src=twsrc%5Etfw&quot;&gt;@ProwessConsult&lt;/a&gt; (2017) &lt;a href=&quot;https://t.co/5Uhw5nCzUJ&quot;&gt;https://t.co/5Uhw5nCzUJ&lt;/a&gt; &lt;a href=&quot;https://t.co/YlVYnm3nGH&quot;&gt;pic.twitter.com/YlVYnm3nGH&lt;/a&gt;&lt;/p&gt;&amp;mdash; Josh Jordan (@jordancurve) &lt;a href=&quot;https://twitter.com/jordancurve/status/1108475342468120576?ref_src=twsrc%5Etfw&quot;&gt;March 20, 2019&lt;/a&gt;&lt;/blockquote&gt;
    &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;a well known bug also known as the &lt;em&gt;for-loop gotcha&lt;/em&gt; where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; in the loop is not incrementing correctly.
    &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gr:%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;//fix 1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gr:%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;// fix 2&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gr:%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Goroutine channel tricks
    &lt;blockquote&gt;
      &lt;ul&gt;
        &lt;li&gt;send/receive will block until opposite operation (*)
          &lt;ul&gt;
            &lt;li&gt;buffered channel of cap n has n non-blocking sends&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;receive from a closed channel will return the zero value without blocking&lt;/li&gt;
        &lt;li&gt;you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val,ok := &amp;lt;- ch&lt;/code&gt; as second left variable to know if value comes from channel or not&lt;/li&gt;
        &lt;li&gt;send or close to a closed channel will panic&lt;/li&gt;
        &lt;li&gt;send or receive on a nil channel will block forever…&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doc.go&lt;/code&gt; is used to add documentation to packages, example below:&lt;/p&gt;

    &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c&quot;&gt;/*
  Package nope does nothing as Go package.

  ...
  */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nope&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;example_test.go&lt;/code&gt; on a package, gives example tests to other developers&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nope_test&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

  &lt;span class=&quot;s&quot;&gt;&quot;github.com/shipt/nlp&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExampleTokenize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;nothing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SayNothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;// Output:&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;// &quot;nothing&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;you can create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testdata&lt;/code&gt; folder to store fixtures which would be avoided by compiler&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;we should use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testify/require&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testify/mock&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testify/suites&lt;/code&gt; &lt;em&gt;evil laugh&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Workshop given by Miki Tebeka, Ardan Labs was really great and gave the opportunity to compare myself to what is expected from a new Gopher, and so far I would say I’m doing OK. I am now eager to tackle more projects in Go at Bedrock. \o/&lt;/p&gt;

&lt;h1 id=&quot;day-one&quot;&gt;Day one&lt;/h1&gt;

&lt;p&gt;Upon arrival, I was greeted with a delightful British-style Gopher plush, serving as a warm and wonderful welcome gift.&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;/images/posts/gopherconuk2023/IMG_6870.jpeg&quot; alt=&quot;Gopher plush&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;Then, I enjoyed a truly good breakfast (kudos to @Formal for the exceptional coffee baristas) and engaged in conversations with the sponsor booths positioned within the venue, and even entered their raffle giveaways.&lt;/p&gt;

&lt;h2 id=&quot;scaling-coffee-with-goroutines-workshop-tutorial&quot;&gt;Scaling Coffee with Goroutines (workshop tutorial)&lt;/h2&gt;

&lt;p&gt;Sadie Freeman’s enlightening tutorial walks us through the process of taking advantages from goroutines to achieve scalable codebase and platform effectively.&lt;/p&gt;

&lt;h4 id=&quot;the-coffee-shop-challenge&quot;&gt;The coffee shop challenge&lt;/h4&gt;

&lt;p&gt;Imagine a coffee shop aiming to do:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a lot of coffee&lt;/li&gt;
  &lt;li&gt;for a lot of people&lt;/li&gt;
  &lt;li&gt;as fast as possible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a coffee to be considered complete, three essential actions were required:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Accept payment&lt;/li&gt;
  &lt;li&gt;Steam milk&lt;/li&gt;
  &lt;li&gt;Make espresso&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these actions takes approximately 2 seconds to execute.&lt;/p&gt;

&lt;p&gt;To break it down:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Serving one customer requires 2 seconds per action, totaling 6 seconds.&lt;/li&gt;
  &lt;li&gt;Serving three customers extends the total time to 18 seconds.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;scaling-for-speed&quot;&gt;Scaling for Speed&lt;/h4&gt;

&lt;p&gt;Initial attempts to introduce goroutines seem straightforward, by merely appending “go” before a method:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MakeCoffee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, for three customers, this results in a staggeringly brief 49 microseconds, practically an impossible feat. The solution wasn’t as straightforward as it may seem.&lt;/p&gt;

&lt;h4 id=&quot;enter-the-syncwaitgroup&quot;&gt;Enter the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sync.WaitGroup&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WaitGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;wg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nonetheless, even with this approach, we still find ourselves waiting for each coffee to complete before initiating the next one. Consequently, serving three customers still demands 6 seconds.&lt;/p&gt;

&lt;p&gt;Optimization beckons; each action could potentially transform into its own goroutine. Ultimately, with this approach, serving three customers takes a mere 2 seconds, finally achieving efficient customer service.&lt;/p&gt;

&lt;h4 id=&quot;scaling-for-load&quot;&gt;Scaling for Load&lt;/h4&gt;

&lt;p&gt;Enter containerization! Deployment onto Kubernetes through Docker containers ensues. The coffee shop pods are allocated finite CPU and Memory resources.&lt;/p&gt;

&lt;p&gt;Consider a scenario where 300 customers arrive simultaneously on our webservice. This influx of customers causes the pod to become memory-intensive, ultimately leading to an Out of Memory (OOM) kill.&lt;/p&gt;

&lt;p&gt;But what happens when the challenge escalates to 3000 customers? This needs vertical scaling: allocating more resources. However, this approach can become prohibitively expensive.&lt;/p&gt;

&lt;p&gt;Enter the pragmatic solution of horizontal scaling - opening more pods (coffee shops). With 10 pods, each handling 300 customers, accommodating 3000 customers in about 2 seconds becomes feasible.&lt;/p&gt;

&lt;p&gt;While this tutorial doesn’t delve into the topic, an intriguing possibility would be to split responsibilities in different pod(payment, milk, espresso) for further optimization and efficiency.&lt;/p&gt;

&lt;h2 id=&quot;the-7-deadly-sins-for-gophers&quot;&gt;The 7 Deadly Sins for Gophers&lt;/h2&gt;

&lt;p&gt;John Gregory provided invaluable insights into the pitfalls to avoid for Gophers, whether seasoned or new. Here’s a condensed overview of the key takeaways:&lt;/p&gt;

&lt;h3 id=&quot;lush&quot;&gt;Lush&lt;/h3&gt;
&lt;p&gt;The urge to rush into production without due consideration. Concurrency might entice you with the “go” keyword, but remember:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Use goroutines judiciously, only when necessary.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;wrath&quot;&gt;Wrath&lt;/h3&gt;
&lt;p&gt;Substituting “panic” for proper error handling:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“Using a wall to stop a car instead of the brakes.”&lt;/p&gt;

  &lt;p&gt;Embrace defensive coding practices.&lt;/p&gt;

  &lt;p&gt;Reserved methods should be utilized outside user runtime; employ them at startup.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;greed&quot;&gt;Greed&lt;/h3&gt;
&lt;p&gt;The desire to future-proof everything:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Avoid over-engineering; simplicity often prevails.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;sloth&quot;&gt;Sloth&lt;/h3&gt;
&lt;p&gt;Focusing on “what” rather than “why” in comments:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Enhance error handling with contextual information. Seek semantic context.&lt;/p&gt;

  &lt;p&gt;Utilize &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmt.Errorf(&quot;this did not work: %w&quot;, err)&lt;/code&gt; for enhanced error messages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;gluttony&quot;&gt;Gluttony&lt;/h3&gt;
&lt;p&gt;Unnecessary reliance on frameworks:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Beware of vulnerabilities.&lt;/p&gt;

  &lt;p&gt;Begin with simplicity.&lt;/p&gt;

  &lt;p&gt;Embrace libraries with robust support.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;envy&quot;&gt;Envy&lt;/h3&gt;
&lt;p&gt;Forcing patterns where they aren’t required:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Interfaces aren’t always necessary.&lt;/p&gt;

  &lt;p&gt;Explore “Effective Go” principles.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;pride&quot;&gt;Pride&lt;/h3&gt;
&lt;p&gt;Assuming you possess the ultimate knowledge:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Avoid artificially restricting API access.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;John Gregory’s wisdom shines a light on the potential pitfalls Gophers may encounter. Steering clear of these seven deadly sins can lead to more effective and resilient Go programming practices.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;social-event-with-food-and-drinks-responsibly&quot;&gt;Social event with food and drinks (responsibly)&lt;/h3&gt;
&lt;p&gt;I (also) enjoyed video game, table tennis, a magician and a DJ !&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;day-two&quot;&gt;Day two&lt;/h1&gt;

&lt;p&gt;I started this second day of conferences by having a Cup of tea (with milk) to get myself in the shoes of an English Gopher :)&lt;/p&gt;

&lt;h2 id=&quot;state-of-the-go-nation&quot;&gt;State of the Go Nation!&lt;/h2&gt;
&lt;p&gt;Cameron Balahan, Product Manager of the Go team, took us on a journey through the past, present, and future of Go. He shared insights into the language’s evolution, growth, and its roadmap ahead.&lt;/p&gt;

&lt;h3 id=&quot;going-back-in-time&quot;&gt;Going Back in Time&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;2007:&lt;/strong&gt; Go’s inception within Google.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;2009:&lt;/strong&gt; The pivotal moment when Go was opensourced.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;2012:&lt;/strong&gt; The groundbreaking release of Go 1.0, marking its maturity.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-stability-of-go-10&quot;&gt;The Stability of Go 1.0&lt;/h3&gt;
&lt;p&gt;Balahan emphasized the continuity of Go 1.0, ensuring backward compatibility with all Go 1.* versions.&lt;/p&gt;

&lt;h3 id=&quot;refinement-and-progress&quot;&gt;Refinement and Progress&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;2015:&lt;/strong&gt; Go’s strides in version 1.5:
    &lt;ul&gt;
      &lt;li&gt;Advancements in the compiler.&lt;/li&gt;
      &lt;li&gt;Introduction of a new garbage collector.&lt;/li&gt;
      &lt;li&gt;Adoption of semi-annual releases.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-flourishing-ecosystem-of-2018&quot;&gt;The Flourishing Ecosystem of 2018&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;2018:&lt;/strong&gt; Go’s ecosystem flourished, introducing key enhancements:
    &lt;ul&gt;
      &lt;li&gt;Go modules with caching and checksum features.&lt;/li&gt;
      &lt;li&gt;A focus on creating a secure platform.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;forever-go-1&quot;&gt;Forever Go 1.*&lt;/h3&gt;
&lt;p&gt;Balahan said Go 2 “will never happen”, as keeping Go 1 program working with all Go 1.* version is their aim from the start.&lt;/p&gt;

&lt;h3 id=&quot;todays-triumphs&quot;&gt;Today’s Triumphs&lt;/h3&gt;
&lt;p&gt;In the present:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Go’s user base has multiplied by four since 2018.&lt;/li&gt;
  &lt;li&gt;High levels of user satisfaction persist among the Go community.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-path-ahead&quot;&gt;The Path Ahead&lt;/h3&gt;
&lt;p&gt;Looking forward:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Addressing the loop variable issue. (mostly done in Go 1.21)&lt;/li&gt;
  &lt;li&gt;Enhancing onboarding experiences.&lt;/li&gt;
  &lt;li&gt;Strengthening vulnerability management.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;a-bonus-for-the-dev-community&quot;&gt;A Bonus for the Dev Community&lt;/h3&gt;
&lt;p&gt;In the spirit of improving security, Balahan encourages developers to integrate the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Govulncheck&lt;/code&gt; &lt;a href=&quot;https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck#hdr-Usage&quot;&gt;tool&lt;/a&gt; into their CI pipelines. This tool developed by Go team stands as a sentinel, safeguarding against potential vulnerabilities within Go packages.&lt;/p&gt;

&lt;h2 id=&quot;efficient-debugging-and-logging-with-opentelemetry-in-go&quot;&gt;Efficient Debugging and Logging with OpenTelemetry in Go&lt;/h2&gt;
&lt;p&gt;In the past, our debugging approach was straightforward: Log everything, locally or remotely. However, the landscape has evolved, favoring a combination of logs, traces, and metrics to illuminate the path.&lt;/p&gt;

&lt;p&gt;A quote I really liked:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Logs are for your future self, left by your past self :)”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While logs remain indispensable, their role can now be enhanced.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Absence of Request Context&lt;/strong&gt; - Log entries often contain detailed information about microservices, functions, or applications, yet they can fall short in providing the broader request context.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Scale Demands Complexity&lt;/strong&gt; - To grasp an application’s normal functioning, collating and analyzing numerous log entries becomes vital. This can require extensive indexing and complex tools to achieve at scale.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Disparity Across Teams and Services&lt;/strong&gt; - Uniformity in logs isn’t guaranteed across teams, adding complexity when attempting to link them cohesively.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Enter Distributed Tracing&lt;/strong&gt;:
A game-changer in the debugging realm, distributed tracing offers a comprehensive view of a request’s lifecycle. It stands as a potent tool to combat production issues effectively. With end-to-end visibility, distributed tracing is meant to level up your debugging power!
We, Bedrock, already been using distributed tracings for a while in our PHP codebase, which allow us to rapidly debug and understand problems in production when incidents happen ;)&lt;/p&gt;

&lt;h2 id=&quot;the-hackers-guide-to-jwt-security&quot;&gt;The Hacker’s Guide to JWT Security&lt;/h2&gt;
&lt;p&gt;JSON Web Tokens (JWTs) come with their own set of caveats that need to be carefully considered to ensure a robust security level.&lt;/p&gt;

&lt;h3 id=&quot;the-pronunciation-puzzle-how-to-pronounce-jwt&quot;&gt;The Pronunciation Puzzle: How to Pronounce JWT?&lt;/h3&gt;
&lt;p&gt;Before we dive into the security aspects of JWTs, let’s clarify a common query: how do you pronounce JWT? According to the standards outlined in RFC 7519, JWT is pronounced as “jot”. So, the next time you discuss JWTs, remember it’s neither three separate letters nor “JWT Token” as some say in France…, but a concise “jot”.&lt;/p&gt;

&lt;h3 id=&quot;the-encoding-vs-encryption-distinction&quot;&gt;The Encoding vs. Encryption Distinction&lt;/h3&gt;
&lt;p&gt;One fundamental fact about JWTs is that they are designed for encoding, not encryption. This means that the data contained within a JWT is base64url encoded, which allows easy transmission between parties, but it’s not encrypted in a way that prevents unauthorized access to the actual content.&lt;/p&gt;

&lt;h4 id=&quot;1-the-none-algorithm&quot;&gt;1. The “none” Algorithm&lt;/h4&gt;
&lt;p&gt;In scenarios where the backend fails to verify the algorithm before checking the claims within the JWT, an attacker can exploit this weakness and craft a forged token. This issue lies not just in the hands of the RFC specifications but also in implementation.&lt;/p&gt;

&lt;p&gt;To address this concern, it’s imperative to implement rigorous checks at the backend level. Verification of the algorithm should precede the verification of claims. This approach ensures that only tokens with valid algorithms are processed, mitigating the risk of unauthorized access.&lt;/p&gt;

&lt;h4 id=&quot;2-hs256-passwordkey-cracking-vulnerability&quot;&gt;2. HS256: Password/Key Cracking Vulnerability&lt;/h4&gt;
&lt;p&gt;This algorithm employs a shared secret key for both encoding and decoding, making it susceptible to password or key cracking attacks. What’s particularly concerning is that even a single compromised token can lead to offline attacks, where no communication with the server is necessary while craking.&lt;/p&gt;

&lt;p&gt;To counter this threat, regularly update and rotate the secret keys, ensuring that even if one key is compromised, the potential damage is limited.&lt;/p&gt;

&lt;h4 id=&quot;3-man-in-the-middle-on-internal-networks&quot;&gt;3. Man in the Middle on Internal Networks&lt;/h4&gt;
&lt;p&gt;In a man-in-the-middle attack scenario, an attacker can intercept and manipulate JWTs exchanged within an unsecured network, potentially gaining unauthorized access.&lt;/p&gt;

&lt;p&gt;To minimise this risk, it’s recommended to adopt secure communication protocols such as HTTPS. Additionally, implementing strict network segmentation and proper access controls can minimize the attack surface within internal networks.&lt;/p&gt;

&lt;h4 id=&quot;4-xss-vulnerabilities-safeguarding-tokens&quot;&gt;4. XSS Vulnerabilities: Safeguarding Tokens&lt;/h4&gt;
&lt;p&gt;Storing JWTs in local storage, which can be accessed by scripts, worsen this risk to counter XSS threats: consider using cookies to store JWTs. Cookies are less susceptible to XSS attacks, as their content cannot be directly accessed by Javascript scripts.&lt;/p&gt;

&lt;p&gt;By adopting this practice, the risk of token theft through XSS is substantially reduced.&lt;/p&gt;

&lt;p&gt;To sum up, Bedrock already adapted these principles for a while, but nevertheless it was great to remind myself to think about security and vulnerabilities around JWTs.&lt;/p&gt;

&lt;h2 id=&quot;how-not-to-write-a-test-in-go&quot;&gt;How NOT to Write a Test in Go&lt;/h2&gt;

&lt;p&gt;Amir Malka stated that adhering to these practices elevates Go testing from trivial to masterful. Effective testing enhances code reliability and development predictability. Embracing these guidelines lays the foundation for successful software projects.&lt;/p&gt;

&lt;h3 id=&quot;why-testing&quot;&gt;Why Testing?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Tests uncover bugs and validate code changes.&lt;/li&gt;
  &lt;li&gt;Tests build confidence in code correctness.&lt;/li&gt;
  &lt;li&gt;Tests serve as living documentation, illustrating code behavior.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;key-testing-principles&quot;&gt;Key Testing Principles&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Fixture Placement:&lt;/strong&gt; Organize test fixtures in a dedicated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testdata&lt;/code&gt; directory, avoided by compiler.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Structured Tests:&lt;/strong&gt; Embrace table-driven tests for readability and comprehensive coverage.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Parallelism:&lt;/strong&gt; Use caution with parallel tests to avoid unintended interactions.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Test Suites:&lt;/strong&gt; Employ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testing.M&lt;/code&gt; for related tests and control setup/teardown with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TestMain&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Categorization:&lt;/strong&gt; Use build tags or environment variables to categorize and skip tests.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Concurrency Safety:&lt;/strong&gt; Detect data races with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-race&lt;/code&gt; flag during testing.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Effective Mocking:&lt;/strong&gt; Benefit from embedded interfaces for accurate mocks.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Randomizing Tests:&lt;/strong&gt; Introduce randomness with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-shuffle&lt;/code&gt; flag to uncover hidden issues.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Benchmarks:&lt;/strong&gt; Gauge code performance with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testing.B&lt;/code&gt;, setup/teardown carefully.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Test Automation:&lt;/strong&gt; Automate tests in CI pipelines to maintain consistent quality.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Code Coverage:&lt;/strong&gt; Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-cover&lt;/code&gt; flag to monitor and improve test coverage.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Coming from PHP, I never thought about parallelism or Benchmarks while writing tests on a daily basis. All of these testing principles will help me and hopefully my team (when they would have read this post!) to write test the “Go way”.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In closing, my journey through GopherCon UK 2023 has been as exciting as tiring for my first Golang Conference. I thank a lot Bedrock for affording me the opportunity to partake in this experience. Participating in this event helped me to dive deeper into the world of Go and will enhance my professional growth.&lt;/p&gt;

&lt;p&gt;To the organizers of GopherCon UK 2023, your planning and dedication have resulted in a seamless event. Every aspect has been orchestrated to perfection. Congrats to you ! Also, thanks to the sponsors, for continuing to take part in these events during financially hard times.&lt;/p&gt;

&lt;p&gt;As I return to my daily routine armed with the knowledge gained, I am excited to share these learnings with my colleagues and hope to contribute even more effectively to my team. GopherCon UK 2023 has not only expanded my knowledge but has also strengthened my enthusiasm for Go.&lt;/p&gt;

&lt;p&gt;GopherCon UK 2024, hopefully, here I come (with other of my colleagues) ! Cheers!&lt;/p&gt;</content><author><name>Pierre-Alain BEDU</name></author><category term="conference" /><category term="london" /><category term="tech" /><category term="golang" /><category term="go" /><summary type="html">Hello there! I’m Pierre-Alain, a senior back-end developer at Bedrock and I had the opportunity to go to London for the GopherCon UK.</summary></entry><entry><title type="html">Bedrock at We Love Speed 2023</title><link href="https://tech.bedrockstreaming.com/2023/08/11/we-love-speed-2023.html" rel="alternate" type="text/html" title="Bedrock at We Love Speed 2023" /><published>2023-08-11T00:00:00+00:00</published><updated>2023-08-11T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2023/08/11/we-love-speed-2023</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2023/08/11/we-love-speed-2023.html">&lt;p&gt;The Frontend Bedrock teams were present at the 2023 edition of the &lt;em&gt;We Love Speed&lt;/em&gt; conference in Paris on May 10. Its aim is to share as widely as possible knowledge and experience in the field of web performance.&lt;/p&gt;

&lt;p&gt;Webperf, or web performance, refers to the set of techniques and best practices aimed at optimizing the loading speed and user experience (UX) of websites. It covers various aspects such as page loading time, interface responsiveness, animation fluidity, server request processing capacity, etc.&lt;/p&gt;

&lt;p&gt;Webperf is still a major challenge in today’s web industry, influencing UX, website visibility and overall commercial success. This article summarizes the topics discussed at this year’s &lt;em&gt;We Love Speed&lt;/em&gt; conference and gives an overview of the 2023 approach to web performance.&lt;/p&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#why-optimize-your-sites-webperf&quot;&gt;Why optimize your sites’ webperf?&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#its-all-about-money-&quot;&gt;It’s all about money 🤑&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#what-about-seo&quot;&gt;What about SEO?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-do-you-take-up-a-performance-project&quot;&gt;How do you take up performance projects?&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#build-a-long-term-strategy-based-on-usages&quot;&gt;Build a long-term strategy based on usages&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#take-cognitive-biases-into-account-to-prioritise-optimisations&quot;&gt;Take cognitive biases into account to prioritise optimisations&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#performance-must-be-a-company-wide-concern&quot;&gt;Performance must be a company-wide concern&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-are-the-tools-to-measure-and-improve-performance&quot;&gt;What are the tools to measure and improve performance?&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#use-the-right-tools-to-understand-performance-issues&quot;&gt;Use the right tools to understand performance issues…&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#and-the-right-tools-to-fix-them&quot;&gt;…and the right approach to fix them&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#mpa-vs-spa&quot;&gt;MPA vs SPA&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#implement-performance-improvements&quot;&gt;Implement performance improvements&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#using-bfcache&quot;&gt;Using bfcache&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#preloading-preconnecting-and-html&quot;&gt;Preloading, Preconnecting and HTML&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#lazy&quot;&gt;Lazy…&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#taking-care-of-the-consent-management-platform-cmp&quot;&gt;Taking care of the Consent Management Platform (CMP)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#self-host-blocking-thirdparties&quot;&gt;Self-host blocking thirdparties&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#use-server-side-rendering-ssr&quot;&gt;Use Server-side Rendering (SSR) and optimize it!&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#103-early-hints&quot;&gt;103 Early hints&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#webperf-at-bedrock&quot;&gt;Webperf at Bedrock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-optimize-your-sites-webperf&quot;&gt;Why optimize your sites’ webperf?&lt;/h2&gt;

&lt;h3 id=&quot;its-all-about-money-&quot;&gt;It’s all about money 🤑&lt;/h3&gt;

&lt;p&gt;Improving the webperf just for the technical challenge is not interesting in a company’s perspective and can’t make the approach durable. &lt;a href=&quot;https://www.youtube.com/watch?v=wh0zCqZRuSs&quot;&gt;Boris Schapira in his talk &lt;em&gt;“Parlons de valeur”&lt;/em&gt;&lt;/a&gt; 🇫🇷 shows how important it is to talk about &lt;strong&gt;value&lt;/strong&gt; to make optimisation projects part of an organisation’s strategy.&lt;/p&gt;

&lt;p&gt;Web performance is essential, as it has a direct impact on user satisfaction, engagement and the overall success of a website. Fast performance enables users to access information quickly, interact without delay and navigate smoothly. On the other hand, slow loading times, frozen interfaces or high response times can lead to user frustration, lower engagement and higher bounce rates.&lt;/p&gt;

&lt;p&gt;A lot of articles on the net have proved &lt;strong&gt;the impact of the webperf on users’ engagement&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Here is &lt;a href=&quot;https://web.dev/why-speed-matters/&quot;&gt;a great article from Google&lt;/a&gt; or &lt;a href=&quot;https://wpostats.com/&quot;&gt;hundreds of case studies&lt;/a&gt; from WPO stats, a site listing case studies demonstrating the impact of web performance optimization.&lt;/p&gt;

  &lt;p&gt;Reducing perceived waiting time by 40% increased search engine traffic and sign-ups by 15% at Pinterest. For Mobify, each 100ms reduction in homepage loading speed yields an average increase in annual sales of almost $380,000!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, depending on the site’s field, it’s relatively easy to link the webperf approach to an objective of user views or loyalty, but also with the brand image. And the company’s governance will be able to quickly measure the benefits in terms of return on investment.&lt;/p&gt;

&lt;h3 id=&quot;what-about-seo&quot;&gt;What about SEO?&lt;/h3&gt;

&lt;p&gt;Moreover, search engines such as Google also give a relative importance on website performance in their ranking algorithms. More optimized sites often benefit from better positioning in search results, which can have an impact on their visibility and traffic.&lt;/p&gt;

&lt;p&gt;However, &lt;a href=&quot;https://www.youtube.com/watch?v=uWqQCOX52i4&quot;&gt;Philippe Yonnet’s talk &lt;em&gt;“Quel est le véritable impact des problèmes de web performance sur le SEO ?”&lt;/em&gt;&lt;/a&gt; 🇫🇷 reveals that actually the Google webperf scoring is in reality quite low in all the parameters taken into account in the ranking algorithm. Relevant content is always the first factor in top positioning. As it was the case with responsive design a few years ago, the Google’s communication around webperf is aimed more at &lt;strong&gt;encouraging good practices&lt;/strong&gt; in the web community than at penalizing slow sites.&lt;/p&gt;

&lt;h2 id=&quot;how-do-you-take-up-performance-projects&quot;&gt;How do you take up performance projects?&lt;/h2&gt;

&lt;h3 id=&quot;build-a-long-term-strategy-based-on-usages&quot;&gt;Build a long-term strategy based on usages&lt;/h3&gt;

&lt;p&gt;You need a strategy and a speech! &lt;a href=&quot;https://www.youtube.com/watch?v=wh0zCqZRuSs&quot;&gt;Boris Schapira&lt;/a&gt; 🇫🇷 defines 5 steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Identify the sticking point&lt;/li&gt;
  &lt;li&gt;Associate a value to the project for the business&lt;/li&gt;
  &lt;li&gt;Invest time for the optimizations&lt;/li&gt;
  &lt;li&gt;Evaluate the ROI&lt;/li&gt;
  &lt;li&gt;Sustain the approach over time (it should never be a one shot project)&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;We now universally use the &lt;a href=&quot;https://web.dev/vitals/&quot;&gt;Google’s Core Web Vitals KPI&lt;/a&gt; (CWV) to model the UX:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Do users have a stable visual response? ➡️ it’s measured through the &lt;em&gt;Cumulative Layout Shift&lt;/em&gt; (CLS)&lt;/li&gt;
    &lt;li&gt;Do users quickly see content they can trust? ➡️ it’s measured through the &lt;em&gt;Largest Contentful Paint&lt;/em&gt; (LCP)&lt;/li&gt;
    &lt;li&gt;Can users quickly interact with the page in a qualitative way? ➡️ it’s measured through the &lt;em&gt;First Input Delay&lt;/em&gt; (FID)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;But these KPI are a limited reflection of the UX, and it is hard to link it to a representative value. It’s possible to have a super-fast LCP and still have a feeling of slowness or discomfort on the user’s side. For example, a page that quickly displays the thumbnail of a film (LCP criterion) but takes a long time to display the film’s cast list (which is the content the user wants) won’t be great for the UX.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You need to correlate these measures with usages&lt;/strong&gt;. There is no magic solution for this but segmenting sessions is a good practice to focus on relevant optimizations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;take a period of time where the measure is representative (e.g. on our streaming sites, the activity period is mainly in the evening)&lt;/li&gt;
  &lt;li&gt;take into account the fact that different actions or events on your site may not involve the same users (so not the same devices, etc.)&lt;/li&gt;
  &lt;li&gt;take “short” indicators to measure the impact of the performance (e.g. if users are on a product list, monitor the viewing of the product page and not the purchase of the product)&lt;/li&gt;
  &lt;li&gt;take into account the market you’re addressing (e.g. food click &amp;amp; collect users are more likely to wait the loading of the next page than users on a retail site)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;take-cognitive-biases-into-account-to-prioritise-optimisations&quot;&gt;Take cognitive biases into account to prioritise optimisations&lt;/h3&gt;

&lt;p&gt;When it comes to prioritising performance subjects, there are several strategies to consider. &lt;a href=&quot;https://www.youtube.com/watch?v=6KwW5v5rce4&quot;&gt;Philip Tellis in his talk &lt;em&gt;“Understanding Cognitive Biases in Performance Measurement”&lt;/em&gt;&lt;/a&gt; 🇬🇧 shed light on the psychological aspect of performance, focusing on cognitive biases.&lt;/p&gt;

&lt;p&gt;Philip made a powerful statement: &lt;em&gt;“If you have a brain, you have a bias&lt;/em&gt;”. Let’s explore three examples that demonstrate how biases can impact your work and how you can leverage them to your advantage.&lt;/p&gt;

&lt;h4 id=&quot;slowest-is-the-norm&quot;&gt;Slowest is the norm&lt;/h4&gt;

&lt;p&gt;The negativity bias reveals that negative experiences tend to leave a stronger impression than positive ones, even if their intensity is the same. This is crucial to keep in mind when optimizing your app’s performance. Ideally, the slowest page should not be more than 15 times slower than the fastest page. Users might perceive the slower page as the norm for your app.&lt;/p&gt;

&lt;p&gt;To counteract this bias, it’s important to be transparent with your users. You can display a message indicating that the page is slow and assure them that efforts are underway to resolve the issue. Interestingly, slow pages have been associated with a 38% increase in heart rate, similar to watching a horror movie. &lt;strong&gt;By prioritizing performance and being honest with your users, you can mitigate stress and anxiety.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;take-care-at-the-beginning-and-end&quot;&gt;Take care at the beginning and end&lt;/h4&gt;

&lt;p&gt;The serial position effect highlights that people tend to remember the beginning and end of an experience more vividly. This is particularly relevant for our work in developing applications for Smart TVs, where performance challenges arise in two areas: page loading and remote control navigation. Taking this bias into account, we’ve learned that &lt;strong&gt;investing more time in optimizing page load times can significantly increase end-user satisfaction&lt;/strong&gt;. Furthermore, statistics show that a 500ms increase in delay leads to a 26% rise in frustration.&lt;/p&gt;

&lt;h4 id=&quot;take-care-at-the-beginning-&quot;&gt;Take care at the beginning 😅&lt;/h4&gt;

&lt;p&gt;The escalation of commitment bias refers to the inclination to persist in an endeavor once a significant investment of money, effort, or time has been made. Applying this bias to our app development, we recognize the importance of ensuring that the initial pages users encounter are fast, as this positively influences user retention. &lt;strong&gt;There is a direct correlation between a smooth initial experience and increased user engagement.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are just three examples among many others that Philip presented in his thought-provoking talk. It was an insightful perspective on performance, viewed through the lens of our cognitive biases. We all possess biases, and as developers, our objective is to acknowledge them and harness their power to inform the future updates of our apps.&lt;/p&gt;

&lt;h3 id=&quot;performance-must-be-a-company-wide-concern&quot;&gt;Performance must be a company-wide concern&lt;/h3&gt;

&lt;p&gt;While optimizing specific parts of your app is essential, it’s important to remember that you work in a company composed of diverse individuals with varying roles, perspectives, and concerns. Therefore, it’s crucial to extend performance awareness across all departments of your organization.&lt;/p&gt;

&lt;p&gt;La Redoute, an international clothing retailer, provides an excellent example of addressing this issue by creating a performance community within their company through the talk &lt;a href=&quot;https://www.youtube.com/watch?v=aGi-vxC6ttA&quot;&gt;&lt;em&gt;“Comment construire une communauté Web Perf dans son orga ?”&lt;/em&gt;&lt;/a&gt; 🇫🇷.&lt;/p&gt;

&lt;p&gt;To provide some context, La Redoute faces not only performance issues but also challenges related to synchronization and contributions on their platform. To tackle these challenges, they established a community that brings together individuals from different departments, including technical, marketing, finance, design, product, SEO, and more.&lt;/p&gt;

&lt;p&gt;It’s vital to ensure that performance is not solely the responsibility of one department, as &lt;strong&gt;each department can contribute valuable insights and support that ultimately benefit the entire company&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This community meets weekly to exchange knowledge and share updates on performance-related topics. After six months, they began witnessing the initial benefits, and &lt;strong&gt;within one year, they deemed the community mature&lt;/strong&gt;. They continue to hold these meetings, recognizing that the objective is not to prevent all issues but rather to minimize their impact and respond swiftly.&lt;/p&gt;

&lt;p&gt;La Redoute’s approach is truly inspiring and serves as a great example of fostering collaboration and cross-departmental engagement to address performance challenges.&lt;/p&gt;

&lt;h2 id=&quot;what-are-the-tools-to-measure-and-improve-performance&quot;&gt;What are the tools to measure and improve performance?&lt;/h2&gt;

&lt;p&gt;When analyzing a website’s performance, it’s essential to take several key criteria into account in order to become the &lt;a href=&quot;https://www.youtube.com/watch?v=q65w_luvB3A&quot;&gt;“Sherlock Holmes of Web Performance” as would say Ludovic Lefebvre&lt;/a&gt; 🇫🇷. In addition of the CWV mentioned above, there are other commonly used performance analysis criteria:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2023-07-01-we-love-speed-2023/metric.png&quot; alt=&quot;metric.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To measure/evaluate your site’s performance according to these criteria, there are 3 types of sources: Local (devtools), Synthetic (CI/CD / online scan tools), RUM (Real User Monitoring).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2023-07-01-we-love-speed-2023/perf-data-source.png&quot; alt=&quot;metric.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;use-the-right-tools-to-understand-performance-issues&quot;&gt;Use the right tools to understand performance issues…&lt;/h3&gt;

&lt;p&gt;Jean-Pierre Vincent gives more details about how to measure performance in his talk &lt;a href=&quot;https://www.youtube.com/watch?v=r-go-1z7XYw&quot;&gt;“Mesure ou meurs : diagnostics rapides”&lt;/a&gt; 🇫🇷, but here is a summary of the key tools:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Local development tools - devtools
    &lt;ul&gt;
      &lt;li&gt;Chrome &amp;amp; Firefox DevTools: a set of development tools integrated into the browser, for analyzing performance, debugging JavaScript code, inspecting DOM elements, etc.&lt;/li&gt;
      &lt;li&gt;Lighthouse DevTools (Chrome): a Chrome DevTools extension that provides automated audits to evaluate performance, accessibility, SEO optimization, etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Synthetic testing - CI/CD and online analysis tools
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.webpagetest.org/&quot;&gt;WebPageTest&lt;/a&gt;: an online tool for evaluating website performance by running tests on different browser configurations, network connections and geographical locations.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse-ci&quot;&gt;Lighthouse CI&lt;/a&gt;: a Lighthouse-based continuous integration (CI) solution that automates web performance and quality audits with every deployment.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Real User Monitoring
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://newrelic.com&quot;&gt;New Relic&lt;/a&gt;: an application performance monitoring platform that provides real-time visibility into the performance of your web applications, including usage metrics, load times, etc.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://grafana.com/&quot;&gt;Grafana&lt;/a&gt;: a data visualization platform that can be used to display and analyze performance monitoring data collected from a variety of sources, including RUM tools.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2023-07-01-we-love-speed-2023/logomosaic.png&quot; alt=&quot;logomosaic.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s important to note that each type of analysis data has its own advantages and is used in specific contexts. Local data is useful for real-time development and debugging, synthetic data enables performance to be compared and optimized in a reproducible way, while RUM data, just as explained by &lt;a href=&quot;https://www.youtube.com/watch?v=vfl-C1FZSwE&quot;&gt;Tim Vereecke in his “Noise Canceling RUM” talk&lt;/a&gt; 🇬🇧, provides a true view of UX. It is generally recommended to use a combination of these different data sources to identify/target problems or opportunities for performance improvement.&lt;/p&gt;

&lt;h3 id=&quot;and-the-right-approach-to-fix-them&quot;&gt;…and the right approach to fix them&lt;/h3&gt;

&lt;p&gt;Once you’ve identified the relevant performance criteria and used the analysis tools to measure your website’s current performance, it’s essential to stabilize the various criteria before setting improvement targets and finally implement said improvements. Here are the steps to follow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Stabilize criteria
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Analyze the results&lt;/strong&gt; of the performance measurements for each criterion you’ve identified. Identify areas where improvements are needed, and problems that affect performance stability. For example, LCP depends on the appearance of the widest element on the page. It’s important that this element is always the same on the same page type, otherwise there will be no consistent result and optimization will be impossible.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Examine performance metrics&lt;/strong&gt; over a sufficiently long period of time to detect trends and variations. This will help you understand whether performance problems are constant or sporadic.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Identify factors&lt;/strong&gt; that could influence performance, such as code changes, server updates, new features, content contributions, etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Setting improvement targets
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Determine the performance levels&lt;/strong&gt; you want to achieve for each criterion, based on benchmarks, best practices or objectives specific to your application.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Define measurable and realistic objectives&lt;/strong&gt; for each performance criterion. For example, you could aim to reduce page load time by 20%, improve server response time by less than 200 ms, or reduce bounce rate by 15%.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Prioritize goals&lt;/strong&gt; according to their impact on your website’s UX and business objectives (see &lt;a href=&quot;#take-cognitive-biases-into-account-to-prioritise-optimisations&quot;&gt;above section about cognitive biases&lt;/a&gt;).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Plan and implement improvements
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Identify the specific actions to be taken&lt;/strong&gt; to achieve each improvement objective. This may include code optimizations, server configuration adjustments, resource optimizations, caching, etc.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Establish an action plan&lt;/strong&gt; for each objective, defining the necessary steps, responsibilities, deadlines and resources required.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Implement improvements&lt;/strong&gt; iteratively, and measure performance regularly to assess the impact of changes.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Repeat the process&lt;/strong&gt; of analyzing, stabilizing and improving performance iteratively to continue optimizing your website.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;⚠️ It’s important to bear in mind that website performance is often an ongoing process, as needs, functionalities and conditions change over time. It is therefore advisable to regularly monitor performance and continue to identify new opportunities for improvement to deliver a superior UX.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;mpa-vs-spa&quot;&gt;MPA vs SPA&lt;/h3&gt;

&lt;p&gt;The performance possibilities are not the same between &lt;strong&gt;Single Pages Applications (SPA)&lt;/strong&gt; and &lt;strong&gt;Multiple Pages Applications (MPA)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;MPAs are simple to measure: each page is independent. The first page loads resources and then caches certain resources. It’s therefore important to be able to distinguish between measurements based on a user’s first visit and those based on browsing (which is much faster).&lt;/p&gt;

&lt;p&gt;SPAs are more difficult, because apart from the initial page load, there is other page load. Initial loading is often heavier (because of JS framework), and therefore slower. Page changes can’t be measured simply since only the initial load is taken into account. Research is currently underway in browsers to improve the collection of information on page changes in SPAs. This new metric is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;soft-navigation&lt;/code&gt; and is currently being tested on Chrome and specified by web organizations. Yoav Weiss explains this in his talk &lt;a href=&quot;https://www.youtube.com/watch?v=pQLRoABCnqg&quot;&gt;“Soft Navigations are hard!!”&lt;/a&gt; 🇬🇧.&lt;/p&gt;

&lt;h2 id=&quot;implement-performance-improvements&quot;&gt;Implement performance improvements&lt;/h2&gt;

&lt;p&gt;There are many technical tips for improving performance. While the list is far from exhaustive, we can go here through some of those mentioned at the conference.&lt;/p&gt;

&lt;h3 id=&quot;using-bfcache&quot;&gt;Using bfcache&lt;/h3&gt;

&lt;p&gt;At the time of writing, around 10% of a given user’s navigation consists of &lt;strong&gt;clicking on the “Go back” button&lt;/strong&gt; of their browser. More often than not, however, these users will then need to wait for the page to load again, despite the fact that the browser already did that work a few seconds beforehand.
In order to help reduce that waiting time, browsers recently began to release what’s called the Back/Forward cache (Also known as bfcache).&lt;/p&gt;

&lt;p&gt;Like its name suggests, it caches the page the user is leaving, so that if they go back using their browser features, they’ll see the cached page instead. Barry Pollard talks about the bfcache in the &lt;a href=&quot;https://youtu.be/fJrKeh-Np8c?t=1100&quot;&gt;“Top Core Web Vitals Recommendations for 2023”&lt;/a&gt; talk 🇬🇧.&lt;/p&gt;

&lt;h3 id=&quot;preloading-preconnecting-and-html&quot;&gt;Preloading, Preconnecting and HTML&lt;/h3&gt;

&lt;p&gt;Another possible improvement explained by Barry Pollard is to use HTML properties to preload and preconnect resources. He explains here that there is one important rule with HTML and the way it’s processed by web browsers: it is parsed &lt;strong&gt;line by line&lt;/strong&gt;, and it can be paused.&lt;/p&gt;

&lt;p&gt;When a browser is trying to render a web page, if it runs across something trying to call an url (such as loading a CSS file), then it’ll wait until said CSS file is fully loaded, before being able to keep going.
However this behavior can be somewhat altered by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rel&lt;/code&gt; HTML property to prepare some of that stuff ahead. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rel=”preload”&lt;/code&gt; will tell the browser to start loading said CSS asynchronously, as soon as a user opens the page. For an API, it will be the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rel=”preconnect”&lt;/code&gt; that will allow the website to start the handshake with an API as soon as possible.&lt;/p&gt;

&lt;p&gt;If a resource needs to be even higher-priority, there is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetchpriority&lt;/code&gt; attribute which will make the browser fetch that resource as soon as possible. If used correctly, &lt;a href=&quot;https://twitter.com/senthil_hi/status/1589676464215326720&quot;&gt;it can have immense benefit&lt;/a&gt; on LCP.&lt;/p&gt;

&lt;h3 id=&quot;lazy&quot;&gt;Lazy…&lt;/h3&gt;

&lt;p&gt;Images, and especially high-quality ones, can take up a lot of a website’s loading time, and are often considered the Largest Content of a website, &lt;strong&gt;dictating the LCP value&lt;/strong&gt;. However, usually a user isn’t seeing every image of a website at the same time. That’s where we can use lazy-loading.&lt;/p&gt;

&lt;p&gt;The goal of lazy-loading is to make sure that a user is only loading the images they are seeing. Here again exists an HTML attribute that can take care of everything, named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loading&lt;/code&gt;. It can receive the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lazy&lt;/code&gt; value in order to only load an image when approaching the screen.&lt;/p&gt;

&lt;p&gt;However, that lazy-loading property is not limited to images only. A component can be lazyloaded as well, such as a chat component that doesn’t need to load until the user clicks on the chat icon.&lt;/p&gt;

&lt;h3 id=&quot;taking-care-of-the-consent-management-platform-cmp&quot;&gt;Taking care of the Consent Management Platform (CMP)&lt;/h3&gt;

&lt;p&gt;A lot of websites, us included, are using a lot of third parties. We are not judging their usefulness here, we need them. This is why Andy Davies dedicates an entire talk about &lt;a href=&quot;https://www.youtube.com/watch?v=q3M4he-QxCA&quot;&gt;how to tame the speed impact of 3rd-party tags&lt;/a&gt; 🇬🇧.&lt;/p&gt;

&lt;p&gt;As he explains, &lt;strong&gt;each new thirdparty comes with its own compounding issues&lt;/strong&gt;. Adding another domain and thus another need to connect to a distant API, reheating the connection… A lot of these actions are taking network time, time that is actively needed to load a lot more data for a website.&lt;/p&gt;

&lt;p&gt;It is important to understand how our thirdparties work, and the limitations they inherently have. For example, we &lt;strong&gt;CANNOT, and should NEVER&lt;/strong&gt; try to preconnect to them. Preconnecting to a thirdparty discloses a user IP address, which according to GDPR laws at the time of writing, is considered a personnel data. If our user did not consent to share their data, we should never try to connect in the first place.&lt;/p&gt;

&lt;p&gt;Therefore, a big hurdle is that we need to collect the user’s consent to be able to connect to our thirdparties API. The first improvement to make is therefore to optimize the CMP, to make sure it loads fast and it shares the user’s consent with us as soon as possible.&lt;/p&gt;

&lt;h3 id=&quot;self-host-blocking-thirdparties&quot;&gt;Self-host blocking thirdparties&lt;/h3&gt;

&lt;p&gt;Sometimes, thirdparties can be needed to display anything at all to the user (e.g. for A/B testing). Since our user’s browser has limited network capabilities, it will try to prioritize its requests, and requests that are going to another domain are far down the line. For this exact reason, Andy Davies, &lt;a href=&quot;https://www.youtube.com/watch?v=q3M4he-QxCA&quot;&gt;in his talk&lt;/a&gt; 🇬🇧, recommends to self-host these thirdparties, so that they are on the same domain as our website and are prioritized by the browser.&lt;/p&gt;

&lt;h3 id=&quot;use-server-side-rendering-ssr-and-optimize-it&quot;&gt;Use Server-Side Rendering (SSR) and optimize it!&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;ℹ️ This is far from an easy to implement solution, and may require you to change your framework altogether.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Implementing SSR is a solution that is so powerful that it had a dedicated talk, where Kévin Raynel and Marting Guiller explained &lt;a href=&quot;https://www.youtube.com/watch?v=2b48sOTD4dc&quot;&gt;how Lazy Hydrate, Never Hydrate, and Resumable JS&lt;/a&gt; 🇫🇷 can be used to improve Web Performance.&lt;/p&gt;

&lt;p&gt;By allowing the code of an application to be pre-rendered in a server before being sent to a browser, you can dramatically decrease the time it takes for a user to be able to interact with the page. At Bedrock, we understood the power of SSR very early on, when we implemented it with React in 2015 for the new JS version of &lt;a href=&quot;https://www.6play.fr&quot;&gt;6play.fr&lt;/a&gt;! Since then, we haven’t looked back, but we will need to fine-tune the hydratation to keep the best.&lt;/p&gt;

&lt;h3 id=&quot;103-early-hints&quot;&gt;103 Early Hints&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Do note that this is an experimental feature ⚠️&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In his excellent &lt;a href=&quot;https://www.youtube.com/watch?v=0kKdMqIhvZs&quot;&gt;Web Protocols for Frontend Developers&lt;/a&gt; talk 🇬🇧, Robin Marx details extensively what is called the 103 Early Hints feature and how it can be used to improve your performance.&lt;/p&gt;

&lt;p&gt;103 Early Hints is a status code used to send preliminary headers in a response, providing the client with potential resource information before the main response is sent. This enables the browser to optimize its call flow.&lt;/p&gt;

&lt;p&gt;There are many other implementation tips covered by the conference, such as the new &lt;a href=&quot;https://developer.chrome.com/blog/prerender-pages/&quot;&gt;Speculation Rules API&lt;/a&gt;, but we can’t talk about everything here 😉&lt;/p&gt;

&lt;h2 id=&quot;webperf-at-bedrock&quot;&gt;Webperf at Bedrock&lt;/h2&gt;

&lt;p&gt;Bedrock’s technical teams have long been aware of the importance of web performance. Since we set up our first full JS frontend in 2015, we have been implementing best practices (SSR, lazy loading, prefetching, code spitting, image optimization, etc.) and we try to carry out regular optimization projects.&lt;/p&gt;

&lt;p&gt;But we know that we still have a lot to do in this area, particularly in terms of long-term monitoring and company-wide concern.&lt;/p&gt;

&lt;p&gt;Following this conference, there are lots of things we’d like to try out, such as using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetchpriority&lt;/code&gt; attribute to improve our LCP, optimizing the hydration of our SSR (perhaps with the use of &lt;a href=&quot;https://vercel.com/blog/understanding-react-server-components&quot;&gt;React Server Components&lt;/a&gt;) or studying the new experimental features.&lt;/p&gt;

&lt;p&gt;On our TV platforms developed in JS, hardware constraints are forcing us to go even further in optimizing performance, particularly in terms of memory usage. For example, a project is underway to use a global lazy loading to improve the management of rows of programs and videos. To be continued…&lt;/p&gt;

&lt;h2 id=&quot;keep-at-it-&quot;&gt;Keep at it! 💪&lt;/h2&gt;

&lt;p&gt;All in all, performance is definitely anything but an easy task to do. There is no magic formula that will make all your problems go away. Even if you manage to hold a long workshop of several weeks (or even months!) that will finally fix your performance issues, if it does not become a habit in your developer teams, it will never be over. &lt;strong&gt;Performance is a habit, built through practice and good communication&lt;/strong&gt;. But it can be achieved.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Authors: &lt;a href=&quot;https://github.com/EtienneDOYON&quot;&gt;Etienne Doyon&lt;/a&gt;, &lt;a href=&quot;https://github.com/agory&quot;&gt;Alexandre Gory&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/jeansmaug&quot;&gt;Maxime Blanc&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/fooragnak&quot;&gt;Florent Dubost&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content><author><name>Frontend teams</name></author><category term="conference" /><category term="paris" /><category term="tech" /><category term="webperf" /><summary type="html">The Frontend Bedrock teams were present at the 2023 edition of the We Love Speed conference in Paris on May 10. Its aim is to share as widely as possible knowledge and experience in the field of web performance.</summary></entry></feed>