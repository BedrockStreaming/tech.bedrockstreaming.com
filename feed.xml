<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://tech.bedrockstreaming.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://tech.bedrockstreaming.com/" rel="alternate" type="text/html" /><updated>2023-12-05T09:58:35+00:00</updated><id>https://tech.bedrockstreaming.com/feed.xml</id><title type="html">Bedrock Tech Blog</title><subtitle>Blog technique de Bedrock</subtitle><entry><title type="html">Android 14 is out</title><link href="https://tech.bedrockstreaming.com/2023/12/05/android-14.html" rel="alternate" type="text/html" title="Android 14 is out" /><published>2023-12-05T00:00:00+00:00</published><updated>2023-12-05T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2023/12/05/android-14</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2023/12/05/android-14.html">&lt;p&gt;Here’s what it means for users and developers.&lt;/p&gt;

&lt;p&gt;With each new OS version, new things, upgrades, deprecations and changes are introduced, affecting the way we use and develop our apps.
Google keeps going in the direction of more privacy, more accessibility and more control over what the apps can do to maximize security and integrity.
Android 14 is no exception and here’s what I compiled on different topics that I will try to vulgarize to keep everyone on board.&lt;/p&gt;

&lt;h3 id=&quot;technical&quot;&gt;Technical&lt;/h3&gt;

&lt;p&gt;Technical changes build over features and APIs already introduced in previous versions, mostly Android 12 and 13.
They tend to modernize tools by catching up with some Java features and semantics, helping manufacturers and improving the developers’ IDE to embrace those changes.
Due to the nature of the changes, this is the topic that has to remain…technical, sorry for that.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mobile screens are getting bigger with more ratios to support, we’re moving further and further away from the binary world of phone vs tablet. To ensure the best experience on this wide range of devices, Android 14 introduces the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Large Screen Compatibility Mode&lt;/code&gt; to help manufacturers improve the experience on their devices.&lt;/li&gt;
  &lt;li&gt;Updates to OpenJDK17 may require a bit of attention from apps using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regex&lt;/code&gt; that are not close enough to openJDK’s new semantics, throwing exceptions when confronted to an invalid groupe reference.&lt;/li&gt;
  &lt;li&gt;Generating a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UUID&lt;/code&gt; from a string sees the validation become stricter and will now lead to exceptions due to deserialization issues. More than ever, it’s time to unit test UUID generation.&lt;/li&gt;
  &lt;li&gt;A bit of additional ruling may be needed to fix Proguard issues when shrinking / obfuscating code involving the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClassValue&lt;/code&gt; class coming with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API34&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Back APIs&lt;/code&gt; are now strengthened by built-in animations and support for custom ones.&lt;/li&gt;
  &lt;li&gt;Making the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ForegroundService&lt;/code&gt; type explicit is now mandatory, if the implementation was already properly done back in the Android 10 days when it was introduced, congratulations, nothing to do here.&lt;/li&gt;
  &lt;li&gt;Foreground services are also encouraged to be migrated to user-initiated jobs. A new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RUN_USER_INITIATED_JOBS&lt;/code&gt; permission is introduced and new methods on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JobInfo&lt;/code&gt; builder allow to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userInitiated()&lt;/code&gt; status along with the estimated amount of bytes the job will expect from the network. Scheduling the job is now done with the app foregrounded and the notification icon system remains the same so the user knows something is going on even if the app is backgrounded post launch.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;battery-and-performance&quot;&gt;Battery and performance&lt;/h3&gt;

&lt;p&gt;Without a single ounce of surprise, Google continues its effort to improve battery life and takes steps towards sanctioning bad actors that publish battery-draining or unstable apps.
Today, not crashing is no longer enough, developers should take steps to push their app to their full potential and that means power management and performance monitoring.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bad behaviours like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANRs (screen freezes)&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;background crashes&lt;/code&gt; now more aggressively flag the guilty apps and put them at the bottom of the priority list where apps are fighting for resources, meaning they’ll also be the first to go if the system needs some. No more filtering out &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANRs&lt;/code&gt; and non-fatal crashes on Crashlytics, everything matters now.&lt;/li&gt;
  &lt;li&gt;While on the subject of fighting for resources, let’s also note that now, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context-registered broadcasts&lt;/code&gt; are now queued when the app is backgrounded and the system will deliver them when the app is awake or system conditions allow it.&lt;/li&gt;
  &lt;li&gt;Another change to the cached state (aka when the app is backgrounded) impacts background tasks that can no longer be triggered unless one of the app components is awake. This change pushes devs to use framework’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JobScheduler&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt; more as they aren’t impacted by this change.&lt;/li&gt;
  &lt;li&gt;Still with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jobscheduler&lt;/code&gt;, jobs don’t just fail silently anymore if they don’t respond in time but trigger an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANR&lt;/code&gt;, it is advised to move to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt; with its out of the box async support.&lt;/li&gt;
  &lt;li&gt;If a job requires a special network state to be triggered, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACCESS_NETWORK_STATE&lt;/code&gt; permission is now mandatory. Without it, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SecurityException&lt;/code&gt; will be raised.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Intents&lt;/code&gt; keep getting more and more headache prone as the implicit and pending intents now can only be delivered to exported components. If you need to reach an unexported component, explicit intent is your go-to solution. Note that mutable pending intents now need to specify a component or it will throw an exception.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;notifications&quot;&gt;Notifications&lt;/h3&gt;

&lt;p&gt;Finding the right balance between informative presence and in-your-face nuisance has always been a challenge for notifications and it seems Google keeps pushing to make them less invasive and easier for the user to dismiss or delay them.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fullscreen Intent&lt;/code&gt; notifications that we see when our clock rings or when we receive a phone call are luckily already rarely used.
They are now more restricted and available only to apps declaring &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Call&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alarm&lt;/code&gt; features, meaning we shouldn’t see bad actors abusing this feature that would allow them to bypass the lock screen amongst other things.&lt;/li&gt;
  &lt;li&gt;Non-dismissible &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foreground notifications&lt;/code&gt; are now dismissible in some cases but will remain non-dismissible
    &lt;ul&gt;
      &lt;li&gt;on top of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lock Screen&lt;/code&gt; to prevent it from being swiped by anyone accessing a device behind the owner’s back.&lt;/li&gt;
      &lt;li&gt;from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Clear all&lt;/code&gt; feature to prevent misclicks.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;privacy-and-security&quot;&gt;Privacy and security&lt;/h3&gt;

&lt;p&gt;This is, once again without surprise, where a lot of the changes happen and it is aligned with Google’s vision and goals when it comes to give users back the control of their data and permissions.
Some of them seem so obvious that it’s surprising to see them in action only now. Maybe the EU pressure with GDPR starts to pay off? Maybe…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Android 14 introduces new places where the data sharing purposes are displayed. Until now, we could only check them from the PlayStore app page. 
Now, it will also be displayed in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime permission popups&lt;/code&gt;, starting with those related to location to remind why the data is necessary and with whom it will be shared.&lt;/li&gt;
  &lt;li&gt;It will now be impossible to install apps that don’t target at least the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API 23&lt;/code&gt; to prevent bad actors from exploiting security breaches discovered inside older Android versions.
Be aware that installed apps won’t be removed and the system won’t warn you when starting one of those apps, maybe a new feature for Android 15?&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dynamic Code Loading&lt;/code&gt; now requires to flag the file as read-only to avoid any tampering or code injection. In any case, DCL should be avoided when possible and only trusted files should obviously be loaded this way.&lt;/li&gt;
  &lt;li&gt;When saving a file inside the app storage, the system attributes to the file an owner id, this id being the app package name that saved it. 
This feature allows apps to know which file they can open without requesting the external read permission. The issue was that by querying this id, other apps could access the owner ids that weren’t them and deducting the owner’s installed apps list. 
To fix this, the name is now redacted, increasing again a little bit the user data protection, the list of the installed apps being considered a sensitive data by Google.&lt;/li&gt;
  &lt;li&gt;If an app features &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;screen&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;audio recording&lt;/code&gt;, it is now required to be granted the user consent to do so before each session start and therefore be able to handle permission denied scenarios.&lt;/li&gt;
  &lt;li&gt;Zip files are also impacted as a fixed vulnerability with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path transversal reading&lt;/code&gt; now triggers an exception if some characters are found inside it. (Contains &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;..&lt;/code&gt; Or starts with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Even though already required, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BLUETOOTH_CONNECT&lt;/code&gt; permission was not yet enforced to access the profile state, it is now the case.&lt;/li&gt;
  &lt;li&gt;Users are no more required to grant access to all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;images&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;videos&lt;/code&gt; to share or display a single media, Android 14 now upgrades the permission popup with an option to select only the media the app is allowed to access.&lt;/li&gt;
  &lt;li&gt;Apps can now react to a user &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;screenshot&lt;/code&gt; event, they can’t manipulate the content but developers can now add a callback bound to the activity lifecycle. 
Sensitive screens should still be protected with the secure flag.&lt;/li&gt;
  &lt;li&gt;Starting activities from the background with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending intent&lt;/code&gt; or through another app in the foreground now requires the app to opt-in to this feature inside said activity and is no longer a default behaviour.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;accessibility&quot;&gt;Accessibility&lt;/h3&gt;

&lt;p&gt;It is no secret that mobile devices are now owned by more and more people every year, which includes people with a range of disabilities or personalities that may make an app usage more challenging.
Android 14 helps them with new and upgraded features to ease their journey with a mobile device.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A step is taken towards low-vision users’ direction, the changes and impacts to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;font scaling&lt;/code&gt; should be negligible to developers already properly using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SP&lt;/code&gt; as their size units but a full testing pass with the scaling enabled should be scheduled to be safe and tweak improvable screens.&lt;/li&gt;
  &lt;li&gt;New tools inside Android studio are added to help developers handling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;per-app language&lt;/code&gt; more efficiently and easily.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Grammatical Inflection API&lt;/code&gt; is introduced, offering developers working on apps with gendered languages new tools. It adds a layer of complexity to the strings files by having three gender-files by gendered language. In those files are added only the strings affected by gender inflections like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vous êtes déconnecté&lt;/code&gt; for masculine, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vous êtes déconnectée&lt;/code&gt; for feminine or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;La déconnection est effective&lt;/code&gt; for neutral in french. More work for developers and translators but an overall better experience for users.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;All in all, Android 14 is an update faithful to the Google roadmap. 
Users today are very different than users 10 years ago. They care more about their data and their privacy; the Mobile ecosystem and business is also a lot more professional.
It’s important for us developers to be aware of those changes in order to continuously improve the experience, be it related to our core business or simply to keep the user engaged in a safe environment.&lt;/p&gt;

&lt;p&gt;When this article is released, Android 14 should be freshly out and developer teams hands deep in the migration tasks.
I hope you enjoyed the information and see you soon for more Android related articles!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/about/versions/14/behavior-changes-all&quot;&gt;Changes potentially affecting all apps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/about/versions/14/behavior-changes-14&quot;&gt;Changes affecting apps targetting Android 14&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/about/versions/14/features&quot;&gt;New features introduced by Android 14&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/sdk/api_diff/34/changes&quot;&gt;APIs changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/about/versions/14/summary&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>[&quot;c_goffoy&quot;]</name></author><category term="android" /><category term="mobile" /><category term="google" /><category term="14" /><summary type="html">Here’s what it means for users and developers.</summary></entry><entry><title type="html">Comment faire de votre vie un BlackFriday permanent #LFT 24/11/23</title><link href="https://tech.bedrockstreaming.com/comment-faire-de-votre-vie-un-blackfriday-permanent" rel="alternate" type="text/html" title="Comment faire de votre vie un BlackFriday permanent #LFT 24/11/23" /><published>2023-11-24T00:00:00+00:00</published><updated>2023-11-24T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/comment-faire-de-votre-vie-un-blackfriday-permanent</id><content type="html" xml:base="https://tech.bedrockstreaming.com/comment-faire-de-votre-vie-un-blackfriday-permanent">&lt;blockquote&gt;
  &lt;p&gt;A travers ce talk, j’aimerai vous initier à l’intérêt de la négociation et les différentes techniques que l’on peut utiliser pour bien négocier.
L’idée est de vous donner des clés simples et efficaces pour aborder une situation fréquente qui peut parfois être source de stress ou de tensions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Par &lt;strong&gt;Thomas Sontag&lt;/strong&gt;&lt;/p&gt;</content><author><name>Thomas Sontag</name></author><category term="lft" /><summary type="html">A travers ce talk, j’aimerai vous initier à l’intérêt de la négociation et les différentes techniques que l’on peut utiliser pour bien négocier. L’idée est de vous donner des clés simples et efficaces pour aborder une situation fréquente qui peut parfois être source de stress ou de tensions.</summary></entry><entry><title type="html">Comment ne pas jeter son application Frontend tout les deux ans ? #LFT 24/11/23</title><link href="https://tech.bedrockstreaming.com/comment-ne-pas-jeter-son-application-frontend-tout-les-deux-ans" rel="alternate" type="text/html" title="Comment ne pas jeter son application Frontend tout les deux ans ? #LFT 24/11/23" /><published>2023-11-24T00:00:00+00:00</published><updated>2023-11-24T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/comment-ne-pas-jeter-son-application-frontend-tout-les-deux-ans</id><content type="html" xml:base="https://tech.bedrockstreaming.com/comment-ne-pas-jeter-son-application-frontend-tout-les-deux-ans">&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Bonnes pratiques pour la maintenance d’une application web&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Refaire son front tous les 2 ans, c’est devenu une pratique plutôt courante dans tous les projets. Tous ? Non, chez Bedrock streaming, nous avons choisi de rester sur la même codebase et ça depuis plus de 7 ans! En plus, ce n’est pas une petite application puisqu’il s’agit de 6play et de salto.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Vous pourriez vous dire: &lt;em&gt;“Oh les pauvres, maintenir une application vieille de presque 10 ans ça doit être un enfer !”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rassurez-vous, ce n’est pas le cas ! Nous avons tous travaillé sur des projets bien moins vieux mais sur lesquels le développement de nouvelles fonctionnalités était bien plus pénible. &lt;strong&gt;Quel est notre secret ? C’est ce que vous allez découvrir pendant ce talk.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Automatisation des tâches courantes, gestion de la dette, testing et architecture seront des sujets abordés.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Par &lt;strong&gt;Florent Dubost &amp;amp; Antoine Caron&lt;/strong&gt;&lt;/p&gt;</content><author><name>[&quot;f_dubost&quot;, &quot;a_caron&quot;]</name></author><category term="lft" /><category term="tech" /><summary type="html">Bonnes pratiques pour la maintenance d’une application web</summary></entry><entry><title type="html">Jeux vidéo, websocket et binaire: temps réel efficace pour navigateur #LFT 24/11/23</title><link href="https://tech.bedrockstreaming.com/jeux-video-websocket-et-binaire-temps-reel-efficace-pour-navigateur" rel="alternate" type="text/html" title="Jeux vidéo, websocket et binaire: temps réel efficace pour navigateur #LFT 24/11/23" /><published>2023-11-24T00:00:00+00:00</published><updated>2023-11-24T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/jeux-video-websocket-et-binaire-temps-reel-efficace-pour-navigateur</id><content type="html" xml:base="https://tech.bedrockstreaming.com/jeux-video-websocket-et-binaire-temps-reel-efficace-pour-navigateur">&lt;blockquote&gt;
  &lt;p&gt;Connaissez vous les websockets ? La techno idéale pour coder des expériences temps réel dans le navigateur et que j’utilise dans tout mes projets collaboratifs et jeux multijoueur ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Je vous propose de nous intéresser à son fonctionnement, et à la façon dont on peut mettre en place cette communication client/serveur performante, en échangeant directement en binaire.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;On s’amusera à les voir prendre vie tous ensemble dans une démo live…en GO !&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Par &lt;strong&gt;Thomas Jarrand&lt;/strong&gt;&lt;/p&gt;</content><author><name>Thomas Jarrand</name></author><category term="lft" /><category term="tech" /><summary type="html">Connaissez vous les websockets ? La techno idéale pour coder des expériences temps réel dans le navigateur et que j’utilise dans tout mes projets collaboratifs et jeux multijoueur ?</summary></entry><entry><title type="html">Le futur du web est sur la périphérie du réseau #LFT 24/11/23</title><link href="https://tech.bedrockstreaming.com/le-futur-du-web-est-sur-la-peripherie-du-reseau" rel="alternate" type="text/html" title="Le futur du web est sur la périphérie du réseau #LFT 24/11/23" /><published>2023-11-24T00:00:00+00:00</published><updated>2023-11-24T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/le-futur-du-web-est-sur-la-peripherie-du-reseau</id><content type="html" xml:base="https://tech.bedrockstreaming.com/le-futur-du-web-est-sur-la-peripherie-du-reseau">&lt;blockquote&gt;
  &lt;p&gt;Le mot est apparu sur toutes les documentations ces derniers mois : les cloud providers comme Vercel, Netlify ou AWS proposent leur version des “Edge Functions”, alors que les frameworks Javascript comme Next, Nuxt ou encore Astro mettent en avant leur support des “Edge API Routes” ou du “SSR on the Edge”. Mais qu’est-ce donc que tout cela ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;À l’instar des CDNs pour les fichiers statiques, ce nouveau paradigme consiste à exécuter le code serveur au plus près des utilisateurs (“the Edge”). On peut ainsi obtenir du contenu dynamique à la vitesse du statique, avec des usages comme le SSR, l’authentification ou l’A/B Testing à la périphérie du réseau.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Je vous propose de découvrir, chiffres à l’appui, les performances que l’on peut atteindre sur certains cas d’utilisation, et les situations dans lesquelles il n’est au contraire pas intéressant de l’utiliser. Avec ça, plus d’excuses si votre site n’est pas “blazing fast”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Par &lt;strong&gt;Julien Sulpis&lt;/strong&gt;&lt;/p&gt;</content><author><name>Julien Sulpis</name></author><category term="lft" /><category term="tech" /><summary type="html">Le mot est apparu sur toutes les documentations ces derniers mois : les cloud providers comme Vercel, Netlify ou AWS proposent leur version des “Edge Functions”, alors que les frameworks Javascript comme Next, Nuxt ou encore Astro mettent en avant leur support des “Edge API Routes” ou du “SSR on the Edge”. Mais qu’est-ce donc que tout cela ?</summary></entry><entry><title type="html">STOP à l’espionnage ! Comment disparaître d’internet ? #LFT 24/11/23</title><link href="https://tech.bedrockstreaming.com/stop-a-l-espionnage-comment-disparaitre-d-internet" rel="alternate" type="text/html" title="STOP à l’espionnage ! Comment disparaître d’internet ? #LFT 24/11/23" /><published>2023-11-24T00:00:00+00:00</published><updated>2023-11-24T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/stop-a-l-espionnage-comment-disparaitre-d-internet</id><content type="html" xml:base="https://tech.bedrockstreaming.com/stop-a-l-espionnage-comment-disparaitre-d-internet">&lt;blockquote&gt;
  &lt;p&gt;Vous en avez marre de vous sentir traqué sur Internet ? 😒 Nous aussi ! Mais est-il réellement possible de nos jours de devenir un véritable ninja digital ? 🥷🏻 Et si pour protéger votre vie privée en ligne, il fallait tout d’abord comprendre qui a accès à vos données et ce qu’ils peuvent faire avec ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nous allons vous apprendre comment être un vrai pro de la confidentialité et de la sécurité des données, mais surtout comment devenir anonyme en ligne et éviter les curieux… 👀 Sortez vos loupes et suivez-nous dans cette enquête pour reprendre le contrôle de votre vie numérique !&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Et si vous êtes chanceux, nous vous dévoilerons peut-être quelques secrets de ninja pour échapper aux espions ! Venez nous rejoindre et apprenez comment devenir le maître du camouflage numérique ! 😶‍🌫️&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Par &lt;strong&gt;Etienne Idoux &amp;amp; Mickaël Alves&lt;/strong&gt;&lt;/p&gt;</content><author><name>[&quot;e_idoux&quot;, &quot;m_alves&quot;]</name></author><category term="lft" /><category term="tech" /><summary type="html">Vous en avez marre de vous sentir traqué sur Internet ? 😒 Nous aussi ! Mais est-il réellement possible de nos jours de devenir un véritable ninja digital ? 🥷🏻 Et si pour protéger votre vie privée en ligne, il fallait tout d’abord comprendre qui a accès à vos données et ce qu’ils peuvent faire avec ?</summary></entry><entry><title type="html">Swift Concurrency in a Nutshell</title><link href="https://tech.bedrockstreaming.com/2023/11/14/swift-concurrency-in-a-nutshell.html" rel="alternate" type="text/html" title="Swift Concurrency in a Nutshell" /><published>2023-11-14T00:00:00+00:00</published><updated>2023-11-14T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2023/11/14/swift-concurrency-in-a-nutshell</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2023/11/14/swift-concurrency-in-a-nutshell.html">&lt;p&gt;As modern apps grow in complexity and features, the need for multitasking to enhance the user experience becomes evident. Whether processing large datasets or querying multiple systems over the network, concurrency is essential.&lt;/p&gt;

&lt;p&gt;This article presents a concise, yet comprehensive overview of Swift’s Concurrency, highlighting its key features and core concepts. Swift’s approach to concurrency provides several benefits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simplified code that’s easier to reason about and maintain&lt;/li&gt;
  &lt;li&gt;A noticeable reduction in bugs and performance issues&lt;/li&gt;
  &lt;li&gt;Ensured app responsiveness&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before delving into Swift’s concurrency paradigms,  let’s familiarize ourselves with foundational terminology.&lt;/p&gt;

&lt;h4 id=&quot;concurrency&quot;&gt;Concurrency&lt;/h4&gt;

&lt;p&gt;Concurrency is about structuring your code so that tasks can be executed independently. It provides mechanisms for synchronization, communication, and coordination between units of work to avoid race conditions and ensure proper execution. However, concurrency doesn’t imply parallel execution; the actual mode of execution is determined separately.&lt;/p&gt;

&lt;p&gt;Designing your code effectively for concurrency makes adding parallelism nearly free.&lt;/p&gt;

&lt;h4 id=&quot;parallelism&quot;&gt;Parallelism&lt;/h4&gt;

&lt;p&gt;Parallelism is the simultaneous execution of tasks across multiple processing units, guaranteeing genuine concurrent progression of operations. It’s a specific form of concurrency where tasks are actually executed at the same time.&lt;/p&gt;

&lt;h4 id=&quot;structured-concurrency&quot;&gt;Structured Concurrency&lt;/h4&gt;

&lt;p&gt;Traditionally, developers had to manually manage &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;threads&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locks&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;callbacks&lt;/code&gt;, leading to code that is difficult to manage and error prone. Even with a lot of discipline, it was really hard to get right as the cognitive load was so high.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Structured concurrency&lt;/strong&gt; is a programming paradigm providing a higher level of abstraction, allowing you to manage concurrency in a structured and organized way. It simplifies the task management and their dependencies, making it easier to write correct and efficient concurrent code.&lt;/p&gt;

&lt;h2 id=&quot;swift-concurrency&quot;&gt;Swift Concurrency&lt;/h2&gt;

&lt;p&gt;One prime objective of Swift is safety, by removing &lt;strong&gt;undefined behaviors&lt;/strong&gt; such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null pointer&lt;/code&gt;, array &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;out-of-bounds&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;integer overflows&lt;/code&gt;. Until recently, multithreading remained a weak spot in Swift’s safety features. Developers had to rely on &lt;a href=&quot;https://developer.apple.com/documentation/DISPATCH&quot;&gt;Grand Central Dispatch&lt;/a&gt;, which wasn’t inherently designed to help with concurrency-related pitfalls like &lt;a href=&quot;https://tclementdev.com/posts/what_went_wrong_with_the_libdispatch.html&quot;&gt;thread explosion&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Swift Concurrency&lt;/strong&gt; fills this gap, enhancing the language’s overall safety by integrating the &lt;strong&gt;Task&lt;/strong&gt; abstraction from Structured Concurrency, the &lt;strong&gt;async/await&lt;/strong&gt; pattern and &lt;strong&gt;Actors&lt;/strong&gt; for data isolation.&lt;/p&gt;

&lt;h3 id=&quot;task&quot;&gt;Task&lt;/h3&gt;

&lt;p&gt;With Swift Concurrency, Tasks become the primary unit of work and offer three core functionalities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Carry scheduling information such as priority&lt;/li&gt;
  &lt;li&gt;Act as handles for task management&lt;/li&gt;
  &lt;li&gt;Hold user-defined and task-local data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These attributes make tasks the cornerstone that guides the execution model in running, prioritizing, and suspending or canceling jobs. &lt;strong&gt;Every asynchronous function operates within a task&lt;/strong&gt;. Tasks also serve as the entry point for synchronous functions to execute asynchronous code.&lt;/p&gt;

&lt;h4 id=&quot;child-tasks&quot;&gt;Child Tasks&lt;/h4&gt;

&lt;p&gt;A child task is a task spawned by another task, known as the parent task. Child tasks inherit some properties from their parent, such as priority levels, but are their own individual units of work that can be scheduled independently. One important characteristic of child tasks is their lifetime is tied to their parent task; if the parent task is cancelled, all its child tasks are also cancelled. This ensures a structured way to manage and reason about concurrent tasks in your code. However, cancellations do not propagate upward, requiring parent tasks to manually check the status of their child tasks.&lt;/p&gt;

&lt;p&gt;Child Tasks are created using &lt;strong&gt;Task Groups&lt;/strong&gt; as we will see later.&lt;/p&gt;

&lt;h3 id=&quot;async--await&quot;&gt;async / await&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; pattern simplifies asynchronous code development, allowing a sequential-like structure, akin to traditional synchronous functions.&lt;/p&gt;

&lt;p&gt;Use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt; keyword to mark functions that perform asynchronous work.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performRemoteOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ResultType&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; keyword indicates potential &lt;strong&gt;suspension points&lt;/strong&gt; in your code, which are necessary for running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt; functions. These markers also offer developers insight into the behavior and control flow of asynchronous operations. At these suspension points, the system can pause the current task to await the completion of an asynchronous operation.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processRemoteData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performRemoteOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// waiting for performRemoteOperation() to complete&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;error-propagation&quot;&gt;Error propagation&lt;/h4&gt;

&lt;p&gt;As you may have noticed in the previous examples, Swift’s concurrency model seamlessly integrates with the language’s native &lt;strong&gt;error-handling mechanism&lt;/strong&gt;. This brings several advantages over the old completion-based concurrency:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Clarity:&lt;/strong&gt; Errors are propagated in a way that is consistent with how they are handled in synchronous Swift code. This means you don’t have to learn a new error-handling paradigm when moving to concurrent code.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Safety:&lt;/strong&gt; Because errors can be propagated and caught, you can handle exceptional conditions gracefully, making your concurrent code more robust.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Maintainability:&lt;/strong&gt; With explicit error types and propagation, debugging and maintaining concurrent code becomes easier. You can clearly understand what types of errors your asynchronous functions can throw and handle them appropriately.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;actors&quot;&gt;Actors&lt;/h3&gt;

&lt;p&gt;Swift’s &lt;strong&gt;Structured Concurrency&lt;/strong&gt; is designed to address data races in concurrency for functions and closures. However, working concurrently usually involve dealing with &lt;strong&gt;shared mutable state&lt;/strong&gt;, requiring tedious manual synchronization.&lt;/p&gt;

&lt;p&gt;To address this, Swift introduces &lt;strong&gt;Actors&lt;/strong&gt;, a new &lt;strong&gt;reference type&lt;/strong&gt; designed to encapsulate states within a specific concurrency domain, ensuring &lt;strong&gt;data isolation&lt;/strong&gt; and &lt;strong&gt;thread-safe&lt;/strong&gt; operations. Actors not only enhances safety and efficiency but also align with Swift’s established patterns and features.&lt;/p&gt;

&lt;p&gt;To create an Actor, just use the keyword &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;actor&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MessageThread&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;playerTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;playerTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;previousMessages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playerTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playerTag&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previousMessages&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Actors are similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt;, the main difference is that they protect their mutable data from data races by implementing &lt;strong&gt;Actor Isolation&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;actor-isolation&quot;&gt;Actor Isolation&lt;/h4&gt;

&lt;p&gt;Actor Isolation enforces that any mutable properties managed by an actor can only be modified using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MessageThread&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MessageThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// error: trying to access another actor mutable property&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playerTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// works fine as read only&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the example above, the compiler complains when trying to modify the mutable property of another actor (cross-actor reference). However, accessing read-only properties poses no issue.&lt;/p&gt;

&lt;p&gt;To address this, you can introduce another function allowing the other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MessageThread&lt;/code&gt; actor to modify its own state.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MessageThread&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MessageThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With these modifications:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;send&lt;/code&gt; function is now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt;, because of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; suspension point required to call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;receive&lt;/code&gt; function in the other actor’s asynchronous context.&lt;/li&gt;
  &lt;li&gt;While the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;receive&lt;/code&gt; function isn’t explicitly marked as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt; (since it doesn’t have suspension points and operates synchronously), actor isolation in Swift ensures functions behave as implicitly &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt; when invoked from outside their own actor’s context.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Actors&lt;/strong&gt; ensure safe execution by maintaining their own dedicated serial &lt;strong&gt;executor&lt;/strong&gt; internally. Messages sent to an actor are termed &lt;strong&gt;partial tasks&lt;/strong&gt;. While processing these tasks, the order of their execution is not strictly guaranteed, as priorities of partial tasks influence the sequence in which they are tackled.&lt;/p&gt;

&lt;p&gt;Lastly, you can do a cross-actor reference on a mutable property with an asynchronous call as long as it’s read only.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMessages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MessageThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// works&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;sendable&quot;&gt;Sendable&lt;/h4&gt;

&lt;p&gt;Finally, to make Actors truly isolated we need to prevent cross-actor references from inadvertently sharing mutable state. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sendable&lt;/code&gt; protocol was introduced to ensure that types shared across actor boundaries don’t introduce data races. This protocol doesn’t provide or dictate specific code behavior, but is leveraged by the compiler to ensure the safety of the concurrent code.&lt;/p&gt;

&lt;p&gt;Here are types that can conform to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sendable&lt;/code&gt; (some implicitely do):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Value types&lt;/li&gt;
  &lt;li&gt;Actors&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;final&lt;/code&gt; classes with immutable and sendable properties (and without superclass).&lt;/li&gt;
  &lt;li&gt;Functions and closures when using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Sendable&lt;/code&gt; attribute.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a detailed explanation, please refer to the official &lt;a href=&quot;https://developer.apple.com/documentation/swift/sendable&quot;&gt;Apple documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;global-actor&quot;&gt;Global Actor&lt;/h4&gt;

&lt;p&gt;Global actors are Actors providing a way to extend actor isolation to &lt;strong&gt;global and static variables&lt;/strong&gt;, safeguarding them from concurrent access issues. Global actor can be referenced from anywhere in the program. A common global actor is the &lt;strong&gt;MainActor&lt;/strong&gt; which allows you to execute your code on the main thread.&lt;/p&gt;

&lt;h2 id=&quot;in-practice&quot;&gt;In Practice&lt;/h2&gt;

&lt;p&gt;Theory covered, let’s dive into practical use-cases.&lt;/p&gt;

&lt;h3 id=&quot;call-async-functions-sequentially&quot;&gt;Call Async Functions Sequentially&lt;/h3&gt;

&lt;p&gt;While calling functions sequentially is straightforward in synchronous code, achieving the same in asynchronous code used to be cumbersome, often leading to the &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md#problem-1-pyramid-of-doom&quot;&gt;Pyramid of doom&lt;/a&gt;. Swift’s concurrency model radically simplifies this by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async/await&lt;/code&gt; paradigm.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UserInfo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchImg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ProfileImage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchAct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UserActivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;saveDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ProfileImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UserActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;backupUserProfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchImg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;act&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchAct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;saveDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; ensures each async function completes before the next starts. This sequential execution offers the readability of synchronous code while retaining the benefits of asynchronicity.&lt;/p&gt;

&lt;h3 id=&quot;call-async-functions-in-parallel&quot;&gt;Call Async Functions in Parallel&lt;/h3&gt;

&lt;p&gt;When async functions are independent, running them in parallel can save time.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async let&lt;/code&gt; allows you to achieve this with minimal code changes. Consider the previous example, modified to execute tasks concurrently:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;backupUserProfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchImg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;act&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchAct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;saveDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Await the results of async let tasks&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async let&lt;/code&gt; spawns child tasks, sets placeholders on the variables, and allows the code to continue running until it needs the results, which are obtained using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; at the end of the function.&lt;/p&gt;

&lt;h3 id=&quot;call-async-functions-from-a-synchronous-function&quot;&gt;Call Async Functions from a Synchronous Function&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; serves as a bridge between synchronous and asynchronous code, enabling you to use async-await without requiring the entire function chain to be asynchronous.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onSavePressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;backupUserProfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error backing up profile: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localizedDescription&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;An alternative is &lt;a href=&quot;https://developer.apple.com/documentation/swift/task/detached(priority:operation:)-8a4p6&quot;&gt;Task.detached&lt;/a&gt;. This creates a new top-level task and decouples it from its originating context, allowing it to operate on a different Actor and with a different priority. A typical scenario involves initiating a task from the main thread to execute it on a different thread.&lt;/p&gt;

&lt;h4 id=&quot;terminology-unstructured-concurrency&quot;&gt;Terminology: Unstructured Concurrency&lt;/h4&gt;

&lt;p&gt;Creating a standalone &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; is known as an &lt;strong&gt;Unstructured Task&lt;/strong&gt;, as it lacks both a parent task and child tasks.&lt;/p&gt;

&lt;p&gt;Unstructured Tasks are useful for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Calling a task from a non-async context&lt;/li&gt;
  &lt;li&gt;Tasks that must persist beyond a specific scope&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: Swift’s use of the terms &lt;strong&gt;Structured&lt;/strong&gt; and &lt;strong&gt;Unstructured Concurrency&lt;/strong&gt; relates only to the hierarchy of Tasks and should not be confused with the broader concept of &lt;a href=&quot;#structured-concurrency&quot;&gt;Structured Concurrency&lt;/a&gt; described in the introduction.&lt;/p&gt;

&lt;p&gt;Quoting the &lt;a href=&quot;https://docs.swift.org/swift-book/documentation/the-swift-programming-language/concurrency/#Tasks-and-Task-Groups&quot;&gt;swift documentation&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Structured concurrency&lt;/strong&gt;: Tasks arranged in a hierarchy. Each task in a task group has the same parent task, and each task can have child tasks. Although you take on some of the responsibility for correctness, the explicit parent-child relationships between tasks let Swift handle some behaviors like propagating cancellation for you, and lets Swift detect some errors at compile time.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Unstructured concurrency&lt;/strong&gt;: Unlike tasks that are part of a task group, an &lt;em&gt;unstructured task&lt;/em&gt; doesn’t have a parent task. You have complete flexibility to manage unstructured tasks in whatever way your program needs, but you’re also completely responsible for their correctness.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;parallel-processing-with-task-groups&quot;&gt;Parallel Processing with Task Groups&lt;/h3&gt;

&lt;p&gt;While &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async let&lt;/code&gt; may suffice for handling a limited number of tasks, Task Groups are recommended when a structured approach to parallelism is desired. Here’s an example that employs Task Groups along with an accumulator to safely process an array of data in parallel.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;processedData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withTaskGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;returning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taskGroup&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 	
    &lt;span class=&quot;c1&quot;&gt;// Create a new Task within the Task Group for each item   &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;taskGroup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Create a new Task within the Task Group&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;allData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Asynchronously collect the task results as they complete&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taskGroup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;allData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allData&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code initializes a Task Group and spawns a child task for each item with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.background&lt;/code&gt; priority. Then an &lt;a href=&quot;https://developer.apple.com/documentation/swift/asyncsequence&quot;&gt;AsyncSequence&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for await&lt;/code&gt; loop asynchronously collects and stores the task results in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allData&lt;/code&gt; accumulator as they complete.&lt;/p&gt;

&lt;h4 id=&quot;cooperative-cancellation&quot;&gt;Cooperative Cancellation&lt;/h4&gt;

&lt;p&gt;To enable cancellation within Task Groups, tasks must be built for &lt;strong&gt;Cooperative Cancellation&lt;/strong&gt;, which means the task periodically checks whether it should terminate early. Two methods can be used to check if a task has been cancelled:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try Task.checkCancellation()&lt;/code&gt; throws an error if the current Task is cancelled..&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if Task.isCancelled { break }&lt;/code&gt; returns true if the Task is cancelled. Note that this approach might produce partial outputs, which should be documented.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;taskGroup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isCancelled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Return empty or default Data&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;reference-and-cancel-a-task&quot;&gt;Reference and Cancel a Task&lt;/h3&gt;

&lt;p&gt;Until now, we’ve only used tasks for running isolated asynchronous operations. However, there are scenarios where maintaining a task reference for potential cancellation is beneficial, as shown in the following static sales dashboard example.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SalesDataViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;processingTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Never&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewWillAppear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewWillAppear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processingTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;processingTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rawData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchSales&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
              	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;chartData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showChartData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chartData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;handleError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;processingTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidDisappear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidDisappear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;processingTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;processingTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesDataViewController&lt;/code&gt; class, we create and keep a reference to a new Task for fetching and processing sales data. If the user exits the view before the task completes, the task is canceled, preventing task accumulation during repeated view transitions.&lt;/p&gt;

&lt;h3 id=&quot;convert-completion-based-api-to-async-functions-with-continuation&quot;&gt;Convert completion based API to async functions with Continuation&lt;/h3&gt;

&lt;p&gt;Sometimes you encounter legacy APIs not designed to work with Swift’s Concurrency model, often the case with Objective-C-based APIs. Swift offers a solution via &lt;a href=&quot;https://developer.apple.com/documentation/swift/checkedcontinuation&quot;&gt;Continuation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Continuation wraps old-style block-based code and adapts it for use in an async function. This enables you to return values or throw errors within that function. Here’s how to apply this with HealthKit as an example:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HealthKit&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getWorkouts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HKWorkout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withCheckedThrowingContinuation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continuation&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HKSampleQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;sampleType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HKObjectType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;workoutType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;predicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HKObjectQueryNoLimit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;sortDescriptors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;continuation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;throwing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HealthError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HKWorkout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;continuation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;throwing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HealthError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrongType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;continuation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;returning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;HKHealthStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Always ensure to resume a Continuation &lt;strong&gt;exactly once&lt;/strong&gt;; failing to do so can lead to indefinite suspension of the task, resulting in a &lt;strong&gt;memory leak&lt;/strong&gt;, as per Apple’s guidelines. Resuming multiple times is considered &lt;strong&gt;undefined behavior&lt;/strong&gt; and should be avoided.&lt;/p&gt;

&lt;h3 id=&quot;executing-async-code-on-main-thread-with-mainactor&quot;&gt;Executing Async Code on Main Thread with MainActor&lt;/h3&gt;

&lt;p&gt;You can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MainActor&lt;/code&gt; to execute code on the main thread via three ways:&lt;/p&gt;

&lt;h4 id=&quot;annotate-your-code-with-mainactor&quot;&gt;Annotate your code with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@MainActor&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Apply the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@MainActor&lt;/code&gt; attribute to properties, functions and classes.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@MainActor&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Update occurs on the main thread&lt;/span&gt;
  
    &lt;span class=&quot;kd&quot;&gt;@MainActor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateUI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// this is now called on the main thread&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// class properties and functions are now run on the MainActor&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@MainActor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;
  
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateUI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;use-mainactor-in-task-closures&quot;&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@MainActor&lt;/code&gt; in Task closures&lt;/h4&gt;

&lt;p&gt;Incorporate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@MainActor&lt;/code&gt; within a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; to switch its execution context to the main thread.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@MainActor&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;// Code runs on the main thread&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;use-mainactorrun&quot;&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MainActor.run&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MainActor.run&lt;/code&gt; within any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; or asynchronous function to force main-thread execution.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchAndProcessData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MainActor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Executed on main thread&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateUI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;tips-and-pitfalls&quot;&gt;Tips and pitfalls&lt;/h2&gt;

&lt;h3 id=&quot;task-cheat-sheet&quot;&gt;Task Cheat sheet&lt;/h3&gt;

&lt;p&gt;For quick reference, here’s a table taken from &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2021/10134/&quot;&gt;Explore structured concurrency in Swift&lt;/a&gt; WWDC session.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Launched by&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Launchable from&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Lifetime&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Cancellation&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Inherits from origin&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;async-let tasks&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async let x&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;async functions&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;scoped to statement&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;automatic&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;priority, task-local values&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Group tasks&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;group.async&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;withTaskGroup&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;scoped to task group&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;automatic&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;priority, task-local values&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Unstructured tasks&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;anywhere&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;unscoped&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;priority, task-local values, actor&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Detached tasks&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task.detached&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;anywhere&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;unscoped&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;nothing&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;async-protocol-conformance&quot;&gt;Async Protocol Conformance&lt;/h3&gt;

&lt;p&gt;When defining a protocol with async functions, you can &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md#protocol-conformance&quot;&gt;conform to the protocol&lt;/a&gt; by implementing a synchronous function too.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TypeA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TypeB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// also valid&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;reentrancy&quot;&gt;Reentrancy&lt;/h3&gt;

&lt;p&gt;In Swift concurrency, &lt;a href=&quot;https://en.wikipedia.org/wiki/Reentrancy_(computing)&quot;&gt;Reentrancy&lt;/a&gt; refers to the situation where a suspended block of code resumes execution at a later time. Upon resumption, the mutable state of your code is not guaranteed to remain the same as it was before suspension, posing potential risks of unintended side effects.&lt;/p&gt;

&lt;h4 id=&quot;task-suspension-and-unowned-references&quot;&gt;Task Suspension and Unowned References&lt;/h4&gt;

&lt;p&gt;In Swift’s concurrency model, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; strongly retains any reference to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt;, potentially extending the object’s lifecycle unexpectedly, especially if tasks remain active after their parent objects have been deallocated. To mitigate this, developers often employ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;weak self&lt;/code&gt;. However, introducing a suspension point using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; within a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; can reintroduce issues associated with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unowned&lt;/code&gt; references.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unowned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dataStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DataStorage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;refreshData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// temporarily retains self&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadDataFromDisk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataStorage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newData&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Safe&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, the code behaves as expected because it executes atomically. If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt; is available, it is temporarily retained, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newData&lt;/code&gt; is updated synchronously.&lt;/p&gt;

&lt;p&gt;However, introducing a suspension point can lead to issues similar to those encountered when neglecting to check for a weak &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unowned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dataStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DataStorage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;refreshData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// temporarily retains self&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;downloadData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// suspension point&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataStorage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newData&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// random crash&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, if the task suspends during the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt;, nothing prevents &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dataStorage&lt;/code&gt;’s owner from being deallocated. When the task resumes, attempting to access the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unowned&lt;/code&gt; property can result in a fatal error since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dataStorage&lt;/code&gt; is no longer in memory.&lt;/p&gt;

&lt;h4 id=&quot;actor-reentrancy&quot;&gt;Actor Reentrancy&lt;/h4&gt;

&lt;p&gt;Actor Reentrancy is a complex behavior that occurs when an actor method makes an asynchronous call, and while waiting for that call to complete, the actor processes other tasks. This can lead to unexpected states within the actor due to interleaved execution of its methods.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doLongProcessing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// suspension point&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Unpredictable output (1?)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process()&lt;/code&gt; is awaiting the completion of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doLongProcessing()&lt;/code&gt;, there’s an opportunity for another task to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;increment()&lt;/code&gt;. This undermines the expectation that an actor’s state remains consistent within a given method. So, the second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print(value)&lt;/code&gt; may output an unpredictable result, illustrating the challenge of managing mutable state in an actor with reentrant behavior.&lt;/p&gt;

&lt;h3 id=&quot;unintentional-task-inheritance&quot;&gt;Unintentional Task Inheritance&lt;/h3&gt;

&lt;p&gt;In Swift’s concurrency model, child tasks inherit the properties of their parent tasks by default, including priority levels and task-local values. Lack of awareness about this behavior can lead to unexpected outcomes, particularly when generating Tasks through SwiftUI modifiers, as demonstrated below.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Inherits properties (e.g., priority, executor) from the parent Task&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// The long job will execute on the main thread&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;longJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;detached&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userInitiated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Unstructured Task: Does not inherit any properties from parent Task&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// The long job will execute outside the main thread&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;longJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As we have seen, Swift Concurrency is a huge step forward in terms of safety and code maintainability. I hope you enjoyed reading this article and learned a few tricks. Dive in, experiment, and harness the power of Swift concurrency. Happy coding!&lt;/p&gt;

&lt;h2 id=&quot;further-reading--references&quot;&gt;Further Reading &amp;amp; References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://swiftrocks.com/how-async-await-works-internally-in-swift&quot;&gt;How async/await works internally in Swift&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/HqjqwW12wpw?si=zTonWzxAatpTYfKr&quot;&gt;The Bleeding Edge of Swift Concurrency&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md&quot;&gt;Structured concurrency&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md&quot;&gt;Async/await&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/main/proposals/0317-async-let.md&quot;&gt;Async let&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/main/proposals/0306-actors.md&quot;&gt;Actors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/main/proposals/0316-global-actors.md&quot;&gt;Global Actors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/oV9rvDllKEg?si=kwXQULVlNNT3K6LS&quot;&gt;Concurrency is not Parallelism&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Damien Petrilli</name></author><category term="swift" /><category term="apple" /><category term="xcode" /><summary type="html">As modern apps grow in complexity and features, the need for multitasking to enhance the user experience becomes evident. Whether processing large datasets or querying multiple systems over the network, concurrency is essential.</summary></entry><entry><title type="html">Bedrock au Forum PHP 2023</title><link href="https://tech.bedrockstreaming.com/2023/10/20/forum-php-afup-2023.html" rel="alternate" type="text/html" title="Bedrock au Forum PHP 2023" /><published>2023-10-20T00:00:00+00:00</published><updated>2023-10-20T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/2023/10/20/forum-php-afup-2023</id><content type="html" xml:base="https://tech.bedrockstreaming.com/2023/10/20/forum-php-afup-2023.html">&lt;p&gt;Cette année encore, Bedrock était présent au Forum PHP pour cette édition 2023.&lt;/p&gt;

&lt;p&gt;Nous étions sept au total : trois organisateurs, trois visiteurs et une conférencière, Pauline Rambaud.&lt;/p&gt;

&lt;h2 id=&quot;les-conférences-que-lon-retient&quot;&gt;Les conférences que l’on retient&lt;/h2&gt;

&lt;h3 id=&quot;why-is-php-still-awesome-in-2023-&quot;&gt;Why is PHP still awesome in 2023 ?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conférence présentée par &lt;a href=&quot;https://twitter.com/fkarlitschek&quot;&gt;Frank Karlitschek&lt;/a&gt;, co-fondateur de &lt;a href=&quot;https://nextcloud.com&quot;&gt;NextCloud&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;La conférence s’est divisée en deux parties que l’on pourrait résumer de la
manière suivante :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Une présentation assez détaillée de ce qu’est &lt;em&gt;NextCloud&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Pourquoi le choix de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PHP&lt;/code&gt;🐘 pour &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NextCloud&lt;/code&gt; ?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;nextcloud&quot;&gt;NextCloud&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NextCloud&lt;/code&gt; est un outil comparable à &lt;em&gt;Google Workspace&lt;/em&gt;, car il permet la gestion
de fichiers partagés, de documents de type Office, et propose aussi des outils
de conversations textuelles et d’appels vidéos.&lt;/p&gt;

&lt;p&gt;Il existe en version desktop bien sûr, mais aussi en version mobile.
On peut noter qu’il est utilisé par le &lt;em&gt;Gouvernement Français&lt;/em&gt;, ou encore
&lt;em&gt;l’Union Européenne&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;En somme, il constitue aujourd’hui une alternative crédible à ses concurrents
Américains ou Chinois.&lt;/p&gt;

&lt;p&gt;Une de ses différences majeure toutefois est qu’il est &lt;em&gt;open-source&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&quot;pourquoi-choisir-php-pour-nextcloud-&quot;&gt;Pourquoi choisir PHP pour NextCloud ?&lt;/h4&gt;

&lt;p&gt;Les raisons que Frank nous donne sont les suivantes :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PHP&lt;/code&gt;🐘 est facile à déployer&lt;/li&gt;
  &lt;li&gt;Il est indépendant (il n’appartient pas à Google)&lt;/li&gt;
  &lt;li&gt;Son isolation des process garantie une bonne scalabilité&lt;/li&gt;
  &lt;li&gt;Il propose une bonne courbe d’apprentissage&lt;/li&gt;
  &lt;li&gt;Il évolue depuis longtemps et est donc robuste&lt;/li&gt;
  &lt;li&gt;Il a derrière lui une grosse communauté de développeur&lt;/li&gt;
  &lt;li&gt;Un important écosystème d’intégration et de frameworks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il évoque toutefois quelques limites qui subsistent à son sens :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;il reste (de moins en moins) facile d’écrire du code non sécurisé, malgré
le système de typehinting ou les enums&lt;/li&gt;
  &lt;li&gt;il reste des incohérences, par exemple dans les &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array functions&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;il reste très limité dans la programmation fonctionnelle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Toutefois, Franck conclura sur le fait que sans &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PHP&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NextCloud&lt;/code&gt; n’aurait
jamais été possible.&lt;/p&gt;

&lt;h3 id=&quot;augmentez-votre-couverture--supprimez-des-tests&quot;&gt;Augmentez votre couverture : supprimez des tests&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/forumphp2023/augmentez-votre-couverture.jpeg&quot; alt=&quot;Baptiste Langlade&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conférence présentée par &lt;a href=&quot;https://twitter.com/Baptouuuu&quot;&gt;Baptiste Langlade&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Avez-vous déjà été confronté à la problématique de l’augmentation exponentielle
du nombre de tests de votre projet, et par conséquent, de l’augmentation du temps
d’exécution de vos tests ?&lt;/p&gt;

&lt;p&gt;Ce fut le cas de Baptiste dans l’Application de gestion de Documents à laquelle
il a participé.&lt;/p&gt;

&lt;h4 id=&quot;vive-le-hasard&quot;&gt;Vive le hasard&lt;/h4&gt;

&lt;p&gt;Sa réponse à ce problème fut la suivante : &lt;em&gt;jouer des tests au hasard&lt;/em&gt;, autrement
dit faire du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Property Based Testing&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;L’idée est de générer aléatoirement des données pour couvrir le plus de cas
possible.&lt;/p&gt;

&lt;p&gt;Ensuite, on écrit un test si un bug survient.&lt;/p&gt;

&lt;p&gt;Cette approche se base sur la fameuse loi de Murphy qui veut que lorsqu’un problème
doit survenir, il arrive toujours trop tôt.&lt;/p&gt;

&lt;p&gt;On mise donc sur l’aléatoire pour faire remonter les bugs plus rapidement.
Ainsi, on détermine que pour tout ensemble de donnée X, l’ensemble des tests
doit être vrai.&lt;/p&gt;

&lt;h4 id=&quot;blackbox&quot;&gt;Blackbox&lt;/h4&gt;

&lt;p&gt;De cette approche est née &lt;a href=&quot;https://github.com/Innmind/BlackBox&quot;&gt;Blackbox&lt;/a&gt;, une
librairie compatible &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PHPUnit&lt;/code&gt; permettant de faciliter et d’automatiser la mise
en place de tests basée sur le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Property Based Testing&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Elle permet notamment de faire en sorte que les jeux de données que l’on va
insérer en input peuvent être vraiment divers et variés, et provoquer des
cas critiques non répertoriés.&lt;/p&gt;

&lt;p&gt;Résultat : plus on joue les tests, plus notre confiance grandit dans l’application.&lt;/p&gt;

&lt;h3 id=&quot;comment-contribuer-à-php-en-2023--georges-banyard&quot;&gt;Comment contribuer à PHP en 2023 ? Georges Banyard&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/forumphp2023/contribuer-a-php-en-2023.jpeg&quot; alt=&quot;Georges Banyard&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conférence présentée par &lt;a href=&quot;https://twitter.com/Girgias&quot;&gt;Georges Banyard&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tout d’abord Georges Banyard a introduit la notion de compilation minimale de PHP en C, pour cela il a utilisé son blog
et nous a présenté les choses importantes à connaitre.&lt;/p&gt;

&lt;p&gt;Puis, il a fait la présentation du code source de PHP et du moteur de recherche qu’il utilise.&lt;/p&gt;

&lt;p&gt;Ensuite, il a commencé à nous montrer quelques ressources auxquelles se réferer si nous désirons contribuer à PHP.&lt;/p&gt;

&lt;p&gt;Rappelons que PHP est un langage de programmation open-source et que toute personne désireuse de l’améliorer peut
proposer une implémentation.&lt;/p&gt;

&lt;p&gt;Les ressources que nous pourrions utiliser si notre souhait était de créer une nouvelle fonction dans PHP seraient :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;des articles sur Zend (https://www.zend.com/resources/writing-php-extensions)&lt;/li&gt;
  &lt;li&gt;le PHP internal books (https://www.phpinternalsbook.com/)&lt;/li&gt;
  &lt;li&gt;ou bien encore la “Room 11” sur Stackoverflow où se retrouve de nombreux contributeurs PHP.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Georges Banyard est ensuite passé à la pratique et a codé en direct une nouvelle fonction de tri dans un
tableau &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array_search&lt;/code&gt;. Le but de cette conférence était de démystifier la contribution à PHP et de montrer aux gens que
finalement ce n’est pas si compliqué, il suffit de plonger dedans !&lt;/p&gt;

&lt;h3 id=&quot;utilisez-la-bibliothèque-standard-php-spl-au-quotidien&quot;&gt;Utilisez la bibliothèque standard PHP (SPL) au quotidien&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/forumphp2023/bibliotheque-standard-psl.jpeg&quot; alt=&quot;Florian Merle&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conférence présentée par &lt;a href=&quot;https://twitter.com/florianm__&quot;&gt;Florian Merle&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;La bibliothèque &lt;a href=&quot;https://www.php.net/manual/fr/book.spl.php&quot;&gt;SPL&lt;/a&gt; ça vous dit quelque
chose ? En réalité, vous l’utilisez déjà au quotidien à travers les &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exceptions&lt;/code&gt;
ou bien la fonction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spl_autoload_register&lt;/code&gt; par exemple, mais Florian est venu
nous parler de certains aspects moins connus et pourtant très utiles.&lt;/p&gt;

&lt;h4 id=&quot;les-structures-de-données&quot;&gt;Les structures de données&lt;/h4&gt;

&lt;p&gt;La plus évidente et la plus connue, qui a sans doute contribué à la facilité
d’accès de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PHP&lt;/code&gt;🐘 est bien évidemment l’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array&lt;/code&gt;. Mais si son avantage majeur
est le fait qu’il soit multi-usage, il se révèle en réalité assez peu optimisé
pour les gros volumes de données.&lt;/p&gt;

&lt;p&gt;D’autres structures telles que les listes doublements chaînées
(&lt;a href=&quot;https://www.php.net/manual/fr/class.spldoublylinkedlist.php&quot;&gt;SplDoublyLinkedList&lt;/a&gt;),
ou les &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Heaps&lt;/code&gt; (&lt;a href=&quot;https://www.php.net/manual/fr/class.splheap.php&quot;&gt;SplHeap&lt;/a&gt;,
&lt;a href=&quot;https://www.php.net/manual/fr/class.splpriorityqueue.php&quot;&gt;SplPriorityQueue&lt;/a&gt; ont
été abordées, mais on constate rapidement qu’elles présentent l’inconvénient majeur
d’avoir de mauvaises performances par rapport à &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array&lt;/code&gt; et des nommages de méthode
peu intuitif.&lt;/p&gt;

&lt;h4 id=&quot;php-ds&quot;&gt;PHP DS&lt;/h4&gt;

&lt;p&gt;Une alternative intéressante est &lt;a href=&quot;https://www.php.net/manual/fr/book.ds.php&quot;&gt;DS&lt;/a&gt;,
qui ne présente pas de problème de gestion de priorité et de meilleures performances.&lt;/p&gt;

&lt;p&gt;Florian nous a présenté notamment &lt;a href=&quot;https://www.php.net/manual/en/class.ds-priorityqueue.php&quot;&gt;DS\PriorityQueue&lt;/a&gt;
et &lt;a href=&quot;https://www.php.net/manual/en/class.ds-vector&quot;&gt;DS\Vector&lt;/a&gt;, qui constitue une
alternative intéressante à &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;les-iterators&quot;&gt;Les iterators&lt;/h4&gt;

&lt;p&gt;Enfin, nous avons vu les iterators de la SPl avec :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/fr/class.iteratoraggregate&quot;&gt;IteratorAggregate&lt;/a&gt;
qui permet d’appliquer un traitement éventuel sur le tableau&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/fr/class.appenditerator&quot;&gt;AppendIterator&lt;/a&gt;
qui permet d’insérer d’autres itérateurs&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/fr/class.iteratoriterator.php&quot;&gt;IteratorIterator&lt;/a&gt;
qui renvoie un autre Iterator&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/fr/class.infiniteiterator.php&quot;&gt;InfiniteIterator&lt;/a&gt;
qui permet de boucler à l’infini (pensez à la fonction lecture en boucle de votre player audio)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/fr/class.callbackfilteriterator.php&quot;&gt;CallbackFilterIterator&lt;/a&gt;
qui permet de filtrer les données à l’aide d’une callback.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;apprendre-à-apprendre--petit-dev-deviendra-grand---aline-leroy&quot;&gt;Apprendre à apprendre : petit dev deviendra grand - Aline Leroy&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conférence présentée par Aline Leroy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Aline Leroy nous parle ici de sa reconversion, et des différentes expériences qu’elle a vécues au cours de son
apprentissage du code. Elle nous donne plein d’astuces et de clés pour améliorer notre façon d’apprendre et de
travailler notre plasticité cérébrale. Tout d’abord, il faut gérer son temps, alterner concentration et dispersion, et
comprendre qu’apprendre c’est créer des liens et des images mentales.&lt;/p&gt;

&lt;p&gt;Aline Leroy nous conseille de commencer par faire une introspection afin de déterminer quels sont nos points forts et
faibles, quels sont nos objectifs et puis pour comprendre son propre fonctionnement. Ensuite, il faut faire preuve de
curiosité et ne pas se limiter à un domaine (pensez création de lien, plus le champ est grand, plus vous allez faire
des connexions). Nous pourrons aussi choisir de travailler par découpage, une partie des choses à apprendre, nous allons
devoir travailler notre mémoire. Il est aussi important que l’apprentissage soit une démarche active, prise de notes,
recherche, ne pas catégoriser et surtout, c’est un processus qui demande de la régularité.&lt;/p&gt;

&lt;p&gt;Elle insiste sur l’aspect bien-être qui est très important pour apprendre, se mettre au calme, couper ses notifications
et puis on prend des pauses, car c’est là que tout le travail de liaison neuronale se fait. Une pause sportive et encore
plus recommandée, bien sûr ces temps de dispersion doivent être sur un temps maitrisé.&lt;/p&gt;

&lt;h3 id=&quot;you-build-it-you-run-it-lobservabilité-pour-les-devs&quot;&gt;You Build It, You Run It, l’observabilité pour les devs&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/forumphp2023/you-build-it-you-run-it.jpeg&quot; alt=&quot;Smaine Milianni&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conférence présentée par &lt;a href=&quot;https://twitter.com/SmaineDev&quot;&gt;Smaine Milianni&lt;/a&gt;, développeur chez Yousign&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;L’observabilité est quelque chose de très important chez Bedrock, c’est pourquoi cette conférence était très
intéressante.&lt;/p&gt;

&lt;p&gt;Smaine a découpé sa conférence en posant trois questions : pourquoi, comment et qui ?&lt;/p&gt;

&lt;h4 id=&quot;pourquoi-faire-de-lobservabilité-&quot;&gt;Pourquoi faire de l’observabilité ?&lt;/h4&gt;

&lt;p&gt;Une application va forcément planter à un moment, nous dit Smaine pour répondre à sa première question.&lt;/p&gt;

&lt;p&gt;L’observabilité permet non seulement de diminuer les risques que cela arrive, mais aussi d’anticiper les problèmes en
amont.&lt;/p&gt;

&lt;p&gt;Au-delà des plantages, l’observabilité ouvre la porte à d’autres formes d’analyses :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;détecter les problèmes/changements de performance&lt;/li&gt;
  &lt;li&gt;capter les comportements inhabituels&lt;/li&gt;
  &lt;li&gt;ou simplement s’assurer qu’un système fonctionne correctement&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;comment-fait-on-&quot;&gt;Comment fait-on ?&lt;/h4&gt;

&lt;p&gt;Habituellement, l’observabilité s’appuie sur trois piliers : les logs, les métriques et les traces, auxquels Smaine
ajoute un quatrième : les alertes.&lt;/p&gt;

&lt;p&gt;Pour résumer ces différents piliers :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;les logs doivent être lus, et donc être disponibles dans un outil dédié&lt;/li&gt;
  &lt;li&gt;les métriques permettent d’observer l’état de santé d’une application
    &lt;ul&gt;
      &lt;li&gt;elles peuvent être techniques (CPU, temps de réponse d’une URL, etc)&lt;/li&gt;
      &lt;li&gt;ou métier (nombre de ventes par jour, nombre d’inscriptions, etc)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;les traces permettent de suivre le comportement d’une application
    &lt;ul&gt;
      &lt;li&gt;par exemple pour une requête HTTP, on aurait le temps passé dans chaque couche technique (base de données, un
controller PHP, lecture de cache, etc)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Et enfin, les alertes
    &lt;ul&gt;
      &lt;li&gt;elles ne doivent être envoyées qu’en cas de problème (pour éviter de lasser les lecteurs)&lt;/li&gt;
      &lt;li&gt;elles peuvent se baser sur les métriques (même métier)&lt;/li&gt;
      &lt;li&gt;elles peuvent être liées aux logs et aux traces pour aider à les comprendre&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Smaine nous a également rapidement parlé des post mortems, qui sont essentiels après un incident pour apprendre des
erreurs et ne pas les reproduire.&lt;/p&gt;

&lt;h4 id=&quot;qui-est-responsable-de-la-mise-en-place-&quot;&gt;Qui est responsable de la mise en place ?&lt;/h4&gt;

&lt;p&gt;L’entreprise de Smaine, Yousign, a une organisation sous forme de squads.
Un squad est composé de plusieurs métiers : dev, devops, PO, designer, chef de projet, etc.&lt;/p&gt;

&lt;p&gt;Ils sont alors responsables à la fois de leur périmètre, mais aussi de son observabilité. En gardant cette
responsabilité au sein d’un squad, les équipes sont plus attentives et réactives en cas d’incident.&lt;/p&gt;

&lt;h3 id=&quot;les-femmes-et-le-numérique&quot;&gt;Les femmes et le numérique&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/forumphp2023/les-femmes-et-le-numerique.jpeg&quot; alt=&quot;Isabelle Collet&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conférence présentée par &lt;a href=&quot;https://twitter.com/colletisabelle4&quot;&gt;Isabelle Collet&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Isabelle Collet est ancienne développeuse et sociologue épanouie comme elle le dit elle-même. Ce qui lui donne matière à
nous expliquer beaucoup de choses sur “le choix des femmes de ne pas venir dans la tech”. Et bien, oui, pourquoi
sont-elles réticentes ?&lt;/p&gt;

&lt;p&gt;Tout d’abord, Isabelle Collet nous parle de pays qui sont des contre-exemples, comme en Malaisie où les femmes sont la
majorité des postes informatiques et de développement, elles sont aussi responsables d’Université. Globalement, dans
certains pays d’Asie, les femmes sont fortement représentées dans le secteur tertiaire, et pourquoi ?
Car ces métiers sont considérés comme des “métiers de femmes”, non salissant, pas physique et surtout possibilité de
télétravail ce qui leur permet de s’occuper de leur famille.&lt;/p&gt;

&lt;p&gt;Puis grâce à un petit retour dans le passé, nous découvrons que les femmes au départ étaient très présentes dans
l’informatique et plus précisément dans le développement. Les hommes étaient chargés de la conception des ordinateurs,
ce qui était bien vu dans la société, mais la programmation était un poste considéré comme inférieur. Ce qui va changer
cela est l’apparition du micro-ordinateur qui va inverser la tendance et les hommes vont devenir plus nombreux à coder
et les femmes vont progressivement “disparaître” du paysage informatique.&lt;/p&gt;

&lt;p&gt;Pour remédier à cela, Isabelle Collet nous présente deux initiatives universitaires où pour rééquilibrer le taux
hommes/femmes des quotas ont été imposés pendant une dizaine d’années. Aujourd’hui l’équilibre de candidats se fait
naturellement.&lt;/p&gt;

&lt;p&gt;En conclusion, les choses évoluent si on veut bien les faire évoluer. Il faut continuer les efforts d’inclusion et la
lutte pour que les femmes soient plus nombreuses dans la tech.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Cette année, la fresque LEGO a célébré la diversité des membres de l’AFUP et bien sûr le PHP.&lt;/p&gt;

&lt;p&gt;Ce forum fût l’occasion d’échanger avec de nombreuses personnes, de découvrir des sujets aussi bien techniques que
sociétaux. On ne peut que féliciter les conférencier·e·s et les bénévoles pour un Forum PHP encore très réussi !&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/forumphp2023/fresque-lego-communautaire.jpeg&quot; alt=&quot;La fresque LEGO communautaire&quot; /&gt;&lt;/p&gt;</content><author><name>Backend teams</name></author><category term="afup" /><category term="php" /><category term="forumphp" /><category term="conference" /><summary type="html">Cette année encore, Bedrock était présent au Forum PHP pour cette édition 2023.</summary></entry><entry><title type="html">Json au service des devs #LFT 29/09/23</title><link href="https://tech.bedrockstreaming.com/json-au-service-des-devs" rel="alternate" type="text/html" title="Json au service des devs #LFT 29/09/23" /><published>2023-09-29T00:00:00+00:00</published><updated>2023-09-29T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/json-au-service-des-devs</id><content type="html" xml:base="https://tech.bedrockstreaming.com/json-au-service-des-devs">&lt;blockquote&gt;
  &lt;p&gt;Éditer un CV, imprimer des fiches de recette, écrire une lettre de motivation, rédiger un rapport … Tant de choses fastidieuses à écrire et chiantes à mettre en page (surtout quand on ne sait pas utiliser Word). C’est pourquoi j’ai développé un outil pour m’aider à faire tout ça en utilisant uniquement du JSON !&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Par &lt;strong&gt;Julie Nginn&lt;/strong&gt;&lt;/p&gt;</content><author><name>Julie Nginn</name></author><category term="lft" /><category term="tech" /><summary type="html">Éditer un CV, imprimer des fiches de recette, écrire une lettre de motivation, rédiger un rapport … Tant de choses fastidieuses à écrire et chiantes à mettre en page (surtout quand on ne sait pas utiliser Word). C’est pourquoi j’ai développé un outil pour m’aider à faire tout ça en utilisant uniquement du JSON !</summary></entry><entry><title type="html">La traversée du Finnmarksvidda: carnet de bord d’une aventure glaciale #LFT 29/09/23</title><link href="https://tech.bedrockstreaming.com/la-traversee-du-finnmarksvidda-carnet-de-bord-d-une-aventure-glaciale" rel="alternate" type="text/html" title="La traversée du Finnmarksvidda: carnet de bord d’une aventure glaciale #LFT 29/09/23" /><published>2023-09-29T00:00:00+00:00</published><updated>2023-09-29T00:00:00+00:00</updated><id>https://tech.bedrockstreaming.com/la-traversee-du-finnmarksvidda-carnet-de-bord-d-une-aventure-glaciale</id><content type="html" xml:base="https://tech.bedrockstreaming.com/la-traversee-du-finnmarksvidda-carnet-de-bord-d-une-aventure-glaciale">&lt;blockquote&gt;
  &lt;p&gt;Carnet de voyage de ma traversée en solitaire du plateau du Finnmarksvidda, en Norvège, entre Alta et Karasjok, en mars 2023.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Par &lt;strong&gt;Sylvain Guyon&lt;/strong&gt;&lt;/p&gt;</content><author><name>Sylvain Guyon</name></author><category term="lft" /><category term="tech" /><summary type="html">Carnet de voyage de ma traversée en solitaire du plateau du Finnmarksvidda, en Norvège, entre Alta et Karasjok, en mars 2023.</summary></entry></feed>